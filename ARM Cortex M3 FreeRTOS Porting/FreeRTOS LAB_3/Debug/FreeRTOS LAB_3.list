
FreeRTOS LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003338  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003448  08003448  00013448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08003468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000220  20000078  080034e0  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000298  080034e0  00020298  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008398  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014db  00000000  00000000  00028439  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000708  00000000  00000000  00029918  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000620  00000000  00000000  0002a020  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000033c1  00000000  00000000  0002a640  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000276c  00000000  00000000  0002da01  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003016d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001b70  00000000  00000000  000301ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00031d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003430 	.word	0x08003430

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003430 	.word	0x08003430

08000150 <MGPIO_voidSetPinDirection>:
#include "DIO_config.h"



void MGPIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	460b      	mov	r3, r1
 800015c:	71bb      	strb	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d03a      	beq.n	80001de <MGPIO_voidSetPinDirection+0x8e>
 8000168:	2b02      	cmp	r3, #2
 800016a:	d06d      	beq.n	8000248 <MGPIO_voidSetPinDirection+0xf8>
 800016c:	2b00      	cmp	r3, #0
 800016e:	d000      	beq.n	8000172 <MGPIO_voidSetPinDirection+0x22>
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
			}
			break;
			
		default : 		break;
 8000170:	e0a4      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			if (Copy_u8Pin <= 7)
 8000172:	79bb      	ldrb	r3, [r7, #6]
 8000174:	2b07      	cmp	r3, #7
 8000176:	d815      	bhi.n	80001a4 <MGPIO_voidSetPinDirection+0x54>
				GPIOA->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000178:	4953      	ldr	r1, [pc, #332]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 800017a:	4b53      	ldr	r3, [pc, #332]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	79ba      	ldrb	r2, [r7, #6]
 8000180:	0092      	lsls	r2, r2, #2
 8000182:	200f      	movs	r0, #15
 8000184:	fa00 f202 	lsl.w	r2, r0, r2
 8000188:	43d2      	mvns	r2, r2
 800018a:	4013      	ands	r3, r2
 800018c:	600b      	str	r3, [r1, #0]
				GPIOA->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 800018e:	484e      	ldr	r0, [pc, #312]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 8000190:	4b4d      	ldr	r3, [pc, #308]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	7979      	ldrb	r1, [r7, #5]
 8000196:	79ba      	ldrb	r2, [r7, #6]
 8000198:	0092      	lsls	r2, r2, #2
 800019a:	fa01 f202 	lsl.w	r2, r1, r2
 800019e:	4313      	orrs	r3, r2
 80001a0:	6003      	str	r3, [r0, #0]
			break;
 80001a2:	e086      	b.n	80002b2 <MGPIO_voidSetPinDirection+0x162>
			else if (Copy_u8Pin <= 15)
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2b0f      	cmp	r3, #15
 80001a8:	f200 8083 	bhi.w	80002b2 <MGPIO_voidSetPinDirection+0x162>
				Copy_u8Pin -= 8;
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	3b08      	subs	r3, #8
 80001b0:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 80001b2:	4945      	ldr	r1, [pc, #276]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001b4:	4b44      	ldr	r3, [pc, #272]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	79ba      	ldrb	r2, [r7, #6]
 80001ba:	0092      	lsls	r2, r2, #2
 80001bc:	200f      	movs	r0, #15
 80001be:	fa00 f202 	lsl.w	r2, r0, r2
 80001c2:	43d2      	mvns	r2, r2
 80001c4:	4013      	ands	r3, r2
 80001c6:	604b      	str	r3, [r1, #4]
				GPIOA->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 80001c8:	483f      	ldr	r0, [pc, #252]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001ca:	4b3f      	ldr	r3, [pc, #252]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	7979      	ldrb	r1, [r7, #5]
 80001d0:	79ba      	ldrb	r2, [r7, #6]
 80001d2:	0092      	lsls	r2, r2, #2
 80001d4:	fa01 f202 	lsl.w	r2, r1, r2
 80001d8:	4313      	orrs	r3, r2
 80001da:	6043      	str	r3, [r0, #4]
			break;
 80001dc:	e069      	b.n	80002b2 <MGPIO_voidSetPinDirection+0x162>
			if (Copy_u8Pin <= 7)
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	d815      	bhi.n	8000210 <MGPIO_voidSetPinDirection+0xc0>
				GPIOB->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 80001e4:	4939      	ldr	r1, [pc, #228]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001e6:	4b39      	ldr	r3, [pc, #228]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	200f      	movs	r0, #15
 80001f0:	fa00 f202 	lsl.w	r2, r0, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4013      	ands	r3, r2
 80001f8:	600b      	str	r3, [r1, #0]
				GPIOB->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 80001fa:	4834      	ldr	r0, [pc, #208]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001fc:	4b33      	ldr	r3, [pc, #204]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	7979      	ldrb	r1, [r7, #5]
 8000202:	79ba      	ldrb	r2, [r7, #6]
 8000204:	0092      	lsls	r2, r2, #2
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	4313      	orrs	r3, r2
 800020c:	6003      	str	r3, [r0, #0]
			break;
 800020e:	e052      	b.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
			else if (Copy_u8Pin <= 15)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b0f      	cmp	r3, #15
 8000214:	d84f      	bhi.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
				Copy_u8Pin -= 8;
 8000216:	79bb      	ldrb	r3, [r7, #6]
 8000218:	3b08      	subs	r3, #8
 800021a:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 800021c:	492b      	ldr	r1, [pc, #172]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	0092      	lsls	r2, r2, #2
 8000226:	200f      	movs	r0, #15
 8000228:	fa00 f202 	lsl.w	r2, r0, r2
 800022c:	43d2      	mvns	r2, r2
 800022e:	4013      	ands	r3, r2
 8000230:	604b      	str	r3, [r1, #4]
				GPIOB->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	7979      	ldrb	r1, [r7, #5]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0092      	lsls	r2, r2, #2
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	4313      	orrs	r3, r2
 8000244:	6043      	str	r3, [r0, #4]
			break;
 8000246:	e036      	b.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
			if (Copy_u8Pin <= 7)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b07      	cmp	r3, #7
 800024c:	d815      	bhi.n	800027a <MGPIO_voidSetPinDirection+0x12a>
				GPIOC->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 800024e:	4920      	ldr	r1, [pc, #128]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	79ba      	ldrb	r2, [r7, #6]
 8000256:	0092      	lsls	r2, r2, #2
 8000258:	200f      	movs	r0, #15
 800025a:	fa00 f202 	lsl.w	r2, r0, r2
 800025e:	43d2      	mvns	r2, r2
 8000260:	4013      	ands	r3, r2
 8000262:	600b      	str	r3, [r1, #0]
				GPIOC->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	7979      	ldrb	r1, [r7, #5]
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4313      	orrs	r3, r2
 8000276:	6003      	str	r3, [r0, #0]
			break;
 8000278:	e01f      	b.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
			else if (Copy_u8Pin <= 15)
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	2b0f      	cmp	r3, #15
 800027e:	d81c      	bhi.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
				Copy_u8Pin -= 8;
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	3b08      	subs	r3, #8
 8000284:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000286:	4912      	ldr	r1, [pc, #72]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	200f      	movs	r0, #15
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	4013      	ands	r3, r2
 800029a:	604b      	str	r3, [r1, #4]
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	7979      	ldrb	r1, [r7, #5]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	0092      	lsls	r2, r2, #2
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4313      	orrs	r3, r2
 80002ae:	6043      	str	r3, [r0, #4]
			break;
 80002b0:	e003      	b.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
			break;
 80002b2:	bf00      	nop
 80002b4:	e002      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			break;
 80002b6:	bf00      	nop
 80002b8:	e000      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			break;
 80002ba:	bf00      	nop
	}
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40011000 	.word	0x40011000

080002d4 <MGPIO_voidSetPinValue>:


void MGPIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	460b      	mov	r3, r1
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	4613      	mov	r3, r2
 80002e4:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d018      	beq.n	800031e <MGPIO_voidSetPinValue+0x4a>
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d02a      	beq.n	8000346 <MGPIO_voidSetPinValue+0x72>
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d000      	beq.n	80002f6 <MGPIO_voidSetPinValue+0x22>
				{
					GPIOC->BSRR = (1 << Copy_u8Pin);
				}
				break;

			default : 		break;
 80002f4:	e040      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				if (Copy_u8Value == GPIO_LOW)
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <MGPIO_voidSetPinValue+0x36>
					GPIOA->BRR = (1 << Copy_u8Pin);
 80002fc:	4a21      	ldr	r2, [pc, #132]	; (8000384 <MGPIO_voidSetPinValue+0xb0>)
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	6153      	str	r3, [r2, #20]
				break;
 8000308:	e031      	b.n	800036e <MGPIO_voidSetPinValue+0x9a>
				else if (Copy_u8Value == GPIO_HIGH)
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d12e      	bne.n	800036e <MGPIO_voidSetPinValue+0x9a>
					GPIOA->BSRR = (1 << Copy_u8Pin);
 8000310:	4a1c      	ldr	r2, [pc, #112]	; (8000384 <MGPIO_voidSetPinValue+0xb0>)
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2101      	movs	r1, #1
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	6113      	str	r3, [r2, #16]
				break;
 800031c:	e027      	b.n	800036e <MGPIO_voidSetPinValue+0x9a>
				if (Copy_u8Value == GPIO_LOW)
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d106      	bne.n	8000332 <MGPIO_voidSetPinValue+0x5e>
					GPIOB->BRR = (1 << Copy_u8Pin);
 8000324:	4a18      	ldr	r2, [pc, #96]	; (8000388 <MGPIO_voidSetPinValue+0xb4>)
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	2101      	movs	r1, #1
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	6153      	str	r3, [r2, #20]
				break;
 8000330:	e01f      	b.n	8000372 <MGPIO_voidSetPinValue+0x9e>
				else if (Copy_u8Value == GPIO_HIGH)
 8000332:	797b      	ldrb	r3, [r7, #5]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d11c      	bne.n	8000372 <MGPIO_voidSetPinValue+0x9e>
					GPIOB->BSRR = (1 << Copy_u8Pin);
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <MGPIO_voidSetPinValue+0xb4>)
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	2101      	movs	r1, #1
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	6113      	str	r3, [r2, #16]
				break;
 8000344:	e015      	b.n	8000372 <MGPIO_voidSetPinValue+0x9e>
				if (Copy_u8Value == GPIO_LOW)
 8000346:	797b      	ldrb	r3, [r7, #5]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d106      	bne.n	800035a <MGPIO_voidSetPinValue+0x86>
					GPIOC->BRR = (1 << Copy_u8Pin);
 800034c:	4a0f      	ldr	r2, [pc, #60]	; (800038c <MGPIO_voidSetPinValue+0xb8>)
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	6153      	str	r3, [r2, #20]
				break;
 8000358:	e00d      	b.n	8000376 <MGPIO_voidSetPinValue+0xa2>
				else if (Copy_u8Value == GPIO_HIGH)
 800035a:	797b      	ldrb	r3, [r7, #5]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d10a      	bne.n	8000376 <MGPIO_voidSetPinValue+0xa2>
					GPIOC->BSRR = (1 << Copy_u8Pin);
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <MGPIO_voidSetPinValue+0xb8>)
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2101      	movs	r1, #1
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	6113      	str	r3, [r2, #16]
				break;
 800036c:	e003      	b.n	8000376 <MGPIO_voidSetPinValue+0xa2>
				break;
 800036e:	bf00      	nop
 8000370:	e002      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				break;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				break;
 8000376:	bf00      	nop
		}
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40011000 	.word	0x40011000

08000390 <MGPIO_voidSetPullResistor>:
	}
}


void MGPIO_voidSetPullResistor(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PullType)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	460b      	mov	r3, r1
 800039c:	71bb      	strb	r3, [r7, #6]
 800039e:	4613      	mov	r3, r2
 80003a0:	717b      	strb	r3, [r7, #5]
	/* set pin configuration as input pull */
	MGPIO_voidSetPinDirection(Copy_u8Port , Copy_u8Pin , GPIO_INPUT_PULL_UP_DOWN);
 80003a2:	79b9      	ldrb	r1, [r7, #6]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2208      	movs	r2, #8
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fed1 	bl	8000150 <MGPIO_voidSetPinDirection>
	switch (Copy_u8Port)
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d018      	beq.n	80003e6 <MGPIO_voidSetPullResistor+0x56>
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d02a      	beq.n	800040e <MGPIO_voidSetPullResistor+0x7e>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d000      	beq.n	80003be <MGPIO_voidSetPullResistor+0x2e>
			{
				GPIOC->BRR = (1 << Copy_u8Pin);
			}
			break;
			
		default : 		break;
 80003bc:	e040      	b.n	8000440 <MGPIO_voidSetPullResistor+0xb0>
			if (Copy_u8PullType == GPIO_PULL_UP)
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d106      	bne.n	80003d2 <MGPIO_voidSetPullResistor+0x42>
				GPIOA->BSRR = (1 << Copy_u8Pin);
 80003c4:	4a20      	ldr	r2, [pc, #128]	; (8000448 <MGPIO_voidSetPullResistor+0xb8>)
 80003c6:	79bb      	ldrb	r3, [r7, #6]
 80003c8:	2101      	movs	r1, #1
 80003ca:	fa01 f303 	lsl.w	r3, r1, r3
 80003ce:	6113      	str	r3, [r2, #16]
			break;
 80003d0:	e031      	b.n	8000436 <MGPIO_voidSetPullResistor+0xa6>
			else if (Copy_u8PullType == GPIO_PULL_DOWN)
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d12e      	bne.n	8000436 <MGPIO_voidSetPullResistor+0xa6>
				GPIOA->BRR = (1 << Copy_u8Pin);
 80003d8:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <MGPIO_voidSetPullResistor+0xb8>)
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	2101      	movs	r1, #1
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	6153      	str	r3, [r2, #20]
			break;
 80003e4:	e027      	b.n	8000436 <MGPIO_voidSetPullResistor+0xa6>
			if (Copy_u8PullType == GPIO_PULL_UP)
 80003e6:	797b      	ldrb	r3, [r7, #5]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d106      	bne.n	80003fa <MGPIO_voidSetPullResistor+0x6a>
				GPIOB->BSRR = (1 << Copy_u8Pin);
 80003ec:	4a17      	ldr	r2, [pc, #92]	; (800044c <MGPIO_voidSetPullResistor+0xbc>)
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	2101      	movs	r1, #1
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	6113      	str	r3, [r2, #16]
			break;
 80003f8:	e01f      	b.n	800043a <MGPIO_voidSetPullResistor+0xaa>
			else if (Copy_u8PullType == GPIO_PULL_DOWN)
 80003fa:	797b      	ldrb	r3, [r7, #5]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d11c      	bne.n	800043a <MGPIO_voidSetPullResistor+0xaa>
				GPIOB->BRR = (1 << Copy_u8Pin);
 8000400:	4a12      	ldr	r2, [pc, #72]	; (800044c <MGPIO_voidSetPullResistor+0xbc>)
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	6153      	str	r3, [r2, #20]
			break;
 800040c:	e015      	b.n	800043a <MGPIO_voidSetPullResistor+0xaa>
			if (Copy_u8PullType == GPIO_PULL_UP)
 800040e:	797b      	ldrb	r3, [r7, #5]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d106      	bne.n	8000422 <MGPIO_voidSetPullResistor+0x92>
				GPIOC->BSRR = (1 << Copy_u8Pin);
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <MGPIO_voidSetPullResistor+0xc0>)
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	2101      	movs	r1, #1
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	6113      	str	r3, [r2, #16]
			break;
 8000420:	e00d      	b.n	800043e <MGPIO_voidSetPullResistor+0xae>
			else if (Copy_u8PullType == GPIO_PULL_DOWN)
 8000422:	797b      	ldrb	r3, [r7, #5]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d10a      	bne.n	800043e <MGPIO_voidSetPullResistor+0xae>
				GPIOC->BRR = (1 << Copy_u8Pin);
 8000428:	4a09      	ldr	r2, [pc, #36]	; (8000450 <MGPIO_voidSetPullResistor+0xc0>)
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	2101      	movs	r1, #1
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	6153      	str	r3, [r2, #20]
			break;
 8000434:	e003      	b.n	800043e <MGPIO_voidSetPullResistor+0xae>
			break;
 8000436:	bf00      	nop
 8000438:	e002      	b.n	8000440 <MGPIO_voidSetPullResistor+0xb0>
			break;
 800043a:	bf00      	nop
 800043c:	e000      	b.n	8000440 <MGPIO_voidSetPullResistor+0xb0>
			break;
 800043e:	bf00      	nop
	}
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40010800 	.word	0x40010800
 800044c:	40010c00 	.word	0x40010c00
 8000450:	40011000 	.word	0x40011000

08000454 <MEXTI_voidInit>:
#include "EXTI_config.h"
#include "EXTI_private.h"


void MEXTI_voidInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	#if		INTERRUPT_MODE == EXTI_RISING
		SET_BIT(EXTI->RTSR , INTERRUPT_LINE);
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <MEXTI_voidInit+0x24>)
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <MEXTI_voidInit+0x24>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000462:	6093      	str	r3, [r2, #8]
	#else 
		#error("invalid mode")

	#endif
	
	CLR_BIT(EXTI->IMR , INTERRUPT_LINE);		//Disable interrupt line
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <MEXTI_voidInit+0x24>)
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <MEXTI_voidInit+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40010400 	.word	0x40010400

0800047c <MEXTI_voidEnableEXTI>:


void MEXTI_voidEnableEXTI(u8 Copy_u8EXTILine)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->IMR , Copy_u8EXTILine);		//Enable interrupt line
 8000486:	4907      	ldr	r1, [pc, #28]	; (80004a4 <MEXTI_voidEnableEXTI+0x28>)
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MEXTI_voidEnableEXTI+0x28>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	79fa      	ldrb	r2, [r7, #7]
 800048e:	2001      	movs	r0, #1
 8000490:	fa00 f202 	lsl.w	r2, r0, r2
 8000494:	4313      	orrs	r3, r2
 8000496:	600b      	str	r3, [r1, #0]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40010400 	.word	0x40010400

080004a8 <MEXTI_voidSetSignalLatch>:
}



void MEXTI_voidSetSignalLatch(u8 Copy_u8EXTILine , u8 Copy_u8EXTISenseMode)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	4613      	mov	r3, r2
 80004b6:	71bb      	strb	r3, [r7, #6]
	SET_BIT(EXTI->IMR , Copy_u8EXTILine);		//Enable interrupt line
 80004b8:	491e      	ldr	r1, [pc, #120]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	79fa      	ldrb	r2, [r7, #7]
 80004c0:	2001      	movs	r0, #1
 80004c2:	fa00 f202 	lsl.w	r2, r0, r2
 80004c6:	4313      	orrs	r3, r2
 80004c8:	600b      	str	r3, [r1, #0]
	
	switch (Copy_u8EXTISenseMode)      
 80004ca:	79bb      	ldrb	r3, [r7, #6]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d00e      	beq.n	80004ee <MEXTI_voidSetSignalLatch+0x46>
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d016      	beq.n	8000502 <MEXTI_voidSetSignalLatch+0x5a>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d000      	beq.n	80004da <MEXTI_voidSetSignalLatch+0x32>
		case EXTI_ON_CHANGE :          
			SET_BIT(EXTI->RTSR , Copy_u8EXTILine);
			SET_BIT(EXTI->FTSR , Copy_u8EXTILine);                  
			break;            

		default : 		break;
 80004d8:	e026      	b.n	8000528 <MEXTI_voidSetSignalLatch+0x80>
			SET_BIT(EXTI->RTSR , Copy_u8EXTILine);                  
 80004da:	4916      	ldr	r1, [pc, #88]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	79fa      	ldrb	r2, [r7, #7]
 80004e2:	2001      	movs	r0, #1
 80004e4:	fa00 f202 	lsl.w	r2, r0, r2
 80004e8:	4313      	orrs	r3, r2
 80004ea:	608b      	str	r3, [r1, #8]
			break;            
 80004ec:	e01c      	b.n	8000528 <MEXTI_voidSetSignalLatch+0x80>
			SET_BIT(EXTI->FTSR , Copy_u8EXTILine);                  
 80004ee:	4911      	ldr	r1, [pc, #68]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	2001      	movs	r0, #1
 80004f8:	fa00 f202 	lsl.w	r2, r0, r2
 80004fc:	4313      	orrs	r3, r2
 80004fe:	60cb      	str	r3, [r1, #12]
			break;            
 8000500:	e012      	b.n	8000528 <MEXTI_voidSetSignalLatch+0x80>
			SET_BIT(EXTI->RTSR , Copy_u8EXTILine);
 8000502:	490c      	ldr	r1, [pc, #48]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	79fa      	ldrb	r2, [r7, #7]
 800050a:	2001      	movs	r0, #1
 800050c:	fa00 f202 	lsl.w	r2, r0, r2
 8000510:	4313      	orrs	r3, r2
 8000512:	608b      	str	r3, [r1, #8]
			SET_BIT(EXTI->FTSR , Copy_u8EXTILine);                  
 8000514:	4907      	ldr	r1, [pc, #28]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	79fa      	ldrb	r2, [r7, #7]
 800051c:	2001      	movs	r0, #1
 800051e:	fa00 f202 	lsl.w	r2, r0, r2
 8000522:	4313      	orrs	r3, r2
 8000524:	60cb      	str	r3, [r1, #12]
			break;            
 8000526:	bf00      	nop
	}
	
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40010400 	.word	0x40010400

08000538 <MEXTI_voidSetCallBack>:



void MEXTI_voidSetCallBack(u8 Copy_u8EXTILine , void (*ptr) (void) )
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	71fb      	strb	r3, [r7, #7]
	EXTI_Callback[Copy_u8EXTILine] = ptr ;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4904      	ldr	r1, [pc, #16]	; (8000558 <MEXTI_voidSetCallBack+0x20>)
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	20000094 	.word	0x20000094

0800055c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	EXTI_Callback[0]();
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <EXTI0_IRQHandler+0x1c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 0);
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <EXTI0_IRQHandler+0x20>)
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <EXTI0_IRQHandler+0x20>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6153      	str	r3, [r2, #20]
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000094 	.word	0x20000094
 800057c:	40010400 	.word	0x40010400

08000580 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	EXTI_Callback[1]();
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <EXTI1_IRQHandler+0x1c>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 1); 
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <EXTI1_IRQHandler+0x20>)
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <EXTI1_IRQHandler+0x20>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6153      	str	r3, [r2, #20]
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000094 	.word	0x20000094
 80005a0:	40010400 	.word	0x40010400

080005a4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	EXTI_Callback[2]();
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <EXTI2_IRQHandler+0x1c>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 2); 
 80005ae:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <EXTI2_IRQHandler+0x20>)
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <EXTI2_IRQHandler+0x20>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6153      	str	r3, [r2, #20]
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000094 	.word	0x20000094
 80005c4:	40010400 	.word	0x40010400

080005c8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	EXTI_Callback[3]();
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <EXTI3_IRQHandler+0x1c>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 3); 
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <EXTI3_IRQHandler+0x20>)
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <EXTI3_IRQHandler+0x20>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	6153      	str	r3, [r2, #20]
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000094 	.word	0x20000094
 80005e8:	40010400 	.word	0x40010400

080005ec <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	EXTI_Callback[4]();
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <EXTI4_IRQHandler+0x1c>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 4); 
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <EXTI4_IRQHandler+0x20>)
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <EXTI4_IRQHandler+0x20>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6153      	str	r3, [r2, #20]
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000094 	.word	0x20000094
 800060c:	40010400 	.word	0x40010400

08000610 <MNVIC_voidEnableInterrupt>:
#include "NVIC_private.h"



void MNVIC_voidEnableInterrupt(u8 Copy_u8IntNum)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8IntNum <= 31)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b1f      	cmp	r3, #31
 800061e:	d806      	bhi.n	800062e <MNVIC_voidEnableInterrupt+0x1e>
	{
		NVIC_ISER0 = (1 << Copy_u8IntNum);
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <MNVIC_voidEnableInterrupt+0x40>)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2101      	movs	r1, #1
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	6013      	str	r3, [r2, #0]
	
	else 
	{
		/* return an error */
	}
}
 800062c:	e00b      	b.n	8000646 <MNVIC_voidEnableInterrupt+0x36>
	else if (Copy_u8IntNum <= 59)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b3b      	cmp	r3, #59	; 0x3b
 8000632:	d808      	bhi.n	8000646 <MNVIC_voidEnableInterrupt+0x36>
		Copy_u8IntNum -=32;
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	3b20      	subs	r3, #32
 8000638:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << Copy_u8IntNum);
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <MNVIC_voidEnableInterrupt+0x44>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000e104 	.word	0xe000e104

08000658 <MNVIC_voidSetPriority>:
	return Local_u8Result;
}


void MNVIC_voidSetPriority(s8 Copy_s8IntNum , u8 Copy_u8GroupPriority  , u8 Copy_u8SubPriority, u32 Copy_u32PriGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	460b      	mov	r3, r1
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	4613      	mov	r3, r2
 800066a:	717b      	strb	r3, [r7, #5]
	/* SCB_AIRCR register is used to determines the split of group priority from sub priority */
	#define		SCB_AIRCR						(*((volatile u32*)(0XE000ED00 + 0X0C)))
	SCB_AIRCR = Copy_u32PriGroup ;
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MNVIC_voidSetPriority+0x60>)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	6013      	str	r3, [r2, #0]
	u8 Local_u8Priority = Copy_u8SubPriority | (Copy_u8GroupPriority << (Copy_u32PriGroup - 0X05FA0300)/256) ; // 256 = 0x100
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	6839      	ldr	r1, [r7, #0]
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MNVIC_voidSetPriority+0x64>)
 8000678:	440b      	add	r3, r1
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	b25a      	sxtb	r2, r3
 8000682:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000686:	4313      	orrs	r3, r2
 8000688:	b25b      	sxtb	r3, r3
 800068a:	73fb      	strb	r3, [r7, #15]
	/* Core peripheral */
	
	/* External Peripheral */
	
	if (Copy_s8IntNum >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db09      	blt.n	80006a8 <MNVIC_voidSetPriority+0x50>
	{
		NVIC_IPR[Copy_s8IntNum] = Local_u8Priority << 4 ;
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800069c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80006a0:	7bfa      	ldrb	r2, [r7, #15]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	701a      	strb	r2, [r3, #0]
	}
	
	SCB_AIRCR = Copy_u32PriGroup ;
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <MNVIC_voidSetPriority+0x60>)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	6013      	str	r3, [r2, #0]
}   
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	e000ed0c 	.word	0xe000ed0c
 80006bc:	fa05fd00 	.word	0xfa05fd00

080006c0 <MRCC_voidInitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void MRCC_voidInitSysClock(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	/* clear registers */
	RCC_CFGR = 0;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MRCC_voidInitSysClock+0x28>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
	RCC_CR = 0;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MRCC_voidInitSysClock+0x2c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]

	#if		RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		RCC_CR = 0X00010000;								/* Enable HSE with no bypass */
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MRCC_voidInitSysClock+0x2c>)
 80006d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006d6:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0X00000001;								/* Select system clock switch */
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <MRCC_voidInitSysClock+0x28>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
			#error("you entered non valid value")
		#endif
	#else
		#error("you entered non valid clock type")
	#endif
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40021004 	.word	0x40021004
 80006ec:	40021000 	.word	0x40021000

080006f0 <MRCC_voidEnableClock>:


void MRCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	2b1f      	cmp	r3, #31
 8000704:	d825      	bhi.n	8000752 <MRCC_voidEnableClock+0x62>
	{
		switch (Copy_u8BusId)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d00e      	beq.n	800072a <MRCC_voidEnableClock+0x3a>
 800070c:	2b02      	cmp	r3, #2
 800070e:	d016      	beq.n	800073e <MRCC_voidEnableClock+0x4e>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d000      	beq.n	8000716 <MRCC_voidEnableClock+0x26>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
				break;
				
			default        : 
				/* Return error */ 
				break;
 8000714:	e01d      	b.n	8000752 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_AHBENR,Copy_u8PerId);
 8000716:	4911      	ldr	r1, [pc, #68]	; (800075c <MRCC_voidEnableClock+0x6c>)
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MRCC_voidEnableClock+0x6c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	79ba      	ldrb	r2, [r7, #6]
 800071e:	2001      	movs	r0, #1
 8000720:	fa00 f202 	lsl.w	r2, r0, r2
 8000724:	4313      	orrs	r3, r2
 8000726:	600b      	str	r3, [r1, #0]
				break;
 8000728:	e013      	b.n	8000752 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB1ENR,Copy_u8PerId);
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <MRCC_voidEnableClock+0x70>)
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MRCC_voidEnableClock+0x70>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	79ba      	ldrb	r2, [r7, #6]
 8000732:	2001      	movs	r0, #1
 8000734:	fa00 f202 	lsl.w	r2, r0, r2
 8000738:	4313      	orrs	r3, r2
 800073a:	600b      	str	r3, [r1, #0]
				break;
 800073c:	e009      	b.n	8000752 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
 800073e:	4909      	ldr	r1, [pc, #36]	; (8000764 <MRCC_voidEnableClock+0x74>)
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MRCC_voidEnableClock+0x74>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	79ba      	ldrb	r2, [r7, #6]
 8000746:	2001      	movs	r0, #1
 8000748:	fa00 f202 	lsl.w	r2, r0, r2
 800074c:	4313      	orrs	r3, r2
 800074e:	600b      	str	r3, [r1, #0]
				break;
 8000750:	bf00      	nop
	
	else
	{
		/* Return error */
	}
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40021014 	.word	0x40021014
 8000760:	4002101c 	.word	0x4002101c
 8000764:	40021018 	.word	0x40021018

08000768 <SEVSEG_voidInit>:
#include "SEVSEG_config.h"



void SEVSEG_voidInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinDirection(SEVSEG_PINA , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800076c:	2201      	movs	r2, #1
 800076e:	2101      	movs	r1, #1
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fced 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PINB , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000776:	2201      	movs	r2, #1
 8000778:	2102      	movs	r1, #2
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff fce8 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PINC , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000780:	2201      	movs	r2, #1
 8000782:	2103      	movs	r1, #3
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fce3 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PIND , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800078a:	2201      	movs	r2, #1
 800078c:	2104      	movs	r1, #4
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fcde 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PINE , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000794:	2201      	movs	r2, #1
 8000796:	2105      	movs	r1, #5
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff fcd9 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PINF , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800079e:	2201      	movs	r2, #1
 80007a0:	2106      	movs	r1, #6
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fcd4 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PING , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2107      	movs	r1, #7
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fccf 	bl	8000150 <MGPIO_voidSetPinDirection>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <SEVSEG_voidDisplay>:



void SEVSEG_voidDisplay(u8 Copy_u8Num)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Bit[7] = {0} ;
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	f8c3 2003 	str.w	r2, [r3, #3]
	u8 Local_u8Index = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	73fb      	strb	r3, [r7, #15]
	switch (SEVSEG_TYPE)
	{
		case COMMON_CATHODE_SEVSEG :
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e013      	b.n	8000800 <SEVSEG_voidDisplay+0x48>
			{
				Local_u8Bit[Local_u8Index] = GET_BIT(array_val[Copy_u8Num] , Local_u8Index);
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	79fa      	ldrb	r2, [r7, #7]
 80007dc:	4921      	ldr	r1, [pc, #132]	; (8000864 <SEVSEG_voidDisplay+0xac>)
 80007de:	5c8a      	ldrb	r2, [r1, r2]
 80007e0:	4611      	mov	r1, r2
 80007e2:	7bfa      	ldrb	r2, [r7, #15]
 80007e4:	fa41 f202 	asr.w	r2, r1, r2
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	f002 0201 	and.w	r2, r2, #1
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	f107 0110 	add.w	r1, r7, #16
 80007f4:	440b      	add	r3, r1
 80007f6:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	3301      	adds	r3, #1
 80007fe:	73fb      	strb	r3, [r7, #15]
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	2b06      	cmp	r3, #6
 8000804:	d9e8      	bls.n	80007d8 <SEVSEG_voidDisplay+0x20>
			}
			
			MGPIO_voidSetPinValue(SEVSEG_PINA , Local_u8Bit[0]) ;
 8000806:	7a3b      	ldrb	r3, [r7, #8]
 8000808:	461a      	mov	r2, r3
 800080a:	2101      	movs	r1, #1
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fd61 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PINB , Local_u8Bit[1]) ;
 8000812:	7a7b      	ldrb	r3, [r7, #9]
 8000814:	461a      	mov	r2, r3
 8000816:	2102      	movs	r1, #2
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fd5b 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PINC , Local_u8Bit[2]) ;
 800081e:	7abb      	ldrb	r3, [r7, #10]
 8000820:	461a      	mov	r2, r3
 8000822:	2103      	movs	r1, #3
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff fd55 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PIND , Local_u8Bit[3]) ;
 800082a:	7afb      	ldrb	r3, [r7, #11]
 800082c:	461a      	mov	r2, r3
 800082e:	2104      	movs	r1, #4
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fd4f 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PINE , Local_u8Bit[4]) ;
 8000836:	7b3b      	ldrb	r3, [r7, #12]
 8000838:	461a      	mov	r2, r3
 800083a:	2105      	movs	r1, #5
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fd49 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PINF , Local_u8Bit[5]) ;
 8000842:	7b7b      	ldrb	r3, [r7, #13]
 8000844:	461a      	mov	r2, r3
 8000846:	2106      	movs	r1, #6
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fd43 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PING , Local_u8Bit[6]) ;
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	461a      	mov	r2, r3
 8000852:	2107      	movs	r1, #7
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fd3d 	bl	80002d4 <MGPIO_voidSetPinValue>
			break;
 800085a:	bf00      	nop
			MGPIO_voidSetPinValue(SEVSEG_PING , Local_u8Bit[6]) ;
			break;
		
		default : 			break;
	}
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000000 	.word	0x20000000

08000868 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8000870:	f001 fc0e 	bl	8002090 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f002 fced 	bl	8003254 <malloc>
 800087a:	4603      	mov	r3, r0
 800087c:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800087e:	f001 fc15 	bl	80020ac <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    if( pv )
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d006      	beq.n	80008a8 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800089a:	f001 fbf9 	bl	8002090 <vTaskSuspendAll>
        {
            free( pv );
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f002 fce0 	bl	8003264 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 80008a4:	f001 fc02 	bl	80020ac <xTaskResumeAll>
    }
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f103 0208 	add.w	r2, r3, #8
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f04f 32ff 	mov.w	r2, #4294967295
 80008c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f103 0208 	add.w	r2, r3, #8
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f103 0208 	add.w	r2, r3, #8
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000906:	b480      	push	{r7}
 8000908:	b085      	sub	sp, #20
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	601a      	str	r2, [r3, #0]
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000962:	d103      	bne.n	800096c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	e00c      	b.n	8000986 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3308      	adds	r3, #8
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e002      	b.n	800097a <vListInsert+0x2e>
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	429a      	cmp	r2, r3
 8000984:	d9f6      	bls.n	8000974 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	6892      	ldr	r2, [r2, #8]
 80009d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	6852      	ldr	r2, [r2, #4]
 80009dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d103      	bne.n	80009f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	1e5a      	subs	r2, r3, #1
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <main>:




int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af02      	add	r7, sp, #8

	system_init();
 8000a16:	f000 f821 	bl	8000a5c <system_init>

	BaseType_t task1_ret = pdFALSE ;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]

	sevseg = xSemaphoreCreateBinary();
 8000a1e:	2203      	movs	r2, #3
 8000a20:	2100      	movs	r1, #0
 8000a22:	2001      	movs	r0, #1
 8000a24:	f000 fac6 	bl	8000fb4 <xQueueGenericCreate>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <main+0x3c>)
 8000a2c:	601a      	str	r2, [r3, #0]
	{
		/* semaphore created successfully */
	}


	task1_ret = xTaskCreate(task1,"task1",configMINIMAL_STACK_SIZE,NULL,TASK1_PRIORITY,&task1_handle);
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <main+0x40>)
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	2303      	movs	r3, #3
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	2246      	movs	r2, #70	; 0x46
 8000a3a:	4906      	ldr	r1, [pc, #24]	; (8000a54 <main+0x44>)
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <main+0x48>)
 8000a3e:	f001 f99f 	bl	8001d80 <xTaskCreate>
 8000a42:	6078      	str	r0, [r7, #4]
	{
		/* task1 created successfully */
	}


	vTaskStartScheduler();
 8000a44:	f001 fad4 	bl	8001ff0 <vTaskStartScheduler>
	for(;;);
 8000a48:	e7fe      	b.n	8000a48 <main+0x38>
 8000a4a:	bf00      	nop
 8000a4c:	200000d8 	.word	0x200000d8
 8000a50:	200000d4 	.word	0x200000d4
 8000a54:	08003448 	.word	0x08003448
 8000a58:	08000ab5 	.word	0x08000ab5

08000a5c <system_init>:




void system_init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* Enable external crystal clock 8 mHZ */
	MRCC_voidInitSysClock();
 8000a60:	f7ff fe2e 	bl	80006c0 <MRCC_voidInitSysClock>
	/* Enable portA clock */
	MRCC_voidEnableClock(RCC_APB2 , IOPAEN);
 8000a64:	2102      	movs	r1, #2
 8000a66:	2002      	movs	r0, #2
 8000a68:	f7ff fe42 	bl	80006f0 <MRCC_voidEnableClock>
	/* Enable portB clock */
	//MRCC_voidEnableClock(RCC_APB2 , IOPBEN);
	MEXTI_voidInit();
 8000a6c:	f7ff fcf2 	bl	8000454 <MEXTI_voidInit>

	/* Set PINA9 as Output NMHZ Push pull */
	MGPIO_voidSetPullResistor(PORTA,PIN0,GPIO_PULL_UP);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2100      	movs	r1, #0
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff fc8b 	bl	8000390 <MGPIO_voidSetPullResistor>

	MEXTI_voidSetSignalLatch(EXTI_LINE0,EXTI_FALLING);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fd13 	bl	80004a8 <MEXTI_voidSetSignalLatch>
	MEXTI_voidSetCallBack(EXTI_LINE0,EXTI_callback);
 8000a82:	490a      	ldr	r1, [pc, #40]	; (8000aac <system_init+0x50>)
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fd57 	bl	8000538 <MEXTI_voidSetCallBack>
	 * very important note : we should set all priority bits as group priority
	 * and any interrupt priority uses FreeRTOS API must have lower priority than configMAX_SYSCALL_INTERRUPT_PRIORITY
	 * that means it must be more than it in value because zero is the highest priority
	 * for more information please visit this site : http://www.freertos.org/RTOS-Cortex-M3-M4.html
	 */
	MNVIC_voidSetPriority(EXTI0,8,0,NVIC_GROUP4_SUB0);
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <system_init+0x54>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2108      	movs	r1, #8
 8000a90:	2006      	movs	r0, #6
 8000a92:	f7ff fde1 	bl	8000658 <MNVIC_voidSetPriority>

	MEXTI_voidEnableEXTI(EXTI_LINE0);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff fcf0 	bl	800047c <MEXTI_voidEnableEXTI>

	MNVIC_voidEnableInterrupt(EXTI0);
 8000a9c:	2006      	movs	r0, #6
 8000a9e:	f7ff fdb7 	bl	8000610 <MNVIC_voidEnableInterrupt>
	/* initialize 7-segment */
	SEVSEG_voidInit();
 8000aa2:	f7ff fe61 	bl	8000768 <SEVSEG_voidInit>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	08000af9 	.word	0x08000af9
 8000ab0:	05fa0300 	.word	0x05fa0300

08000ab4 <task1>:



void task1(void *pvParameter)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	BaseType_t ret = pdFALSE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
	char num = 0 ;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		ret = xSemaphoreTake(sevseg,portMAX_DELAY);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <task1+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fe01 	bl	80016d4 <xQueueSemaphoreTake>
 8000ad2:	60b8      	str	r0, [r7, #8]
		if(ret == pdTRUE)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d1f4      	bne.n	8000ac4 <task1+0x10>
		{
			if(num ==10)
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d101      	bne.n	8000ae4 <task1+0x30>
			{
				num = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
			}
			SEVSEG_voidDisplay(num);
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fe66 	bl	80007b8 <SEVSEG_voidDisplay>

			/* software delay */
			//for(u64 i=0 ; i< 350000 ; i++);
			num++;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	3301      	adds	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
		ret = xSemaphoreTake(sevseg,portMAX_DELAY);
 8000af2:	e7e7      	b.n	8000ac4 <task1+0x10>
 8000af4:	200000d8 	.word	0x200000d8

08000af8 <EXTI_callback>:
	}
}


void EXTI_callback(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	BaseType_t ret = pdFALSE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
	ret = xSemaphoreGiveFromISR(sevseg,NULL);
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <EXTI_callback+0x20>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fc70 	bl	80013ee <xQueueGiveFromISR>
 8000b0e:	6078      	str	r0, [r7, #4]
	{
//		SEVSEG_voidDisplay(3);
//		for(u64 i=0 ; i< 350000 ; i++);
	}

}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200000d8 	.word	0x200000d8

08000b1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3b04      	subs	r3, #4
 8000b3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f023 0201 	bic.w	r2, r3, #1
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3b04      	subs	r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000b4c:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <pxPortInitialiseStack+0x54>)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3b14      	subs	r3, #20
 8000b56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3b20      	subs	r3, #32
 8000b62:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000b64:	68fb      	ldr	r3, [r7, #12]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	08000b75 	.word	0x08000b75

08000b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <prvTaskExitError+0x4c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b86:	d009      	beq.n	8000b9c <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b8c:	f383 8811 	msr	BASEPRI, r3
 8000b90:	f3bf 8f6f 	isb	sy
 8000b94:	f3bf 8f4f 	dsb	sy
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e7fe      	b.n	8000b9a <prvTaskExitError+0x26>
 8000b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba0:	f383 8811 	msr	BASEPRI, r3
 8000ba4:	f3bf 8f6f 	isb	sy
 8000ba8:	f3bf 8f4f 	dsb	sy
 8000bac:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000bae:	bf00      	nop
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0fc      	beq.n	8000bb0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	2000000c 	.word	0x2000000c
	...

08000bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <pxCurrentTCBConst2>)
 8000bd2:	6819      	ldr	r1, [r3, #0]
 8000bd4:	6808      	ldr	r0, [r1, #0]
 8000bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000bda:	f380 8809 	msr	PSP, r0
 8000bde:	f3bf 8f6f 	isb	sy
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	f380 8811 	msr	BASEPRI, r0
 8000bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8000bee:	4770      	bx	lr

08000bf0 <pxCurrentTCBConst2>:
 8000bf0:	200000e4 	.word	0x200000e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop

08000bf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <prvPortStartFirstTask+0x1c>)
 8000bfa:	6800      	ldr	r0, [r0, #0]
 8000bfc:	6800      	ldr	r0, [r0, #0]
 8000bfe:	f380 8808 	msr	MSP, r0
 8000c02:	b662      	cpsie	i
 8000c04:	b661      	cpsie	f
 8000c06:	f3bf 8f4f 	dsb	sy
 8000c0a:	f3bf 8f6f 	isb	sy
 8000c0e:	df00      	svc	0
 8000c10:	bf00      	nop
 8000c12:	0000      	.short	0x0000
 8000c14:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop

08000c1c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <xPortStartScheduler+0xcc>)
 8000c24:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	22ff      	movs	r2, #255	; 0xff
 8000c32:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <xPortStartScheduler+0xd0>)
 8000c48:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <xPortStartScheduler+0xd4>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c50:	e009      	b.n	8000c66 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <xPortStartScheduler+0xd4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	4a25      	ldr	r2, [pc, #148]	; (8000cf0 <xPortStartScheduler+0xd4>)
 8000c5a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	2b80      	cmp	r3, #128	; 0x80
 8000c70:	d0ef      	beq.n	8000c52 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <xPortStartScheduler+0xd4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d009      	beq.n	8000c92 <xPortStartScheduler+0x76>
 8000c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c82:	f383 8811 	msr	BASEPRI, r3
 8000c86:	f3bf 8f6f 	isb	sy
 8000c8a:	f3bf 8f4f 	dsb	sy
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	e7fe      	b.n	8000c90 <xPortStartScheduler+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <xPortStartScheduler+0xd4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <xPortStartScheduler+0xd4>)
 8000c9a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <xPortStartScheduler+0xd4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <xPortStartScheduler+0xd4>)
 8000ca6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000cb0:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <xPortStartScheduler+0xd8>)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <xPortStartScheduler+0xd8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <xPortStartScheduler+0xd8>)
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <xPortStartScheduler+0xd8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000cc6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000cc8:	f000 f8b6 	bl	8000e38 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <xPortStartScheduler+0xdc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000cd2:	f7ff ff91 	bl	8000bf8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000cd6:	f001 fb4b 	bl	8002370 <vTaskSwitchContext>
    prvTaskExitError();
 8000cda:	f7ff ff4b 	bl	8000b74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	e000e400 	.word	0xe000e400
 8000cec:	200000dc 	.word	0x200000dc
 8000cf0:	200000e0 	.word	0x200000e0
 8000cf4:	e000ed20 	.word	0xe000ed20
 8000cf8:	2000000c 	.word	0x2000000c

08000cfc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <vPortEnterCritical+0x54>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <vPortEnterCritical+0x54>)
 8000d1c:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <vPortEnterCritical+0x54>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d10e      	bne.n	8000d44 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <vPortEnterCritical+0x58>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d009      	beq.n	8000d44 <vPortEnterCritical+0x48>
 8000d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d34:	f383 8811 	msr	BASEPRI, r3
 8000d38:	f3bf 8f6f 	isb	sy
 8000d3c:	f3bf 8f4f 	dsb	sy
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	e7fe      	b.n	8000d42 <vPortEnterCritical+0x46>
    }
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000000c 	.word	0x2000000c
 8000d54:	e000ed04 	.word	0xe000ed04

08000d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <vPortExitCritical+0x48>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d109      	bne.n	8000d7a <vPortExitCritical+0x22>
 8000d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6a:	f383 8811 	msr	BASEPRI, r3
 8000d6e:	f3bf 8f6f 	isb	sy
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	e7fe      	b.n	8000d78 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <vPortExitCritical+0x48>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <vPortExitCritical+0x48>)
 8000d82:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <vPortExitCritical+0x48>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d104      	bne.n	8000d96 <vPortExitCritical+0x3e>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	2000000c 	.word	0x2000000c
	...

08000db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000db0:	f3ef 8009 	mrs	r0, PSP
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <pxCurrentTCBConst>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000dc0:	6010      	str	r0, [r2, #0]
 8000dc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000dc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000dca:	f380 8811 	msr	BASEPRI, r0
 8000dce:	f001 facf 	bl	8002370 <vTaskSwitchContext>
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	f380 8811 	msr	BASEPRI, r0
 8000dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	6808      	ldr	r0, [r1, #0]
 8000de2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000de6:	f380 8809 	msr	PSP, r0
 8000dea:	f3bf 8f6f 	isb	sy
 8000dee:	4770      	bx	lr

08000df0 <pxCurrentTCBConst>:
 8000df0:	200000e4 	.word	0x200000e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop

08000df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
        __asm volatile
 8000dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000e10:	f001 f9f6 	bl	8002200 <xTaskIncrementTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SysTick_Handler+0x3c>)
 8000e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	e000ed04 	.word	0xe000ed04

08000e38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <vPortSetupTimerInterrupt+0x28>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <vPortSetupTimerInterrupt+0x2c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <vPortSetupTimerInterrupt+0x30>)
 8000e4a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e4e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <vPortSetupTimerInterrupt+0x28>)
 8000e52:	2207      	movs	r2, #7
 8000e54:	601a      	str	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010
 8000e64:	e000e018 	.word	0xe000e018
 8000e68:	e000e014 	.word	0xe000e014

08000e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000e72:	f3ef 8305 	mrs	r3, IPSR
 8000e76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	d913      	bls.n	8000ea6 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <vPortValidateInterruptPriority+0x68>)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <vPortValidateInterruptPriority+0x6c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	7afa      	ldrb	r2, [r7, #11]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d209      	bcs.n	8000ea6 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e96:	f383 8811 	msr	BASEPRI, r3
 8000e9a:	f3bf 8f6f 	isb	sy
 8000e9e:	f3bf 8f4f 	dsb	sy
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	e7fe      	b.n	8000ea4 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <vPortValidateInterruptPriority+0x70>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <vPortValidateInterruptPriority+0x74>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d909      	bls.n	8000eca <vPortValidateInterruptPriority+0x5e>
 8000eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eba:	f383 8811 	msr	BASEPRI, r3
 8000ebe:	f3bf 8f6f 	isb	sy
 8000ec2:	f3bf 8f4f 	dsb	sy
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	e7fe      	b.n	8000ec8 <vPortValidateInterruptPriority+0x5c>
    }
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e3f0 	.word	0xe000e3f0
 8000ed8:	200000dc 	.word	0x200000dc
 8000edc:	e000ed0c 	.word	0xe000ed0c
 8000ee0:	200000e0 	.word	0x200000e0

08000ee4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d109      	bne.n	8000f0c <xQueueGenericReset+0x28>
 8000ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efc:	f383 8811 	msr	BASEPRI, r3
 8000f00:	f3bf 8f6f 	isb	sy
 8000f04:	f3bf 8f4f 	dsb	sy
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	e7fe      	b.n	8000f0a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8000f0c:	f7ff fef6 	bl	8000cfc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f18:	68f9      	ldr	r1, [r7, #12]
 8000f1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f1c:	fb01 f303 	mul.w	r3, r1, r3
 8000f20:	441a      	add	r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	68f9      	ldr	r1, [r7, #12]
 8000f40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f42:	fb01 f303 	mul.w	r3, r1, r3
 8000f46:	441a      	add	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	22ff      	movs	r2, #255	; 0xff
 8000f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	22ff      	movs	r2, #255	; 0xff
 8000f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d114      	bne.n	8000f8c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d01a      	beq.n	8000fa0 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3310      	adds	r3, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 faa6 	bl	80024c0 <xTaskRemoveFromEventList>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d012      	beq.n	8000fa0 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <xQueueGenericReset+0xcc>)
 8000f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	f3bf 8f4f 	dsb	sy
 8000f86:	f3bf 8f6f 	isb	sy
 8000f8a:	e009      	b.n	8000fa0 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3310      	adds	r3, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fc8d 	bl	80008b0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3324      	adds	r3, #36	; 0x24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fc88 	bl	80008b0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000fa0:	f7ff feda 	bl	8000d58 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000ed04 	.word	0xe000ed04

08000fb4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <xQueueGenericCreate+0x28>
 8000fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fcc:	f383 8811 	msr	BASEPRI, r3
 8000fd0:	f3bf 8f6f 	isb	sy
 8000fd4:	f3bf 8f4f 	dsb	sy
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	e7fe      	b.n	8000fda <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <xQueueGenericCreate+0x46>
 8000fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d101      	bne.n	8000ffe <xQueueGenericCreate+0x4a>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <xQueueGenericCreate+0x4c>
 8000ffe:	2300      	movs	r3, #0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <xQueueGenericCreate+0x64>
 8001004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001008:	f383 8811 	msr	BASEPRI, r3
 800100c:	f3bf 8f6f 	isb	sy
 8001010:	f3bf 8f4f 	dsb	sy
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e7fe      	b.n	8001016 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	429a      	cmp	r2, r3
 8001022:	d809      	bhi.n	8001038 <xQueueGenericCreate+0x84>
 8001024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001028:	f383 8811 	msr	BASEPRI, r3
 800102c:	f3bf 8f6f 	isb	sy
 8001030:	f3bf 8f4f 	dsb	sy
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	e7fe      	b.n	8001036 <xQueueGenericCreate+0x82>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	3348      	adds	r3, #72	; 0x48
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fc13 	bl	8000868 <pvPortMalloc>
 8001042:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00d      	beq.n	8001066 <xQueueGenericCreate+0xb2>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3348      	adds	r3, #72	; 0x48
 8001052:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4613      	mov	r3, r2
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	68b9      	ldr	r1, [r7, #8]
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f805 	bl	8001070 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001066:	6a3b      	ldr	r3, [r7, #32]
    }
 8001068:	4618      	mov	r0, r3
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e002      	b.n	8001092 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800109e:	2101      	movs	r1, #1
 80010a0:	69b8      	ldr	r0, [r7, #24]
 80010a2:	f7ff ff1f 	bl	8000ee4 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80010c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d109      	bne.n	80010e0 <xQueueGenericSend+0x30>
 80010cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d0:	f383 8811 	msr	BASEPRI, r3
 80010d4:	f3bf 8f6f 	isb	sy
 80010d8:	f3bf 8f4f 	dsb	sy
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80010de:	e7fe      	b.n	80010de <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <xQueueGenericSend+0x3e>
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <xQueueGenericSend+0x42>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <xQueueGenericSend+0x44>
 80010f2:	2300      	movs	r3, #0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <xQueueGenericSend+0x5c>
 80010f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010fc:	f383 8811 	msr	BASEPRI, r3
 8001100:	f3bf 8f6f 	isb	sy
 8001104:	f3bf 8f4f 	dsb	sy
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	e7fe      	b.n	800110a <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d103      	bne.n	800111a <xQueueGenericSend+0x6a>
 8001112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <xQueueGenericSend+0x6e>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <xQueueGenericSend+0x70>
 800111e:	2300      	movs	r3, #0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d109      	bne.n	8001138 <xQueueGenericSend+0x88>
 8001124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001128:	f383 8811 	msr	BASEPRI, r3
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	623b      	str	r3, [r7, #32]
 8001136:	e7fe      	b.n	8001136 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001138:	f001 fb58 	bl	80027ec <xTaskGetSchedulerState>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <xQueueGenericSend+0x98>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <xQueueGenericSend+0x9c>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <xQueueGenericSend+0x9e>
 800114c:	2300      	movs	r3, #0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <xQueueGenericSend+0xb6>
 8001152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001156:	f383 8811 	msr	BASEPRI, r3
 800115a:	f3bf 8f6f 	isb	sy
 800115e:	f3bf 8f4f 	dsb	sy
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	e7fe      	b.n	8001164 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001166:	f7ff fdc9 	bl	8000cfc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800116a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001172:	429a      	cmp	r2, r3
 8001174:	d302      	bcc.n	800117c <xQueueGenericSend+0xcc>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d129      	bne.n	80011d0 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001182:	f000 fbc6 	bl	8001912 <prvCopyDataToQueue>
 8001186:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	2b00      	cmp	r3, #0
 800118e:	d010      	beq.n	80011b2 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	3324      	adds	r3, #36	; 0x24
 8001194:	4618      	mov	r0, r3
 8001196:	f001 f993 	bl	80024c0 <xTaskRemoveFromEventList>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80011a0:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <xQueueGenericSend+0x1f0>)
 80011a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	f3bf 8f4f 	dsb	sy
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	e00a      	b.n	80011c8 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80011b8:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <xQueueGenericSend+0x1f0>)
 80011ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80011c8:	f7ff fdc6 	bl	8000d58 <vPortExitCritical>
                return pdPASS;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e063      	b.n	8001298 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80011d6:	f7ff fdbf 	bl	8000d58 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	e05c      	b.n	8001298 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d106      	bne.n	80011f2 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 f9cb 	bl	8002584 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80011f2:	f7ff fdb1 	bl	8000d58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80011f6:	f000 ff4b 	bl	8002090 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80011fa:	f7ff fd7f 	bl	8000cfc <vPortEnterCritical>
 80011fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001204:	b25b      	sxtb	r3, r3
 8001206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120a:	d103      	bne.n	8001214 <xQueueGenericSend+0x164>
 800120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800121a:	b25b      	sxtb	r3, r3
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d103      	bne.n	800122a <xQueueGenericSend+0x17a>
 8001222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800122a:	f7ff fd95 	bl	8000d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800122e:	1d3a      	adds	r2, r7, #4
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f001 f9ba 	bl	80025b0 <xTaskCheckForTimeOut>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d124      	bne.n	800128c <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001244:	f000 fc5d 	bl	8001b02 <prvIsQueueFull>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d018      	beq.n	8001280 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001250:	3310      	adds	r3, #16
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f001 f8e4 	bl	8002424 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800125c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800125e:	f000 fbe8 	bl	8001a32 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001262:	f000 ff23 	bl	80020ac <xTaskResumeAll>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	f47f af7c 	bne.w	8001166 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <xQueueGenericSend+0x1f0>)
 8001270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	f3bf 8f4f 	dsb	sy
 800127a:	f3bf 8f6f 	isb	sy
 800127e:	e772      	b.n	8001166 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001282:	f000 fbd6 	bl	8001a32 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001286:	f000 ff11 	bl	80020ac <xTaskResumeAll>
 800128a:	e76c      	b.n	8001166 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800128c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800128e:	f000 fbd0 	bl	8001a32 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001292:	f000 ff0b 	bl	80020ac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001296:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001298:	4618      	mov	r0, r3
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	e000ed04 	.word	0xe000ed04

080012a4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80012b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <xQueueGenericSendFromISR+0x2c>
 80012bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c0:	f383 8811 	msr	BASEPRI, r3
 80012c4:	f3bf 8f6f 	isb	sy
 80012c8:	f3bf 8f4f 	dsb	sy
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ce:	e7fe      	b.n	80012ce <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <xQueueGenericSendFromISR+0x3a>
 80012d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <xQueueGenericSendFromISR+0x3e>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <xQueueGenericSendFromISR+0x40>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d109      	bne.n	80012fc <xQueueGenericSendFromISR+0x58>
 80012e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ec:	f383 8811 	msr	BASEPRI, r3
 80012f0:	f3bf 8f6f 	isb	sy
 80012f4:	f3bf 8f4f 	dsb	sy
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
 80012fa:	e7fe      	b.n	80012fa <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d103      	bne.n	800130a <xQueueGenericSendFromISR+0x66>
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <xQueueGenericSendFromISR+0x6a>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <xQueueGenericSendFromISR+0x6c>
 800130e:	2300      	movs	r3, #0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <xQueueGenericSendFromISR+0x84>
 8001314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001318:	f383 8811 	msr	BASEPRI, r3
 800131c:	f3bf 8f6f 	isb	sy
 8001320:	f3bf 8f4f 	dsb	sy
 8001324:	623b      	str	r3, [r7, #32]
 8001326:	e7fe      	b.n	8001326 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001328:	f7ff fda0 	bl	8000e6c <vPortValidateInterruptPriority>
        __asm volatile
 800132c:	f3ef 8211 	mrs	r2, BASEPRI
 8001330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001334:	f383 8811 	msr	BASEPRI, r3
 8001338:	f3bf 8f6f 	isb	sy
 800133c:	f3bf 8f4f 	dsb	sy
 8001340:	61fa      	str	r2, [r7, #28]
 8001342:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8001344:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800134e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001350:	429a      	cmp	r2, r3
 8001352:	d302      	bcc.n	800135a <xQueueGenericSendFromISR+0xb6>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b02      	cmp	r3, #2
 8001358:	d13d      	bne.n	80013d6 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001370:	f000 facf 	bl	8001912 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001374:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d112      	bne.n	80013a4 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	2b00      	cmp	r3, #0
 8001384:	d024      	beq.n	80013d0 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001388:	3324      	adds	r3, #36	; 0x24
 800138a:	4618      	mov	r0, r3
 800138c:	f001 f898 	bl	80024c0 <xTaskRemoveFromEventList>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d01c      	beq.n	80013d0 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d019      	beq.n	80013d0 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e015      	b.n	80013d0 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80013a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80013a8:	2b7f      	cmp	r3, #127	; 0x7f
 80013aa:	d109      	bne.n	80013c0 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 80013ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b0:	f383 8811 	msr	BASEPRI, r3
 80013b4:	f3bf 8f6f 	isb	sy
 80013b8:	f3bf 8f4f 	dsb	sy
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e7fe      	b.n	80013be <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80013c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	b25a      	sxtb	r2, r3
 80013ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80013d0:	2301      	movs	r3, #1
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80013d4:	e001      	b.n	80013da <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	613b      	str	r3, [r7, #16]
        __asm volatile
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80013e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3740      	adds	r7, #64	; 0x40
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b08e      	sub	sp, #56	; 0x38
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80013fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <xQueueGiveFromISR+0x28>
        __asm volatile
 8001402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001406:	f383 8811 	msr	BASEPRI, r3
 800140a:	f3bf 8f6f 	isb	sy
 800140e:	f3bf 8f4f 	dsb	sy
 8001412:	623b      	str	r3, [r7, #32]
 8001414:	e7fe      	b.n	8001414 <xQueueGiveFromISR+0x26>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <xQueueGiveFromISR+0x44>
 800141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001422:	f383 8811 	msr	BASEPRI, r3
 8001426:	f3bf 8f6f 	isb	sy
 800142a:	f3bf 8f4f 	dsb	sy
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	e7fe      	b.n	8001430 <xQueueGiveFromISR+0x42>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <xQueueGiveFromISR+0x54>
 800143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <xQueueGiveFromISR+0x58>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <xQueueGiveFromISR+0x5a>
 8001446:	2300      	movs	r3, #0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d109      	bne.n	8001460 <xQueueGiveFromISR+0x72>
 800144c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001450:	f383 8811 	msr	BASEPRI, r3
 8001454:	f3bf 8f6f 	isb	sy
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	e7fe      	b.n	800145e <xQueueGiveFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001460:	f7ff fd04 	bl	8000e6c <vPortValidateInterruptPriority>
        __asm volatile
 8001464:	f3ef 8211 	mrs	r2, BASEPRI
 8001468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146c:	f383 8811 	msr	BASEPRI, r3
 8001470:	f3bf 8f6f 	isb	sy
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	617a      	str	r2, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 800147c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	429a      	cmp	r2, r3
 800148e:	d939      	bls.n	8001504 <xQueueGiveFromISR+0x116>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80014a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014aa:	d112      	bne.n	80014d2 <xQueueGiveFromISR+0xe4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d024      	beq.n	80014fe <xQueueGiveFromISR+0x110>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b6:	3324      	adds	r3, #36	; 0x24
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 f801 	bl	80024c0 <xTaskRemoveFromEventList>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01c      	beq.n	80014fe <xQueueGiveFromISR+0x110>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d019      	beq.n	80014fe <xQueueGiveFromISR+0x110>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e015      	b.n	80014fe <xQueueGiveFromISR+0x110>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80014d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014d6:	2b7f      	cmp	r3, #127	; 0x7f
 80014d8:	d109      	bne.n	80014ee <xQueueGiveFromISR+0x100>
        __asm volatile
 80014da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014de:	f383 8811 	msr	BASEPRI, r3
 80014e2:	f3bf 8f6f 	isb	sy
 80014e6:	f3bf 8f4f 	dsb	sy
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e7fe      	b.n	80014ec <xQueueGiveFromISR+0xfe>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80014ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	b25a      	sxtb	r2, r3
 80014f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80014fe:	2301      	movs	r3, #1
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
 8001502:	e001      	b.n	8001508 <xQueueGiveFromISR+0x11a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001514:	4618      	mov	r0, r3
 8001516:	3738      	adds	r7, #56	; 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <xQueueReceive+0x2e>
        __asm volatile
 8001536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153a:	f383 8811 	msr	BASEPRI, r3
 800153e:	f3bf 8f6f 	isb	sy
 8001542:	f3bf 8f4f 	dsb	sy
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	e7fe      	b.n	8001548 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <xQueueReceive+0x3c>
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <xQueueReceive+0x40>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <xQueueReceive+0x42>
 800155c:	2300      	movs	r3, #0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <xQueueReceive+0x5a>
 8001562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001566:	f383 8811 	msr	BASEPRI, r3
 800156a:	f3bf 8f6f 	isb	sy
 800156e:	f3bf 8f4f 	dsb	sy
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	e7fe      	b.n	8001574 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001576:	f001 f939 	bl	80027ec <xTaskGetSchedulerState>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <xQueueReceive+0x6a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <xQueueReceive+0x6e>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <xQueueReceive+0x70>
 800158a:	2300      	movs	r3, #0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d109      	bne.n	80015a4 <xQueueReceive+0x88>
 8001590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001594:	f383 8811 	msr	BASEPRI, r3
 8001598:	f3bf 8f6f 	isb	sy
 800159c:	f3bf 8f4f 	dsb	sy
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	e7fe      	b.n	80015a2 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015a4:	f7ff fbaa 	bl	8000cfc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01f      	beq.n	80015f4 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015b8:	f000 fa15 	bl	80019e6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	1e5a      	subs	r2, r3, #1
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00f      	beq.n	80015ec <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	3310      	adds	r3, #16
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 ff75 	bl	80024c0 <xTaskRemoveFromEventList>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <xQueueReceive+0x1b4>)
 80015de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f3bf 8f4f 	dsb	sy
 80015e8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80015ec:	f7ff fbb4 	bl	8000d58 <vPortExitCritical>
                return pdPASS;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e069      	b.n	80016c8 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d103      	bne.n	8001602 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80015fa:	f7ff fbad 	bl	8000d58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80015fe:	2300      	movs	r3, #0
 8001600:	e062      	b.n	80016c8 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d106      	bne.n	8001616 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4618      	mov	r0, r3
 800160e:	f000 ffb9 	bl	8002584 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001612:	2301      	movs	r3, #1
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001616:	f7ff fb9f 	bl	8000d58 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800161a:	f000 fd39 	bl	8002090 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800161e:	f7ff fb6d 	bl	8000cfc <vPortEnterCritical>
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001628:	b25b      	sxtb	r3, r3
 800162a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162e:	d103      	bne.n	8001638 <xQueueReceive+0x11c>
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800163e:	b25b      	sxtb	r3, r3
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d103      	bne.n	800164e <xQueueReceive+0x132>
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800164e:	f7ff fb83 	bl	8000d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001652:	1d3a      	adds	r2, r7, #4
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f000 ffa8 	bl	80025b0 <xTaskCheckForTimeOut>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d123      	bne.n	80016ae <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001668:	f000 fa35 	bl	8001ad6 <prvIsQueueEmpty>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d017      	beq.n	80016a2 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	3324      	adds	r3, #36	; 0x24
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fed2 	bl	8002424 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001682:	f000 f9d6 	bl	8001a32 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001686:	f000 fd11 	bl	80020ac <xTaskResumeAll>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d189      	bne.n	80015a4 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <xQueueReceive+0x1b4>)
 8001692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f3bf 8f4f 	dsb	sy
 800169c:	f3bf 8f6f 	isb	sy
 80016a0:	e780      	b.n	80015a4 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80016a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016a4:	f000 f9c5 	bl	8001a32 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80016a8:	f000 fd00 	bl	80020ac <xTaskResumeAll>
 80016ac:	e77a      	b.n	80015a4 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80016ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016b0:	f000 f9bf 	bl	8001a32 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80016b4:	f000 fcfa 	bl	80020ac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016ba:	f000 fa0c 	bl	8001ad6 <prvIsQueueEmpty>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f43f af6f 	beq.w	80015a4 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80016c6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3730      	adds	r7, #48	; 0x30
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	e000ed04 	.word	0xe000ed04

080016d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80016de:	2300      	movs	r3, #0
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <xQueueSemaphoreTake+0x30>
 80016f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f4:	f383 8811 	msr	BASEPRI, r3
 80016f8:	f3bf 8f6f 	isb	sy
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	623b      	str	r3, [r7, #32]
 8001702:	e7fe      	b.n	8001702 <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d009      	beq.n	8001720 <xQueueSemaphoreTake+0x4c>
 800170c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001710:	f383 8811 	msr	BASEPRI, r3
 8001714:	f3bf 8f6f 	isb	sy
 8001718:	f3bf 8f4f 	dsb	sy
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	e7fe      	b.n	800171e <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001720:	f001 f864 	bl	80027ec <xTaskGetSchedulerState>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <xQueueSemaphoreTake+0x5c>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <xQueueSemaphoreTake+0x60>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <xQueueSemaphoreTake+0x62>
 8001734:	2300      	movs	r3, #0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <xQueueSemaphoreTake+0x7a>
 800173a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173e:	f383 8811 	msr	BASEPRI, r3
 8001742:	f3bf 8f6f 	isb	sy
 8001746:	f3bf 8f4f 	dsb	sy
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	e7fe      	b.n	800174c <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800174e:	f7ff fad5 	bl	8000cfc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	d024      	beq.n	80017a8 <xQueueSemaphoreTake+0xd4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001764:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d104      	bne.n	8001778 <xQueueSemaphoreTake+0xa4>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800176e:	f001 f9d5 	bl	8002b1c <pvTaskIncrementMutexHeldCount>
 8001772:	4602      	mov	r2, r0
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00f      	beq.n	80017a0 <xQueueSemaphoreTake+0xcc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	3310      	adds	r3, #16
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fe9b 	bl	80024c0 <xTaskRemoveFromEventList>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <xQueueSemaphoreTake+0xcc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <xQueueSemaphoreTake+0x20c>)
 8001792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f3bf 8f4f 	dsb	sy
 800179c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80017a0:	f7ff fada 	bl	8000d58 <vPortExitCritical>
                return pdPASS;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e096      	b.n	80018d6 <xQueueSemaphoreTake+0x202>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d110      	bne.n	80017d0 <xQueueSemaphoreTake+0xfc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80017ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <xQueueSemaphoreTake+0xf4>
 80017b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b8:	f383 8811 	msr	BASEPRI, r3
 80017bc:	f3bf 8f6f 	isb	sy
 80017c0:	f3bf 8f4f 	dsb	sy
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e7fe      	b.n	80017c6 <xQueueSemaphoreTake+0xf2>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80017c8:	f7ff fac6 	bl	8000d58 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e082      	b.n	80018d6 <xQueueSemaphoreTake+0x202>
                }
                else if( xEntryTimeSet == pdFALSE )
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <xQueueSemaphoreTake+0x110>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fed2 	bl	8002584 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80017e4:	f7ff fab8 	bl	8000d58 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80017e8:	f000 fc52 	bl	8002090 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80017ec:	f7ff fa86 	bl	8000cfc <vPortEnterCritical>
 80017f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d103      	bne.n	8001806 <xQueueSemaphoreTake+0x132>
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800180c:	b25b      	sxtb	r3, r3
 800180e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001812:	d103      	bne.n	800181c <xQueueSemaphoreTake+0x148>
 8001814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800181c:	f7ff fa9c 	bl	8000d58 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001820:	463a      	mov	r2, r7
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fec1 	bl	80025b0 <xTaskCheckForTimeOut>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d132      	bne.n	800189a <xQueueSemaphoreTake+0x1c6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001836:	f000 f94e 	bl	8001ad6 <prvIsQueueEmpty>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d026      	beq.n	800188e <xQueueSemaphoreTake+0x1ba>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <xQueueSemaphoreTake+0x188>
                        {
                            taskENTER_CRITICAL();
 8001848:	f7ff fa58 	bl	8000cfc <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 ffe9 	bl	8002828 <xTaskPriorityInherit>
 8001856:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8001858:	f7ff fa7e 	bl	8000d58 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	3324      	adds	r3, #36	; 0x24
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fddd 	bl	8002424 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800186a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800186c:	f000 f8e1 	bl	8001a32 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001870:	f000 fc1c 	bl	80020ac <xTaskResumeAll>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f af69 	bne.w	800174e <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <xQueueSemaphoreTake+0x20c>)
 800187e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	e75f      	b.n	800174e <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800188e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001890:	f000 f8cf 	bl	8001a32 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001894:	f000 fc0a 	bl	80020ac <xTaskResumeAll>
 8001898:	e759      	b.n	800174e <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800189a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800189c:	f000 f8c9 	bl	8001a32 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80018a0:	f000 fc04 	bl	80020ac <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018a6:	f000 f916 	bl	8001ad6 <prvIsQueueEmpty>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f43f af4e 	beq.w	800174e <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00d      	beq.n	80018d4 <xQueueSemaphoreTake+0x200>
                        {
                            taskENTER_CRITICAL();
 80018b8:	f7ff fa20 	bl	8000cfc <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80018bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018be:	f000 f811 	bl	80018e4 <prvGetDisinheritPriorityAfterTimeout>
 80018c2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 f89a 	bl	8002a04 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80018d0:	f7ff fa42 	bl	8000d58 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80018d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3738      	adds	r7, #56	; 0x38
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000ed04 	.word	0xe000ed04

080018e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f1c3 030a 	rsb	r3, r3, #10
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e001      	b.n	8001906 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001906:	68fb      	ldr	r3, [r7, #12]
    }
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d14d      	bne.n	80019d4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 ffe9 	bl	8002914 <xTaskPriorityDisinherit>
 8001942:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	e043      	b.n	80019d4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d119      	bne.n	8001986 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6858      	ldr	r0, [r3, #4]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	461a      	mov	r2, r3
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	f001 fc89 	bl	8003274 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	441a      	add	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d32b      	bcc.n	80019d4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	e026      	b.n	80019d4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	68d8      	ldr	r0, [r3, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	461a      	mov	r2, r3
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	f001 fc6f 	bl	8003274 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	425b      	negs	r3, r3
 80019a0:	441a      	add	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d207      	bcs.n	80019c2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	425b      	negs	r3, r3
 80019bc:	441a      	add	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d105      	bne.n	80019d4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80019dc:	697b      	ldr	r3, [r7, #20]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d018      	beq.n	8001a2a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	441a      	add	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d303      	bcc.n	8001a1a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	461a      	mov	r2, r3
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f001 fc25 	bl	8003274 <memcpy>
    }
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001a3a:	f7ff f95f 	bl	8000cfc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a44:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a46:	e011      	b.n	8001a6c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d012      	beq.n	8001a76 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3324      	adds	r3, #36	; 0x24
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fd33 	bl	80024c0 <xTaskRemoveFromEventList>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001a60:	f000 fe0a 	bl	8002678 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	dce9      	bgt.n	8001a48 <prvUnlockQueue+0x16>
 8001a74:	e000      	b.n	8001a78 <prvUnlockQueue+0x46>
                        break;
 8001a76:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	22ff      	movs	r2, #255	; 0xff
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001a80:	f7ff f96a 	bl	8000d58 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001a84:	f7ff f93a 	bl	8000cfc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a8e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a90:	e011      	b.n	8001ab6 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d012      	beq.n	8001ac0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3310      	adds	r3, #16
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fd0e 	bl	80024c0 <xTaskRemoveFromEventList>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001aaa:	f000 fde5 	bl	8002678 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	dce9      	bgt.n	8001a92 <prvUnlockQueue+0x60>
 8001abe:	e000      	b.n	8001ac2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001ac0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001aca:	f7ff f945 	bl	8000d58 <vPortExitCritical>
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001ade:	f7ff f90d 	bl	8000cfc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e001      	b.n	8001af4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001af4:	f7ff f930 	bl	8000d58 <vPortExitCritical>

    return xReturn;
 8001af8:	68fb      	ldr	r3, [r7, #12]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001b0a:	f7ff f8f7 	bl	8000cfc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d102      	bne.n	8001b20 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e001      	b.n	8001b24 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001b24:	f7ff f918 	bl	8000d58 <vPortExitCritical>

    return xReturn;
 8001b28:	68fb      	ldr	r3, [r7, #12]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001b42:	f7ff f8db 	bl	8000cfc <vPortEnterCritical>
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b52:	d103      	bne.n	8001b5c <vQueueWaitForMessageRestricted+0x2a>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d103      	bne.n	8001b72 <vQueueWaitForMessageRestricted+0x40>
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b72:	f7ff f8f1 	bl	8000d58 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3324      	adds	r3, #36	; 0x24
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fc70 	bl	800246c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001b8c:	6978      	ldr	r0, [r7, #20]
 8001b8e:	f7ff ff50 	bl	8001a32 <prvUnlockQueue>
    }
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ba0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ba2:	e003      	b.n	8001bac <LoopCopyDataInit>

08001ba4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001ba6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ba8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001baa:	3104      	adds	r1, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001bb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bb4:	d3f6      	bcc.n	8001ba4 <CopyDataInit>
	ldr	r2, =_sbss
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001bb8:	e002      	b.n	8001bc0 <LoopFillZerobss>

08001bba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bbc:	f842 3b04 	str.w	r3, [r2], #4

08001bc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001bc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bc4:	d3f9      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc6:	f000 f821 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f001 fb1f 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7fe ff1f 	bl	8000a10 <main>
	bx	lr
 8001bd2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bd4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001bd8:	08003468 	.word	0x08003468
	ldr	r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001be0:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001be4:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001be8:	20000298 	.word	0x20000298

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>

08001bee <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <MemManage_Handler+0x4>

08001bf4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <BusFault_Handler+0x4>

08001bfa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <UsageFault_Handler+0x4>

08001c00 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c10:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <SystemInit+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <SystemInit+0x5c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001c1c:	4912      	ldr	r1, [pc, #72]	; (8001c68 <SystemInit+0x5c>)
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <SystemInit+0x5c>)
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <SystemInit+0x60>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c28:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <SystemInit+0x5c>)
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <SystemInit+0x5c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c38:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <SystemInit+0x5c>)
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <SystemInit+0x5c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <SystemInit+0x5c>)
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <SystemInit+0x5c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c4e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SystemInit+0x5c>)
 8001c52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c56:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001c58:	f000 f80c 	bl	8001c74 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SystemInit+0x64>)
 8001c5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c62:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	f8ff0000 	.word	0xf8ff0000
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001c78:	f000 f802 	bl	8001c80 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001c8e:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d103      	bne.n	8001cb8 <SetSysClockTo72+0x38>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cb6:	d1f0      	bne.n	8001c9a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	e001      	b.n	8001cce <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d14b      	bne.n	8001d6c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001cd4:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <SetSysClockTo72+0xfc>)
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <SetSysClockTo72+0xfc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f043 0310 	orr.w	r3, r3, #16
 8001cde:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001ce0:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <SetSysClockTo72+0xfc>)
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <SetSysClockTo72+0xfc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001cec:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <SetSysClockTo72+0xfc>)
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <SetSysClockTo72+0xfc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001d00:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001d08:	4a1b      	ldr	r2, [pc, #108]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d12:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001d14:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001d1e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001d2a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d38:	bf00      	nop
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f9      	beq.n	8001d3a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 0303 	bic.w	r3, r3, #3
 8001d50:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001d5e:	bf00      	nop
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <SetSysClockTo72+0xf8>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d1f9      	bne.n	8001d60 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40022000 	.word	0x40022000

08001d80 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fd67 	bl	8000868 <pvPortMalloc>
 8001d9a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00e      	beq.n	8001dc0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001da2:	2050      	movs	r0, #80	; 0x50
 8001da4:	f7fe fd60 	bl	8000868 <pvPortMalloc>
 8001da8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
 8001db6:	e005      	b.n	8001dc4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f7fe fd67 	bl	800088c <vPortFree>
 8001dbe:	e001      	b.n	8001dc4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d013      	beq.n	8001df2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9303      	str	r3, [sp, #12]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f80e 	bl	8001e02 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001de6:	69f8      	ldr	r0, [r7, #28]
 8001de8:	f000 f898 	bl	8001f1c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	e002      	b.n	8001df8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001df8:	69bb      	ldr	r3, [r7, #24]
    }
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b088      	sub	sp, #32
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f023 0307 	bic.w	r3, r3, #7
 8001e28:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <prvInitialiseNewTask+0x46>
 8001e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e38:	f383 8811 	msr	BASEPRI, r3
 8001e3c:	f3bf 8f6f 	isb	sy
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e7fe      	b.n	8001e46 <prvInitialiseNewTask+0x44>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01f      	beq.n	8001e8e <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e012      	b.n	8001e7a <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	7819      	ldrb	r1, [r3, #0]
 8001e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	4413      	add	r3, r2
 8001e62:	3334      	adds	r3, #52	; 0x34
 8001e64:	460a      	mov	r2, r1
 8001e66:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d9e9      	bls.n	8001e54 <prvInitialiseNewTask+0x52>
 8001e80:	e000      	b.n	8001e84 <prvInitialiseNewTask+0x82>
            {
                break;
 8001e82:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001e8c:	e003      	b.n	8001e96 <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	d901      	bls.n	8001ea0 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e9c:	2309      	movs	r3, #9
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
            pxNewTCB->uxMutexesHeld = 0;
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fd19 	bl	80008ee <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	3318      	adds	r3, #24
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fd14 	bl	80008ee <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eca:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	f1c3 020a 	rsb	r2, r3, #10
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	3348      	adds	r3, #72	; 0x48
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 f9d0 	bl	800328a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eec:	334c      	adds	r3, #76	; 0x4c
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 f9c9 	bl	800328a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	69b8      	ldr	r0, [r7, #24]
 8001efe:	f7fe fe0d 	bl	8000b1c <pxPortInitialiseStack>
 8001f02:	4602      	mov	r2, r0
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <prvInitialiseNewTask+0x112>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f12:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001f24:	f7fe feea 	bl	8000cfc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <prvAddNewTaskToReadyList+0xb8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <prvAddNewTaskToReadyList+0xb8>)
 8001f30:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <prvAddNewTaskToReadyList+0xb8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d110      	bne.n	8001f6a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001f48:	f000 fbba 	bl	80026c0 <prvInitialiseTaskLists>
 8001f4c:	e00d      	b.n	8001f6a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <prvAddNewTaskToReadyList+0xc0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f56:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d802      	bhi.n	8001f6a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <prvAddNewTaskToReadyList+0xc4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <prvAddNewTaskToReadyList+0xc4>)
 8001f72:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	2201      	movs	r2, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <prvAddNewTaskToReadyList+0xc8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <prvAddNewTaskToReadyList+0xc8>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <prvAddNewTaskToReadyList+0xcc>)
 8001f94:	441a      	add	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7fe fcb2 	bl	8000906 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001fa2:	f7fe fed9 	bl	8000d58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <prvAddNewTaskToReadyList+0xc0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00e      	beq.n	8001fcc <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <prvAddNewTaskToReadyList+0xd0>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000220 	.word	0x20000220
 8001fd8:	200000e4 	.word	0x200000e4
 8001fdc:	2000022c 	.word	0x2000022c
 8001fe0:	2000023c 	.word	0x2000023c
 8001fe4:	20000228 	.word	0x20000228
 8001fe8:	200000e8 	.word	0x200000e8
 8001fec:	e000ed04 	.word	0xe000ed04

08001ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <vTaskStartScheduler+0x84>)
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	2246      	movs	r2, #70	; 0x46
 8002002:	491d      	ldr	r1, [pc, #116]	; (8002078 <vTaskStartScheduler+0x88>)
 8002004:	481d      	ldr	r0, [pc, #116]	; (800207c <vTaskStartScheduler+0x8c>)
 8002006:	f7ff febb 	bl	8001d80 <xTaskCreate>
 800200a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002012:	f000 fdfd 	bl	8002c10 <xTimerCreateTimerTask>
 8002016:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d115      	bne.n	800204a <vTaskStartScheduler+0x5a>
 800201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <vTaskStartScheduler+0x90>)
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <vTaskStartScheduler+0x94>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <vTaskStartScheduler+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002044:	f7fe fdea 	bl	8000c1c <xPortStartScheduler>
 8002048:	e00d      	b.n	8002066 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d109      	bne.n	8002066 <vTaskStartScheduler+0x76>
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	e7fe      	b.n	8002064 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <vTaskStartScheduler+0x9c>)
 8002068:	681b      	ldr	r3, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000244 	.word	0x20000244
 8002078:	08003450 	.word	0x08003450
 800207c:	08002691 	.word	0x08002691
 8002080:	20000240 	.word	0x20000240
 8002084:	2000022c 	.word	0x2000022c
 8002088:	20000224 	.word	0x20000224
 800208c:	20000010 	.word	0x20000010

08002090 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <vTaskSuspendAll+0x18>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <vTaskSuspendAll+0x18>)
 800209c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000248 	.word	0x20000248

080020ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <xTaskResumeAll+0x114>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <xTaskResumeAll+0x2a>
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	e7fe      	b.n	80020d4 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80020d6:	f7fe fe11 	bl	8000cfc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80020da:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <xTaskResumeAll+0x114>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3b01      	subs	r3, #1
 80020e0:	4a37      	ldr	r2, [pc, #220]	; (80021c0 <xTaskResumeAll+0x114>)
 80020e2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <xTaskResumeAll+0x114>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d161      	bne.n	80021b0 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020ec:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <xTaskResumeAll+0x118>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d05d      	beq.n	80021b0 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020f4:	e02e      	b.n	8002154 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <xTaskResumeAll+0x11c>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	3318      	adds	r3, #24
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fc5a 	bl	80009bc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3304      	adds	r3, #4
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fc55 	bl	80009bc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	2201      	movs	r2, #1
 8002118:	409a      	lsls	r2, r3
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <xTaskResumeAll+0x120>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <xTaskResumeAll+0x120>)
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <xTaskResumeAll+0x124>)
 8002132:	441a      	add	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3304      	adds	r3, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f7fe fbe3 	bl	8000906 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <xTaskResumeAll+0x128>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	429a      	cmp	r2, r3
 800214c:	d302      	bcc.n	8002154 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <xTaskResumeAll+0x12c>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002154:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <xTaskResumeAll+0x11c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1cc      	bne.n	80020f6 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002162:	f000 fb29 	bl	80027b8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <xTaskResumeAll+0x130>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d010      	beq.n	8002194 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002172:	f000 f845 	bl	8002200 <xTaskIncrementTick>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <xTaskResumeAll+0x12c>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3b01      	subs	r3, #1
 8002186:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f1      	bne.n	8002172 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <xTaskResumeAll+0x130>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <xTaskResumeAll+0x12c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800219c:	2301      	movs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <xTaskResumeAll+0x134>)
 80021a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80021b0:	f7fe fdd2 	bl	8000d58 <vPortExitCritical>

    return xAlreadyYielded;
 80021b4:	68bb      	ldr	r3, [r7, #8]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000248 	.word	0x20000248
 80021c4:	20000220 	.word	0x20000220
 80021c8:	200001e0 	.word	0x200001e0
 80021cc:	20000228 	.word	0x20000228
 80021d0:	200000e8 	.word	0x200000e8
 80021d4:	200000e4 	.word	0x200000e4
 80021d8:	20000234 	.word	0x20000234
 80021dc:	20000230 	.word	0x20000230
 80021e0:	e000ed04 	.word	0xe000ed04

080021e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <xTaskGetTickCount+0x18>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80021f0:	687b      	ldr	r3, [r7, #4]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20000224 	.word	0x20000224

08002200 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800220a:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <xTaskIncrementTick+0x144>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 808d 	bne.w	800232e <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002214:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <xTaskIncrementTick+0x148>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800221c:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <xTaskIncrementTick+0x148>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d11f      	bne.n	8002268 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002228:	4b48      	ldr	r3, [pc, #288]	; (800234c <xTaskIncrementTick+0x14c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <xTaskIncrementTick+0x46>
 8002232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	e7fe      	b.n	8002244 <xTaskIncrementTick+0x44>
 8002246:	4b41      	ldr	r3, [pc, #260]	; (800234c <xTaskIncrementTick+0x14c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <xTaskIncrementTick+0x150>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3e      	ldr	r2, [pc, #248]	; (800234c <xTaskIncrementTick+0x14c>)
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4a3e      	ldr	r2, [pc, #248]	; (8002350 <xTaskIncrementTick+0x150>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <xTaskIncrementTick+0x154>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	4a3c      	ldr	r2, [pc, #240]	; (8002354 <xTaskIncrementTick+0x154>)
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	f000 faa8 	bl	80027b8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002268:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <xTaskIncrementTick+0x158>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	429a      	cmp	r2, r3
 8002270:	d348      	bcc.n	8002304 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <xTaskIncrementTick+0x14c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <xTaskIncrementTick+0x158>)
 800227e:	f04f 32ff 	mov.w	r2, #4294967295
 8002282:	601a      	str	r2, [r3, #0]
                    break;
 8002284:	e03e      	b.n	8002304 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <xTaskIncrementTick+0x14c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d203      	bcs.n	80022a6 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800229e:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <xTaskIncrementTick+0x158>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80022a4:	e02e      	b.n	8002304 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3304      	adds	r3, #4
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fb86 	bl	80009bc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3318      	adds	r3, #24
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fb7d 	bl	80009bc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	2201      	movs	r2, #1
 80022c8:	409a      	lsls	r2, r3
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <xTaskIncrementTick+0x15c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	4a22      	ldr	r2, [pc, #136]	; (800235c <xTaskIncrementTick+0x15c>)
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <xTaskIncrementTick+0x160>)
 80022e2:	441a      	add	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3304      	adds	r3, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4610      	mov	r0, r2
 80022ec:	f7fe fb0b 	bl	8000906 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <xTaskIncrementTick+0x164>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3b9      	bcc.n	8002272 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80022fe:	2301      	movs	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002302:	e7b6      	b.n	8002272 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <xTaskIncrementTick+0x164>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230a:	4915      	ldr	r1, [pc, #84]	; (8002360 <xTaskIncrementTick+0x160>)
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d901      	bls.n	8002320 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 800231c:	2301      	movs	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <xTaskIncrementTick+0x168>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8002328:	2301      	movs	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e004      	b.n	8002338 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <xTaskIncrementTick+0x16c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <xTaskIncrementTick+0x16c>)
 8002336:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002338:	697b      	ldr	r3, [r7, #20]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000248 	.word	0x20000248
 8002348:	20000224 	.word	0x20000224
 800234c:	200001d8 	.word	0x200001d8
 8002350:	200001dc 	.word	0x200001dc
 8002354:	20000238 	.word	0x20000238
 8002358:	20000240 	.word	0x20000240
 800235c:	20000228 	.word	0x20000228
 8002360:	200000e8 	.word	0x200000e8
 8002364:	200000e4 	.word	0x200000e4
 8002368:	20000234 	.word	0x20000234
 800236c:	20000230 	.word	0x20000230

08002370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <vTaskSwitchContext+0xa0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800237e:	4b25      	ldr	r3, [pc, #148]	; (8002414 <vTaskSwitchContext+0xa4>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002384:	e03e      	b.n	8002404 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <vTaskSwitchContext+0xa4>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800238c:	4b22      	ldr	r3, [pc, #136]	; (8002418 <vTaskSwitchContext+0xa8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	f1c3 031f 	rsb	r3, r3, #31
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	491e      	ldr	r1, [pc, #120]	; (800241c <vTaskSwitchContext+0xac>)
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <vTaskSwitchContext+0x5a>
        __asm volatile
 80023b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	e7fe      	b.n	80023c8 <vTaskSwitchContext+0x58>
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <vTaskSwitchContext+0xac>)
 80023d6:	4413      	add	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	3308      	adds	r3, #8
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d104      	bne.n	80023fa <vTaskSwitchContext+0x8a>
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <vTaskSwitchContext+0xb0>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000248 	.word	0x20000248
 8002414:	20000234 	.word	0x20000234
 8002418:	20000228 	.word	0x20000228
 800241c:	200000e8 	.word	0x200000e8
 8002420:	200000e4 	.word	0x200000e4

08002424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <vTaskPlaceOnEventList+0x24>
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e7fe      	b.n	8002446 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <vTaskPlaceOnEventList+0x44>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3318      	adds	r3, #24
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7fe fa7b 	bl	800094c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002456:	2101      	movs	r1, #1
 8002458:	6838      	ldr	r0, [r7, #0]
 800245a:	f000 fb73 	bl	8002b44 <prvAddCurrentTaskToDelayedList>
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200000e4 	.word	0x200000e4

0800246c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <vTaskPlaceOnEventListRestricted+0x26>
 800247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002482:	f383 8811 	msr	BASEPRI, r3
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e7fe      	b.n	8002490 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <vTaskPlaceOnEventListRestricted+0x50>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3318      	adds	r3, #24
 8002498:	4619      	mov	r1, r3
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f7fe fa33 	bl	8000906 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	68b8      	ldr	r0, [r7, #8]
 80024b0:	f000 fb48 	bl	8002b44 <prvAddCurrentTaskToDelayedList>
    }
 80024b4:	bf00      	nop
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200000e4 	.word	0x200000e4

080024c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <xTaskRemoveFromEventList+0x2a>
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e7fe      	b.n	80024e8 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	3318      	adds	r3, #24
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fa64 	bl	80009bc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <xTaskRemoveFromEventList+0xac>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d11c      	bne.n	8002536 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	3304      	adds	r3, #4
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fa5b 	bl	80009bc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	2201      	movs	r2, #1
 800250c:	409a      	lsls	r2, r3
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <xTaskRemoveFromEventList+0xb0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	4a16      	ldr	r2, [pc, #88]	; (8002570 <xTaskRemoveFromEventList+0xb0>)
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4a13      	ldr	r2, [pc, #76]	; (8002574 <xTaskRemoveFromEventList+0xb4>)
 8002526:	441a      	add	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f7fe f9e9 	bl	8000906 <vListInsertEnd>
 8002534:	e005      	b.n	8002542 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	3318      	adds	r3, #24
 800253a:	4619      	mov	r1, r3
 800253c:	480e      	ldr	r0, [pc, #56]	; (8002578 <xTaskRemoveFromEventList+0xb8>)
 800253e:	f7fe f9e2 	bl	8000906 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <xTaskRemoveFromEventList+0xbc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	429a      	cmp	r2, r3
 800254e:	d905      	bls.n	800255c <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002550:	2301      	movs	r3, #1
 8002552:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <xTaskRemoveFromEventList+0xc0>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e001      	b.n	8002560 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002560:	697b      	ldr	r3, [r7, #20]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000248 	.word	0x20000248
 8002570:	20000228 	.word	0x20000228
 8002574:	200000e8 	.word	0x200000e8
 8002578:	200001e0 	.word	0x200001e0
 800257c:	200000e4 	.word	0x200000e4
 8002580:	20000234 	.word	0x20000234

08002584 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <vTaskInternalSetTimeOutState+0x24>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <vTaskInternalSetTimeOutState+0x28>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	605a      	str	r2, [r3, #4]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000238 	.word	0x20000238
 80025ac:	20000224 	.word	0x20000224

080025b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <xTaskCheckForTimeOut+0x24>
 80025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e7fe      	b.n	80025d2 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <xTaskCheckForTimeOut+0x3e>
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e7fe      	b.n	80025ec <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80025ee:	f7fe fb85 	bl	8000cfc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <xTaskCheckForTimeOut+0xc0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d102      	bne.n	8002612 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	e026      	b.n	8002660 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <xTaskCheckForTimeOut+0xc4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d00a      	beq.n	8002634 <xTaskCheckForTimeOut+0x84>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	429a      	cmp	r2, r3
 8002626:	d805      	bhi.n	8002634 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002628:	2301      	movs	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e015      	b.n	8002660 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	429a      	cmp	r2, r3
 800263c:	d90b      	bls.n	8002656 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff9a 	bl	8002584 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	e004      	b.n	8002660 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800265c:	2301      	movs	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002660:	f7fe fb7a 	bl	8000d58 <vPortExitCritical>

    return xReturn;
 8002664:	69fb      	ldr	r3, [r7, #28]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000224 	.word	0x20000224
 8002674:	20000238 	.word	0x20000238

08002678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <vTaskMissedYield+0x14>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000234 	.word	0x20000234

08002690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002698:	f000 f852 	bl	8002740 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <prvIdleTask+0x28>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d9f9      	bls.n	8002698 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <prvIdleTask+0x2c>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80026b4:	e7f0      	b.n	8002698 <prvIdleTask+0x8>
 80026b6:	bf00      	nop
 80026b8:	200000e8 	.word	0x200000e8
 80026bc:	e000ed04 	.word	0xe000ed04

080026c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	e00c      	b.n	80026e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <prvInitialiseTaskLists+0x60>)
 80026d8:	4413      	add	r3, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe f8e8 	bl	80008b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3301      	adds	r3, #1
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d9ef      	bls.n	80026cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80026ec:	480d      	ldr	r0, [pc, #52]	; (8002724 <prvInitialiseTaskLists+0x64>)
 80026ee:	f7fe f8df 	bl	80008b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80026f2:	480d      	ldr	r0, [pc, #52]	; (8002728 <prvInitialiseTaskLists+0x68>)
 80026f4:	f7fe f8dc 	bl	80008b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <prvInitialiseTaskLists+0x6c>)
 80026fa:	f7fe f8d9 	bl	80008b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80026fe:	480c      	ldr	r0, [pc, #48]	; (8002730 <prvInitialiseTaskLists+0x70>)
 8002700:	f7fe f8d6 	bl	80008b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002704:	480b      	ldr	r0, [pc, #44]	; (8002734 <prvInitialiseTaskLists+0x74>)
 8002706:	f7fe f8d3 	bl	80008b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <prvInitialiseTaskLists+0x78>)
 800270c:	4a05      	ldr	r2, [pc, #20]	; (8002724 <prvInitialiseTaskLists+0x64>)
 800270e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <prvInitialiseTaskLists+0x7c>)
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <prvInitialiseTaskLists+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200000e8 	.word	0x200000e8
 8002724:	200001b0 	.word	0x200001b0
 8002728:	200001c4 	.word	0x200001c4
 800272c:	200001e0 	.word	0x200001e0
 8002730:	200001f4 	.word	0x200001f4
 8002734:	2000020c 	.word	0x2000020c
 8002738:	200001d8 	.word	0x200001d8
 800273c:	200001dc 	.word	0x200001dc

08002740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002746:	e019      	b.n	800277c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002748:	f7fe fad8 	bl	8000cfc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <prvCheckTasksWaitingTermination+0x4c>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe f92f 	bl	80009bc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <prvCheckTasksWaitingTermination+0x50>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3b01      	subs	r3, #1
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <prvCheckTasksWaitingTermination+0x50>)
 8002766:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <prvCheckTasksWaitingTermination+0x54>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3b01      	subs	r3, #1
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <prvCheckTasksWaitingTermination+0x54>)
 8002770:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002772:	f7fe faf1 	bl	8000d58 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f80e 	bl	8002798 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <prvCheckTasksWaitingTermination+0x54>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e1      	bne.n	8002748 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200001f4 	.word	0x200001f4
 8002790:	20000220 	.word	0x20000220
 8002794:	20000208 	.word	0x20000208

08002798 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe f871 	bl	800088c <vPortFree>
                vPortFree( pxTCB );
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f86e 	bl	800088c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <prvResetNextTaskUnblockTime+0x2c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <prvResetNextTaskUnblockTime+0x30>)
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80027ce:	e005      	b.n	80027dc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <prvResetNextTaskUnblockTime+0x2c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a03      	ldr	r2, [pc, #12]	; (80027e8 <prvResetNextTaskUnblockTime+0x30>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	200001d8 	.word	0x200001d8
 80027e8:	20000240 	.word	0x20000240

080027ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <xTaskGetSchedulerState+0x34>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80027fa:	2301      	movs	r3, #1
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	e008      	b.n	8002812 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <xTaskGetSchedulerState+0x38>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002808:	2302      	movs	r3, #2
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	e001      	b.n	8002812 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002812:	687b      	ldr	r3, [r7, #4]
    }
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	2000022c 	.word	0x2000022c
 8002824:	20000248 	.word	0x20000248

08002828 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d05e      	beq.n	80028fc <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <xTaskPriorityInherit+0xe0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	429a      	cmp	r2, r3
 800284a:	d24e      	bcs.n	80028ea <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db06      	blt.n	8002862 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002854:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <xTaskPriorityInherit+0xe0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f1c3 020a 	rsb	r2, r3, #10
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6959      	ldr	r1, [r3, #20]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4a26      	ldr	r2, [pc, #152]	; (800290c <xTaskPriorityInherit+0xe4>)
 8002874:	4413      	add	r3, r2
 8002876:	4299      	cmp	r1, r3
 8002878:	d12f      	bne.n	80028da <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3304      	adds	r3, #4
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f89c 	bl	80009bc <uxListRemove>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	2201      	movs	r2, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43da      	mvns	r2, r3
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <xTaskPriorityInherit+0xe8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4013      	ands	r3, r2
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <xTaskPriorityInherit+0xe8>)
 800289e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <xTaskPriorityInherit+0xe0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	2201      	movs	r2, #1
 80028b0:	409a      	lsls	r2, r3
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <xTaskPriorityInherit+0xe8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	4a15      	ldr	r2, [pc, #84]	; (8002910 <xTaskPriorityInherit+0xe8>)
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4a10      	ldr	r2, [pc, #64]	; (800290c <xTaskPriorityInherit+0xe4>)
 80028ca:	441a      	add	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	3304      	adds	r3, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f7fe f817 	bl	8000906 <vListInsertEnd>
 80028d8:	e004      	b.n	80028e4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <xTaskPriorityInherit+0xe0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e008      	b.n	80028fc <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <xTaskPriorityInherit+0xe0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d201      	bcs.n	80028fc <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80028fc:	68fb      	ldr	r3, [r7, #12]
    }
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200000e4 	.word	0x200000e4
 800290c:	200000e8 	.word	0x200000e8
 8002910:	20000228 	.word	0x20000228

08002914 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d061      	beq.n	80029ee <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <xTaskPriorityDisinherit+0xe4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	429a      	cmp	r2, r3
 8002932:	d009      	beq.n	8002948 <xTaskPriorityDisinherit+0x34>
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	e7fe      	b.n	8002946 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <xTaskPriorityDisinherit+0x50>
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	e7fe      	b.n	8002962 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	429a      	cmp	r2, r3
 8002978:	d039      	beq.n	80029ee <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	2b00      	cmp	r3, #0
 8002980:	d135      	bne.n	80029ee <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3304      	adds	r3, #4
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe f818 	bl	80009bc <uxListRemove>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	2201      	movs	r2, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <xTaskPriorityDisinherit+0xe8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4013      	ands	r3, r2
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <xTaskPriorityDisinherit+0xe8>)
 80029a6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f1c3 020a 	rsb	r2, r3, #10
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	2201      	movs	r2, #1
 80029c2:	409a      	lsls	r2, r3
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <xTaskPriorityDisinherit+0xe8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <xTaskPriorityDisinherit+0xe8>)
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <xTaskPriorityDisinherit+0xec>)
 80029dc:	441a      	add	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	3304      	adds	r3, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fd ff8e 	bl	8000906 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80029ea:	2301      	movs	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80029ee:	697b      	ldr	r3, [r7, #20]
    }
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200000e4 	.word	0x200000e4
 80029fc:	20000228 	.word	0x20000228
 8002a00:	200000e8 	.word	0x200000e8

08002a04 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d075      	beq.n	8002b08 <vTaskPriorityDisinheritAfterTimeout+0x104>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e7fe      	b.n	8002a36 <vTaskPriorityDisinheritAfterTimeout+0x32>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d202      	bcs.n	8002a48 <vTaskPriorityDisinheritAfterTimeout+0x44>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e002      	b.n	8002a4e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d057      	beq.n	8002b08 <vTaskPriorityDisinheritAfterTimeout+0x104>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d152      	bne.n	8002b08 <vTaskPriorityDisinheritAfterTimeout+0x104>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002a62:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d109      	bne.n	8002a80 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	e7fe      	b.n	8002a7e <vTaskPriorityDisinheritAfterTimeout+0x7a>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db04      	blt.n	8002a9e <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 020a 	rsb	r2, r3, #10
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6959      	ldr	r1, [r3, #20]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002aae:	4413      	add	r3, r2
 8002ab0:	4299      	cmp	r1, r3
 8002ab2:	d129      	bne.n	8002b08 <vTaskPriorityDisinheritAfterTimeout+0x104>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd ff7f 	bl	80009bc <uxListRemove>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <vTaskPriorityDisinheritAfterTimeout+0xd6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2201      	movs	r2, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002ad8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	2201      	movs	r2, #1
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002afa:	441a      	add	r2, r3
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7fd feff 	bl	8000906 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200000e4 	.word	0x200000e4
 8002b14:	200000e8 	.word	0x200000e8
 8002b18:	20000228 	.word	0x20000228

08002b1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2e:	3201      	adds	r2, #1
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 8002b32:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8002b34:	681b      	ldr	r3, [r3, #0]
    }
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	200000e4 	.word	0x200000e4

08002b44 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd ff2e 	bl	80009bc <uxListRemove>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b7c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d10a      	bne.n	8002b9c <prvAddCurrentTaskToDelayedList+0x58>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b8c:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3304      	adds	r3, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	481a      	ldr	r0, [pc, #104]	; (8002c00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002b96:	f7fd feb6 	bl	8000906 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002b9a:	e026      	b.n	8002bea <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d209      	bcs.n	8002bc8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f7fd fec3 	bl	800094c <vListInsert>
}
 8002bc6:	e010      	b.n	8002bea <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7fd feb9 	bl	800094c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002bda:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d202      	bcs.n	8002bea <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002be4:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	6013      	str	r3, [r2, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000224 	.word	0x20000224
 8002bf8:	200000e4 	.word	0x200000e4
 8002bfc:	20000228 	.word	0x20000228
 8002c00:	2000020c 	.word	0x2000020c
 8002c04:	200001dc 	.word	0x200001dc
 8002c08:	200001d8 	.word	0x200001d8
 8002c0c:	20000240 	.word	0x20000240

08002c10 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002c1a:	f000 facd 	bl	80031b8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <xTimerCreateTimerTask+0x50>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <xTimerCreateTimerTask+0x54>)
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2246      	movs	r2, #70	; 0x46
 8002c32:	490d      	ldr	r1, [pc, #52]	; (8002c68 <xTimerCreateTimerTask+0x58>)
 8002c34:	480d      	ldr	r0, [pc, #52]	; (8002c6c <xTimerCreateTimerTask+0x5c>)
 8002c36:	f7ff f8a3 	bl	8001d80 <xTaskCreate>
 8002c3a:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <xTimerCreateTimerTask+0x46>
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	e7fe      	b.n	8002c54 <xTimerCreateTimerTask+0x44>
        return xReturn;
 8002c56:	687b      	ldr	r3, [r7, #4]
    }
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000027c 	.word	0x2000027c
 8002c64:	20000280 	.word	0x20000280
 8002c68:	08003458 	.word	0x08003458
 8002c6c:	08002da1 	.word	0x08002da1

08002c70 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <xTimerGenericCommand+0x2c>
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	e7fe      	b.n	8002c9a <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <xTimerGenericCommand+0x94>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d02a      	beq.n	8002cfa <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	dc18      	bgt.n	8002ce8 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002cb6:	f7ff fd99 	bl	80027ec <xTaskGetSchedulerState>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d109      	bne.n	8002cd4 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <xTimerGenericCommand+0x94>)
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	f107 0114 	add.w	r1, r7, #20
 8002cc8:	2300      	movs	r3, #0
 8002cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ccc:	f7fe f9f0 	bl	80010b0 <xQueueGenericSend>
 8002cd0:	6278      	str	r0, [r7, #36]	; 0x24
 8002cd2:	e012      	b.n	8002cfa <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <xTimerGenericCommand+0x94>)
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	f107 0114 	add.w	r1, r7, #20
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f7fe f9e6 	bl	80010b0 <xQueueGenericSend>
 8002ce4:	6278      	str	r0, [r7, #36]	; 0x24
 8002ce6:	e008      	b.n	8002cfa <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <xTimerGenericCommand+0x94>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f107 0114 	add.w	r1, r7, #20
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	f7fe fad6 	bl	80012a4 <xQueueGenericSendFromISR>
 8002cf8:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	2000027c 	.word	0x2000027c

08002d08 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <prvProcessExpiredTimer+0x94>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fe4b 	bl	80009bc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d021      	beq.n	8002d78 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	18d1      	adds	r1, r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	6978      	ldr	r0, [r7, #20]
 8002d42:	f000 f8cf 	bl	8002ee4 <prvInsertTimerInActiveList>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01e      	beq.n	8002d8a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	2300      	movs	r3, #0
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	2100      	movs	r1, #0
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f7ff ff8a 	bl	8002c70 <xTimerGenericCommand>
 8002d5c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d112      	bne.n	8002d8a <prvProcessExpiredTimer+0x82>
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e7fe      	b.n	8002d76 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	4798      	blx	r3
    }
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000274 	.word	0x20000274

08002da0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002da8:	f107 0308 	add.w	r3, r7, #8
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f857 	bl	8002e60 <prvGetNextExpireTime>
 8002db2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4619      	mov	r1, r3
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f803 	bl	8002dc4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002dbe:	f000 f8d3 	bl	8002f68 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002dc2:	e7f1      	b.n	8002da8 <prvTimerTask+0x8>

08002dc4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002dce:	f7ff f95f 	bl	8002090 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f864 	bl	8002ea4 <prvSampleTimeNow>
 8002ddc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d130      	bne.n	8002e46 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <prvProcessTimerOrBlockTask+0x3c>
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d806      	bhi.n	8002e00 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002df2:	f7ff f95b 	bl	80020ac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002df6:	68f9      	ldr	r1, [r7, #12]
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ff85 	bl	8002d08 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002dfe:	e024      	b.n	8002e4a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <prvProcessTimerOrBlockTask+0x90>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <prvProcessTimerOrBlockTask+0x50>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <prvProcessTimerOrBlockTask+0x52>
 8002e14:	2300      	movs	r3, #0
 8002e16:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <prvProcessTimerOrBlockTask+0x94>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	f7fe fe84 	bl	8001b32 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002e2a:	f7ff f93f 	bl	80020ac <xTaskResumeAll>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <prvProcessTimerOrBlockTask+0x98>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
    }
 8002e44:	e001      	b.n	8002e4a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002e46:	f7ff f931 	bl	80020ac <xTaskResumeAll>
    }
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000278 	.word	0x20000278
 8002e58:	2000027c 	.word	0x2000027c
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <prvGetNextExpireTime+0x40>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <prvGetNextExpireTime+0x16>
 8002e72:	2201      	movs	r2, #1
 8002e74:	e000      	b.n	8002e78 <prvGetNextExpireTime+0x18>
 8002e76:	2200      	movs	r2, #0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <prvGetNextExpireTime+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	e001      	b.n	8002e94 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002e94:	68fb      	ldr	r3, [r7, #12]
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	20000274 	.word	0x20000274

08002ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002eac:	f7ff f99a 	bl	80021e4 <xTaskGetTickCount>
 8002eb0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <prvSampleTimeNow+0x3c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d205      	bcs.n	8002ec8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002ebc:	f000 f918 	bl	80030f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	e002      	b.n	8002ece <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <prvSampleTimeNow+0x3c>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
    }
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000284 	.word	0x20000284

08002ee4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d812      	bhi.n	8002f30 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	1ad2      	subs	r2, r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d302      	bcc.n	8002f1e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e01b      	b.n	8002f56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <prvInsertTimerInActiveList+0x7c>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3304      	adds	r3, #4
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f7fd fd0f 	bl	800094c <vListInsert>
 8002f2e:	e012      	b.n	8002f56 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d206      	bcs.n	8002f46 <prvInsertTimerInActiveList+0x62>
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d302      	bcc.n	8002f46 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	e007      	b.n	8002f56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <prvInsertTimerInActiveList+0x80>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f7fd fcfb 	bl	800094c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002f56:	697b      	ldr	r3, [r7, #20]
    }
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000278 	.word	0x20000278
 8002f64:	20000274 	.word	0x20000274

08002f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002f6e:	e0ac      	b.n	80030ca <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f2c0 80a9 	blt.w	80030ca <prvProcessReceivedCommands+0x162>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d004      	beq.n	8002f8e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	3304      	adds	r3, #4
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fd17 	bl	80009bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff87 	bl	8002ea4 <prvSampleTimeNow>
 8002f96:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b09      	cmp	r3, #9
 8002f9c:	f200 8094 	bhi.w	80030c8 <prvProcessReceivedCommands+0x160>
 8002fa0:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <prvProcessReceivedCommands+0x40>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fd1 	.word	0x08002fd1
 8002fac:	08002fd1 	.word	0x08002fd1
 8002fb0:	08002fd1 	.word	0x08002fd1
 8002fb4:	08003043 	.word	0x08003043
 8002fb8:	08003057 	.word	0x08003057
 8002fbc:	0800309f 	.word	0x0800309f
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fd1 	.word	0x08002fd1
 8002fc8:	08003043 	.word	0x08003043
 8002fcc:	08003057 	.word	0x08003057
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	18d1      	adds	r1, r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ff0:	f7ff ff78 	bl	8002ee4 <prvInsertTimerInActiveList>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d067      	beq.n	80030ca <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003000:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d05c      	beq.n	80030ca <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	441a      	add	r2, r3
 8003018:	2300      	movs	r3, #0
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2300      	movs	r3, #0
 800301e:	2100      	movs	r1, #0
 8003020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003022:	f7ff fe25 	bl	8002c70 <xTimerGenericCommand>
 8003026:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d14d      	bne.n	80030ca <prvProcessReceivedCommands+0x162>
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	e7fe      	b.n	8003040 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8003054:	e039      	b.n	80030ca <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <prvProcessReceivedCommands+0x122>
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	e7fe      	b.n	8003088 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	18d1      	adds	r1, r2, r3
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	6a3a      	ldr	r2, [r7, #32]
 8003096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003098:	f7ff ff24 	bl	8002ee4 <prvInsertTimerInActiveList>
                        break;
 800309c:	e015      	b.n	80030ca <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 80030ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ae:	f7fd fbed 	bl	800088c <vPortFree>
 80030b2:	e00a      	b.n	80030ca <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80030c6:	e000      	b.n	80030ca <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
 80030c8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <prvProcessReceivedCommands+0x184>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f107 0108 	add.w	r1, r7, #8
 80030d2:	2200      	movs	r2, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fa21 	bl	800151c <xQueueReceive>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f47f af47 	bne.w	8002f70 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80030e2:	bf00      	nop
 80030e4:	3728      	adds	r7, #40	; 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000027c 	.word	0x2000027c

080030f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80030f6:	e047      	b.n	8003188 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030f8:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <prvSwitchTimerLists+0xc0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003102:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <prvSwitchTimerLists+0xc0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	3304      	adds	r3, #4
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fc53 	bl	80009bc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	6938      	ldr	r0, [r7, #16]
 800311c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d02d      	beq.n	8003188 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4413      	add	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	429a      	cmp	r2, r3
 800313c:	d90e      	bls.n	800315c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800314a:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <prvSwitchTimerLists+0xc0>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	3304      	adds	r3, #4
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7fd fbf9 	bl	800094c <vListInsert>
 800315a:	e015      	b.n	8003188 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	2100      	movs	r1, #0
 8003166:	6938      	ldr	r0, [r7, #16]
 8003168:	f7ff fd82 	bl	8002c70 <xTimerGenericCommand>
 800316c:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d109      	bne.n	8003188 <prvSwitchTimerLists+0x98>
 8003174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	e7fe      	b.n	8003186 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <prvSwitchTimerLists+0xc0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1b2      	bne.n	80030f8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <prvSwitchTimerLists+0xc0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <prvSwitchTimerLists+0xc4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <prvSwitchTimerLists+0xc0>)
 800319e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80031a0:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <prvSwitchTimerLists+0xc4>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6013      	str	r3, [r2, #0]
    }
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000274 	.word	0x20000274
 80031b4:	20000278 	.word	0x20000278

080031b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80031bc:	f7fd fd9e 	bl	8000cfc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <prvCheckForValidListAndQueue+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d113      	bne.n	80031f0 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 80031c8:	480c      	ldr	r0, [pc, #48]	; (80031fc <prvCheckForValidListAndQueue+0x44>)
 80031ca:	f7fd fb71 	bl	80008b0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80031ce:	480c      	ldr	r0, [pc, #48]	; (8003200 <prvCheckForValidListAndQueue+0x48>)
 80031d0:	f7fd fb6e 	bl	80008b0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <prvCheckForValidListAndQueue+0x4c>)
 80031d6:	4a09      	ldr	r2, [pc, #36]	; (80031fc <prvCheckForValidListAndQueue+0x44>)
 80031d8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <prvCheckForValidListAndQueue+0x50>)
 80031dc:	4a08      	ldr	r2, [pc, #32]	; (8003200 <prvCheckForValidListAndQueue+0x48>)
 80031de:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80031e0:	2200      	movs	r2, #0
 80031e2:	210c      	movs	r1, #12
 80031e4:	2005      	movs	r0, #5
 80031e6:	f7fd fee5 	bl	8000fb4 <xQueueGenericCreate>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4b02      	ldr	r3, [pc, #8]	; (80031f8 <prvCheckForValidListAndQueue+0x40>)
 80031ee:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80031f0:	f7fd fdb2 	bl	8000d58 <vPortExitCritical>
    }
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	2000027c 	.word	0x2000027c
 80031fc:	2000024c 	.word	0x2000024c
 8003200:	20000260 	.word	0x20000260
 8003204:	20000274 	.word	0x20000274
 8003208:	20000278 	.word	0x20000278

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	2500      	movs	r5, #0
 8003210:	4e0c      	ldr	r6, [pc, #48]	; (8003244 <__libc_init_array+0x38>)
 8003212:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003214:	1ba4      	subs	r4, r4, r6
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	42a5      	cmp	r5, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	f000 f908 	bl	8003430 <_init>
 8003220:	2500      	movs	r5, #0
 8003222:	4e0a      	ldr	r6, [pc, #40]	; (800324c <__libc_init_array+0x40>)
 8003224:	4c0a      	ldr	r4, [pc, #40]	; (8003250 <__libc_init_array+0x44>)
 8003226:	1ba4      	subs	r4, r4, r6
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	42a5      	cmp	r5, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003234:	4798      	blx	r3
 8003236:	3501      	adds	r5, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800323e:	4798      	blx	r3
 8003240:	3501      	adds	r5, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08003460 	.word	0x08003460
 8003248:	08003460 	.word	0x08003460
 800324c:	08003460 	.word	0x08003460
 8003250:	08003464 	.word	0x08003464

08003254 <malloc>:
 8003254:	4b02      	ldr	r3, [pc, #8]	; (8003260 <malloc+0xc>)
 8003256:	4601      	mov	r1, r0
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	f000 b86b 	b.w	8003334 <_malloc_r>
 800325e:	bf00      	nop
 8003260:	20000014 	.word	0x20000014

08003264 <free>:
 8003264:	4b02      	ldr	r3, [pc, #8]	; (8003270 <free+0xc>)
 8003266:	4601      	mov	r1, r0
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	f000 b817 	b.w	800329c <_free_r>
 800326e:	bf00      	nop
 8003270:	20000014 	.word	0x20000014

08003274 <memcpy>:
 8003274:	b510      	push	{r4, lr}
 8003276:	1e43      	subs	r3, r0, #1
 8003278:	440a      	add	r2, r1
 800327a:	4291      	cmp	r1, r2
 800327c:	d100      	bne.n	8003280 <memcpy+0xc>
 800327e:	bd10      	pop	{r4, pc}
 8003280:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003284:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003288:	e7f7      	b.n	800327a <memcpy+0x6>

0800328a <memset>:
 800328a:	4603      	mov	r3, r0
 800328c:	4402      	add	r2, r0
 800328e:	4293      	cmp	r3, r2
 8003290:	d100      	bne.n	8003294 <memset+0xa>
 8003292:	4770      	bx	lr
 8003294:	f803 1b01 	strb.w	r1, [r3], #1
 8003298:	e7f9      	b.n	800328e <memset+0x4>
	...

0800329c <_free_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4605      	mov	r5, r0
 80032a0:	2900      	cmp	r1, #0
 80032a2:	d043      	beq.n	800332c <_free_r+0x90>
 80032a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a8:	1f0c      	subs	r4, r1, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bfb8      	it	lt
 80032ae:	18e4      	addlt	r4, r4, r3
 80032b0:	f000 f8ae 	bl	8003410 <__malloc_lock>
 80032b4:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <_free_r+0x94>)
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	4610      	mov	r0, r2
 80032ba:	b933      	cbnz	r3, 80032ca <_free_r+0x2e>
 80032bc:	6063      	str	r3, [r4, #4]
 80032be:	6014      	str	r4, [r2, #0]
 80032c0:	4628      	mov	r0, r5
 80032c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032c6:	f000 b8a4 	b.w	8003412 <__malloc_unlock>
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	d90b      	bls.n	80032e6 <_free_r+0x4a>
 80032ce:	6821      	ldr	r1, [r4, #0]
 80032d0:	1862      	adds	r2, r4, r1
 80032d2:	4293      	cmp	r3, r2
 80032d4:	bf01      	itttt	eq
 80032d6:	681a      	ldreq	r2, [r3, #0]
 80032d8:	685b      	ldreq	r3, [r3, #4]
 80032da:	1852      	addeq	r2, r2, r1
 80032dc:	6022      	streq	r2, [r4, #0]
 80032de:	6063      	str	r3, [r4, #4]
 80032e0:	6004      	str	r4, [r0, #0]
 80032e2:	e7ed      	b.n	80032c0 <_free_r+0x24>
 80032e4:	4613      	mov	r3, r2
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	b10a      	cbz	r2, 80032ee <_free_r+0x52>
 80032ea:	42a2      	cmp	r2, r4
 80032ec:	d9fa      	bls.n	80032e4 <_free_r+0x48>
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	1858      	adds	r0, r3, r1
 80032f2:	42a0      	cmp	r0, r4
 80032f4:	d10b      	bne.n	800330e <_free_r+0x72>
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	4401      	add	r1, r0
 80032fa:	1858      	adds	r0, r3, r1
 80032fc:	4282      	cmp	r2, r0
 80032fe:	6019      	str	r1, [r3, #0]
 8003300:	d1de      	bne.n	80032c0 <_free_r+0x24>
 8003302:	6810      	ldr	r0, [r2, #0]
 8003304:	6852      	ldr	r2, [r2, #4]
 8003306:	4401      	add	r1, r0
 8003308:	6019      	str	r1, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	e7d8      	b.n	80032c0 <_free_r+0x24>
 800330e:	d902      	bls.n	8003316 <_free_r+0x7a>
 8003310:	230c      	movs	r3, #12
 8003312:	602b      	str	r3, [r5, #0]
 8003314:	e7d4      	b.n	80032c0 <_free_r+0x24>
 8003316:	6820      	ldr	r0, [r4, #0]
 8003318:	1821      	adds	r1, r4, r0
 800331a:	428a      	cmp	r2, r1
 800331c:	bf01      	itttt	eq
 800331e:	6811      	ldreq	r1, [r2, #0]
 8003320:	6852      	ldreq	r2, [r2, #4]
 8003322:	1809      	addeq	r1, r1, r0
 8003324:	6021      	streq	r1, [r4, #0]
 8003326:	6062      	str	r2, [r4, #4]
 8003328:	605c      	str	r4, [r3, #4]
 800332a:	e7c9      	b.n	80032c0 <_free_r+0x24>
 800332c:	bd38      	pop	{r3, r4, r5, pc}
 800332e:	bf00      	nop
 8003330:	20000288 	.word	0x20000288

08003334 <_malloc_r>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	1ccd      	adds	r5, r1, #3
 8003338:	f025 0503 	bic.w	r5, r5, #3
 800333c:	3508      	adds	r5, #8
 800333e:	2d0c      	cmp	r5, #12
 8003340:	bf38      	it	cc
 8003342:	250c      	movcc	r5, #12
 8003344:	2d00      	cmp	r5, #0
 8003346:	4606      	mov	r6, r0
 8003348:	db01      	blt.n	800334e <_malloc_r+0x1a>
 800334a:	42a9      	cmp	r1, r5
 800334c:	d903      	bls.n	8003356 <_malloc_r+0x22>
 800334e:	230c      	movs	r3, #12
 8003350:	6033      	str	r3, [r6, #0]
 8003352:	2000      	movs	r0, #0
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	f000 f85b 	bl	8003410 <__malloc_lock>
 800335a:	4a23      	ldr	r2, [pc, #140]	; (80033e8 <_malloc_r+0xb4>)
 800335c:	6814      	ldr	r4, [r2, #0]
 800335e:	4621      	mov	r1, r4
 8003360:	b991      	cbnz	r1, 8003388 <_malloc_r+0x54>
 8003362:	4c22      	ldr	r4, [pc, #136]	; (80033ec <_malloc_r+0xb8>)
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	b91b      	cbnz	r3, 8003370 <_malloc_r+0x3c>
 8003368:	4630      	mov	r0, r6
 800336a:	f000 f841 	bl	80033f0 <_sbrk_r>
 800336e:	6020      	str	r0, [r4, #0]
 8003370:	4629      	mov	r1, r5
 8003372:	4630      	mov	r0, r6
 8003374:	f000 f83c 	bl	80033f0 <_sbrk_r>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	d126      	bne.n	80033ca <_malloc_r+0x96>
 800337c:	230c      	movs	r3, #12
 800337e:	4630      	mov	r0, r6
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	f000 f846 	bl	8003412 <__malloc_unlock>
 8003386:	e7e4      	b.n	8003352 <_malloc_r+0x1e>
 8003388:	680b      	ldr	r3, [r1, #0]
 800338a:	1b5b      	subs	r3, r3, r5
 800338c:	d41a      	bmi.n	80033c4 <_malloc_r+0x90>
 800338e:	2b0b      	cmp	r3, #11
 8003390:	d90f      	bls.n	80033b2 <_malloc_r+0x7e>
 8003392:	600b      	str	r3, [r1, #0]
 8003394:	18cc      	adds	r4, r1, r3
 8003396:	50cd      	str	r5, [r1, r3]
 8003398:	4630      	mov	r0, r6
 800339a:	f000 f83a 	bl	8003412 <__malloc_unlock>
 800339e:	f104 000b 	add.w	r0, r4, #11
 80033a2:	1d23      	adds	r3, r4, #4
 80033a4:	f020 0007 	bic.w	r0, r0, #7
 80033a8:	1ac3      	subs	r3, r0, r3
 80033aa:	d01b      	beq.n	80033e4 <_malloc_r+0xb0>
 80033ac:	425a      	negs	r2, r3
 80033ae:	50e2      	str	r2, [r4, r3]
 80033b0:	bd70      	pop	{r4, r5, r6, pc}
 80033b2:	428c      	cmp	r4, r1
 80033b4:	bf0b      	itete	eq
 80033b6:	6863      	ldreq	r3, [r4, #4]
 80033b8:	684b      	ldrne	r3, [r1, #4]
 80033ba:	6013      	streq	r3, [r2, #0]
 80033bc:	6063      	strne	r3, [r4, #4]
 80033be:	bf18      	it	ne
 80033c0:	460c      	movne	r4, r1
 80033c2:	e7e9      	b.n	8003398 <_malloc_r+0x64>
 80033c4:	460c      	mov	r4, r1
 80033c6:	6849      	ldr	r1, [r1, #4]
 80033c8:	e7ca      	b.n	8003360 <_malloc_r+0x2c>
 80033ca:	1cc4      	adds	r4, r0, #3
 80033cc:	f024 0403 	bic.w	r4, r4, #3
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	d005      	beq.n	80033e0 <_malloc_r+0xac>
 80033d4:	1a21      	subs	r1, r4, r0
 80033d6:	4630      	mov	r0, r6
 80033d8:	f000 f80a 	bl	80033f0 <_sbrk_r>
 80033dc:	3001      	adds	r0, #1
 80033de:	d0cd      	beq.n	800337c <_malloc_r+0x48>
 80033e0:	6025      	str	r5, [r4, #0]
 80033e2:	e7d9      	b.n	8003398 <_malloc_r+0x64>
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
 80033e6:	bf00      	nop
 80033e8:	20000288 	.word	0x20000288
 80033ec:	2000028c 	.word	0x2000028c

080033f0 <_sbrk_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	2300      	movs	r3, #0
 80033f4:	4c05      	ldr	r4, [pc, #20]	; (800340c <_sbrk_r+0x1c>)
 80033f6:	4605      	mov	r5, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	f000 f80a 	bl	8003414 <_sbrk>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_sbrk_r+0x1a>
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	b103      	cbz	r3, 800340a <_sbrk_r+0x1a>
 8003408:	602b      	str	r3, [r5, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	20000294 	.word	0x20000294

08003410 <__malloc_lock>:
 8003410:	4770      	bx	lr

08003412 <__malloc_unlock>:
 8003412:	4770      	bx	lr

08003414 <_sbrk>:
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <_sbrk+0x14>)
 8003416:	4602      	mov	r2, r0
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	b909      	cbnz	r1, 8003420 <_sbrk+0xc>
 800341c:	4903      	ldr	r1, [pc, #12]	; (800342c <_sbrk+0x18>)
 800341e:	6019      	str	r1, [r3, #0]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	4402      	add	r2, r0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	4770      	bx	lr
 8003428:	20000290 	.word	0x20000290
 800342c:	20000298 	.word	0x20000298

08003430 <_init>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr

0800343c <_fini>:
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	bf00      	nop
 8003440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003442:	bc08      	pop	{r3}
 8003444:	469e      	mov	lr, r3
 8003446:	4770      	bx	lr
