
FreeRTOS LAB_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003530  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08003668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000228  20000078  080036e0  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200002a0  080036e0  000202a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008456  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014db  00000000  00000000  000284f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000718  00000000  00000000  000299d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0002a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003416  00000000  00000000  0002a720  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027af  00000000  00000000  0002db36  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000302e5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001bb4  00000000  00000000  00030364  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00031f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003628 	.word	0x08003628

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003628 	.word	0x08003628

08000150 <MGPIO_voidSetPinDirection>:
#include "DIO_config.h"



void MGPIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	460b      	mov	r3, r1
 800015c:	71bb      	strb	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d03a      	beq.n	80001de <MGPIO_voidSetPinDirection+0x8e>
 8000168:	2b02      	cmp	r3, #2
 800016a:	d06d      	beq.n	8000248 <MGPIO_voidSetPinDirection+0xf8>
 800016c:	2b00      	cmp	r3, #0
 800016e:	d000      	beq.n	8000172 <MGPIO_voidSetPinDirection+0x22>
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
			}
			break;
			
		default : 		break;
 8000170:	e0a4      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			if (Copy_u8Pin <= 7)
 8000172:	79bb      	ldrb	r3, [r7, #6]
 8000174:	2b07      	cmp	r3, #7
 8000176:	d815      	bhi.n	80001a4 <MGPIO_voidSetPinDirection+0x54>
				GPIOA->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000178:	4953      	ldr	r1, [pc, #332]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 800017a:	4b53      	ldr	r3, [pc, #332]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	79ba      	ldrb	r2, [r7, #6]
 8000180:	0092      	lsls	r2, r2, #2
 8000182:	200f      	movs	r0, #15
 8000184:	fa00 f202 	lsl.w	r2, r0, r2
 8000188:	43d2      	mvns	r2, r2
 800018a:	4013      	ands	r3, r2
 800018c:	600b      	str	r3, [r1, #0]
				GPIOA->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 800018e:	484e      	ldr	r0, [pc, #312]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 8000190:	4b4d      	ldr	r3, [pc, #308]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	7979      	ldrb	r1, [r7, #5]
 8000196:	79ba      	ldrb	r2, [r7, #6]
 8000198:	0092      	lsls	r2, r2, #2
 800019a:	fa01 f202 	lsl.w	r2, r1, r2
 800019e:	4313      	orrs	r3, r2
 80001a0:	6003      	str	r3, [r0, #0]
			break;
 80001a2:	e086      	b.n	80002b2 <MGPIO_voidSetPinDirection+0x162>
			else if (Copy_u8Pin <= 15)
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2b0f      	cmp	r3, #15
 80001a8:	f200 8083 	bhi.w	80002b2 <MGPIO_voidSetPinDirection+0x162>
				Copy_u8Pin -= 8;
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	3b08      	subs	r3, #8
 80001b0:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 80001b2:	4945      	ldr	r1, [pc, #276]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001b4:	4b44      	ldr	r3, [pc, #272]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	79ba      	ldrb	r2, [r7, #6]
 80001ba:	0092      	lsls	r2, r2, #2
 80001bc:	200f      	movs	r0, #15
 80001be:	fa00 f202 	lsl.w	r2, r0, r2
 80001c2:	43d2      	mvns	r2, r2
 80001c4:	4013      	ands	r3, r2
 80001c6:	604b      	str	r3, [r1, #4]
				GPIOA->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 80001c8:	483f      	ldr	r0, [pc, #252]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001ca:	4b3f      	ldr	r3, [pc, #252]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	7979      	ldrb	r1, [r7, #5]
 80001d0:	79ba      	ldrb	r2, [r7, #6]
 80001d2:	0092      	lsls	r2, r2, #2
 80001d4:	fa01 f202 	lsl.w	r2, r1, r2
 80001d8:	4313      	orrs	r3, r2
 80001da:	6043      	str	r3, [r0, #4]
			break;
 80001dc:	e069      	b.n	80002b2 <MGPIO_voidSetPinDirection+0x162>
			if (Copy_u8Pin <= 7)
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	d815      	bhi.n	8000210 <MGPIO_voidSetPinDirection+0xc0>
				GPIOB->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 80001e4:	4939      	ldr	r1, [pc, #228]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001e6:	4b39      	ldr	r3, [pc, #228]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	200f      	movs	r0, #15
 80001f0:	fa00 f202 	lsl.w	r2, r0, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4013      	ands	r3, r2
 80001f8:	600b      	str	r3, [r1, #0]
				GPIOB->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 80001fa:	4834      	ldr	r0, [pc, #208]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001fc:	4b33      	ldr	r3, [pc, #204]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	7979      	ldrb	r1, [r7, #5]
 8000202:	79ba      	ldrb	r2, [r7, #6]
 8000204:	0092      	lsls	r2, r2, #2
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	4313      	orrs	r3, r2
 800020c:	6003      	str	r3, [r0, #0]
			break;
 800020e:	e052      	b.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
			else if (Copy_u8Pin <= 15)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b0f      	cmp	r3, #15
 8000214:	d84f      	bhi.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
				Copy_u8Pin -= 8;
 8000216:	79bb      	ldrb	r3, [r7, #6]
 8000218:	3b08      	subs	r3, #8
 800021a:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 800021c:	492b      	ldr	r1, [pc, #172]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	0092      	lsls	r2, r2, #2
 8000226:	200f      	movs	r0, #15
 8000228:	fa00 f202 	lsl.w	r2, r0, r2
 800022c:	43d2      	mvns	r2, r2
 800022e:	4013      	ands	r3, r2
 8000230:	604b      	str	r3, [r1, #4]
				GPIOB->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	7979      	ldrb	r1, [r7, #5]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0092      	lsls	r2, r2, #2
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	4313      	orrs	r3, r2
 8000244:	6043      	str	r3, [r0, #4]
			break;
 8000246:	e036      	b.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
			if (Copy_u8Pin <= 7)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b07      	cmp	r3, #7
 800024c:	d815      	bhi.n	800027a <MGPIO_voidSetPinDirection+0x12a>
				GPIOC->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 800024e:	4920      	ldr	r1, [pc, #128]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	79ba      	ldrb	r2, [r7, #6]
 8000256:	0092      	lsls	r2, r2, #2
 8000258:	200f      	movs	r0, #15
 800025a:	fa00 f202 	lsl.w	r2, r0, r2
 800025e:	43d2      	mvns	r2, r2
 8000260:	4013      	ands	r3, r2
 8000262:	600b      	str	r3, [r1, #0]
				GPIOC->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	7979      	ldrb	r1, [r7, #5]
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4313      	orrs	r3, r2
 8000276:	6003      	str	r3, [r0, #0]
			break;
 8000278:	e01f      	b.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
			else if (Copy_u8Pin <= 15)
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	2b0f      	cmp	r3, #15
 800027e:	d81c      	bhi.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
				Copy_u8Pin -= 8;
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	3b08      	subs	r3, #8
 8000284:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000286:	4912      	ldr	r1, [pc, #72]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	200f      	movs	r0, #15
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	4013      	ands	r3, r2
 800029a:	604b      	str	r3, [r1, #4]
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	7979      	ldrb	r1, [r7, #5]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	0092      	lsls	r2, r2, #2
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4313      	orrs	r3, r2
 80002ae:	6043      	str	r3, [r0, #4]
			break;
 80002b0:	e003      	b.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
			break;
 80002b2:	bf00      	nop
 80002b4:	e002      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			break;
 80002b6:	bf00      	nop
 80002b8:	e000      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			break;
 80002ba:	bf00      	nop
	}
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40011000 	.word	0x40011000

080002d4 <MGPIO_voidSetPinValue>:


void MGPIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	460b      	mov	r3, r1
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	4613      	mov	r3, r2
 80002e4:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d018      	beq.n	800031e <MGPIO_voidSetPinValue+0x4a>
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d02a      	beq.n	8000346 <MGPIO_voidSetPinValue+0x72>
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d000      	beq.n	80002f6 <MGPIO_voidSetPinValue+0x22>
				{
					GPIOC->BSRR = (1 << Copy_u8Pin);
				}
				break;

			default : 		break;
 80002f4:	e040      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				if (Copy_u8Value == GPIO_LOW)
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <MGPIO_voidSetPinValue+0x36>
					GPIOA->BRR = (1 << Copy_u8Pin);
 80002fc:	4a21      	ldr	r2, [pc, #132]	; (8000384 <MGPIO_voidSetPinValue+0xb0>)
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	6153      	str	r3, [r2, #20]
				break;
 8000308:	e031      	b.n	800036e <MGPIO_voidSetPinValue+0x9a>
				else if (Copy_u8Value == GPIO_HIGH)
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d12e      	bne.n	800036e <MGPIO_voidSetPinValue+0x9a>
					GPIOA->BSRR = (1 << Copy_u8Pin);
 8000310:	4a1c      	ldr	r2, [pc, #112]	; (8000384 <MGPIO_voidSetPinValue+0xb0>)
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2101      	movs	r1, #1
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	6113      	str	r3, [r2, #16]
				break;
 800031c:	e027      	b.n	800036e <MGPIO_voidSetPinValue+0x9a>
				if (Copy_u8Value == GPIO_LOW)
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d106      	bne.n	8000332 <MGPIO_voidSetPinValue+0x5e>
					GPIOB->BRR = (1 << Copy_u8Pin);
 8000324:	4a18      	ldr	r2, [pc, #96]	; (8000388 <MGPIO_voidSetPinValue+0xb4>)
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	2101      	movs	r1, #1
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	6153      	str	r3, [r2, #20]
				break;
 8000330:	e01f      	b.n	8000372 <MGPIO_voidSetPinValue+0x9e>
				else if (Copy_u8Value == GPIO_HIGH)
 8000332:	797b      	ldrb	r3, [r7, #5]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d11c      	bne.n	8000372 <MGPIO_voidSetPinValue+0x9e>
					GPIOB->BSRR = (1 << Copy_u8Pin);
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <MGPIO_voidSetPinValue+0xb4>)
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	2101      	movs	r1, #1
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	6113      	str	r3, [r2, #16]
				break;
 8000344:	e015      	b.n	8000372 <MGPIO_voidSetPinValue+0x9e>
				if (Copy_u8Value == GPIO_LOW)
 8000346:	797b      	ldrb	r3, [r7, #5]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d106      	bne.n	800035a <MGPIO_voidSetPinValue+0x86>
					GPIOC->BRR = (1 << Copy_u8Pin);
 800034c:	4a0f      	ldr	r2, [pc, #60]	; (800038c <MGPIO_voidSetPinValue+0xb8>)
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	6153      	str	r3, [r2, #20]
				break;
 8000358:	e00d      	b.n	8000376 <MGPIO_voidSetPinValue+0xa2>
				else if (Copy_u8Value == GPIO_HIGH)
 800035a:	797b      	ldrb	r3, [r7, #5]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d10a      	bne.n	8000376 <MGPIO_voidSetPinValue+0xa2>
					GPIOC->BSRR = (1 << Copy_u8Pin);
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <MGPIO_voidSetPinValue+0xb8>)
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2101      	movs	r1, #1
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	6113      	str	r3, [r2, #16]
				break;
 800036c:	e003      	b.n	8000376 <MGPIO_voidSetPinValue+0xa2>
				break;
 800036e:	bf00      	nop
 8000370:	e002      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				break;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				break;
 8000376:	bf00      	nop
		}
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40011000 	.word	0x40011000

08000390 <MGPIO_voidSetPullResistor>:
	}
}


void MGPIO_voidSetPullResistor(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PullType)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	460b      	mov	r3, r1
 800039c:	71bb      	strb	r3, [r7, #6]
 800039e:	4613      	mov	r3, r2
 80003a0:	717b      	strb	r3, [r7, #5]
	/* set pin configuration as input pull */
	MGPIO_voidSetPinDirection(Copy_u8Port , Copy_u8Pin , GPIO_INPUT_PULL_UP_DOWN);
 80003a2:	79b9      	ldrb	r1, [r7, #6]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2208      	movs	r2, #8
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fed1 	bl	8000150 <MGPIO_voidSetPinDirection>
	switch (Copy_u8Port)
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d018      	beq.n	80003e6 <MGPIO_voidSetPullResistor+0x56>
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	d02a      	beq.n	800040e <MGPIO_voidSetPullResistor+0x7e>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d000      	beq.n	80003be <MGPIO_voidSetPullResistor+0x2e>
			{
				GPIOC->BRR = (1 << Copy_u8Pin);
			}
			break;
			
		default : 		break;
 80003bc:	e040      	b.n	8000440 <MGPIO_voidSetPullResistor+0xb0>
			if (Copy_u8PullType == GPIO_PULL_UP)
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d106      	bne.n	80003d2 <MGPIO_voidSetPullResistor+0x42>
				GPIOA->BSRR = (1 << Copy_u8Pin);
 80003c4:	4a20      	ldr	r2, [pc, #128]	; (8000448 <MGPIO_voidSetPullResistor+0xb8>)
 80003c6:	79bb      	ldrb	r3, [r7, #6]
 80003c8:	2101      	movs	r1, #1
 80003ca:	fa01 f303 	lsl.w	r3, r1, r3
 80003ce:	6113      	str	r3, [r2, #16]
			break;
 80003d0:	e031      	b.n	8000436 <MGPIO_voidSetPullResistor+0xa6>
			else if (Copy_u8PullType == GPIO_PULL_DOWN)
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d12e      	bne.n	8000436 <MGPIO_voidSetPullResistor+0xa6>
				GPIOA->BRR = (1 << Copy_u8Pin);
 80003d8:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <MGPIO_voidSetPullResistor+0xb8>)
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	2101      	movs	r1, #1
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	6153      	str	r3, [r2, #20]
			break;
 80003e4:	e027      	b.n	8000436 <MGPIO_voidSetPullResistor+0xa6>
			if (Copy_u8PullType == GPIO_PULL_UP)
 80003e6:	797b      	ldrb	r3, [r7, #5]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d106      	bne.n	80003fa <MGPIO_voidSetPullResistor+0x6a>
				GPIOB->BSRR = (1 << Copy_u8Pin);
 80003ec:	4a17      	ldr	r2, [pc, #92]	; (800044c <MGPIO_voidSetPullResistor+0xbc>)
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	2101      	movs	r1, #1
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	6113      	str	r3, [r2, #16]
			break;
 80003f8:	e01f      	b.n	800043a <MGPIO_voidSetPullResistor+0xaa>
			else if (Copy_u8PullType == GPIO_PULL_DOWN)
 80003fa:	797b      	ldrb	r3, [r7, #5]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d11c      	bne.n	800043a <MGPIO_voidSetPullResistor+0xaa>
				GPIOB->BRR = (1 << Copy_u8Pin);
 8000400:	4a12      	ldr	r2, [pc, #72]	; (800044c <MGPIO_voidSetPullResistor+0xbc>)
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	2101      	movs	r1, #1
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	6153      	str	r3, [r2, #20]
			break;
 800040c:	e015      	b.n	800043a <MGPIO_voidSetPullResistor+0xaa>
			if (Copy_u8PullType == GPIO_PULL_UP)
 800040e:	797b      	ldrb	r3, [r7, #5]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d106      	bne.n	8000422 <MGPIO_voidSetPullResistor+0x92>
				GPIOC->BSRR = (1 << Copy_u8Pin);
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <MGPIO_voidSetPullResistor+0xc0>)
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	2101      	movs	r1, #1
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	6113      	str	r3, [r2, #16]
			break;
 8000420:	e00d      	b.n	800043e <MGPIO_voidSetPullResistor+0xae>
			else if (Copy_u8PullType == GPIO_PULL_DOWN)
 8000422:	797b      	ldrb	r3, [r7, #5]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d10a      	bne.n	800043e <MGPIO_voidSetPullResistor+0xae>
				GPIOC->BRR = (1 << Copy_u8Pin);
 8000428:	4a09      	ldr	r2, [pc, #36]	; (8000450 <MGPIO_voidSetPullResistor+0xc0>)
 800042a:	79bb      	ldrb	r3, [r7, #6]
 800042c:	2101      	movs	r1, #1
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	6153      	str	r3, [r2, #20]
			break;
 8000434:	e003      	b.n	800043e <MGPIO_voidSetPullResistor+0xae>
			break;
 8000436:	bf00      	nop
 8000438:	e002      	b.n	8000440 <MGPIO_voidSetPullResistor+0xb0>
			break;
 800043a:	bf00      	nop
 800043c:	e000      	b.n	8000440 <MGPIO_voidSetPullResistor+0xb0>
			break;
 800043e:	bf00      	nop
	}
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40010800 	.word	0x40010800
 800044c:	40010c00 	.word	0x40010c00
 8000450:	40011000 	.word	0x40011000

08000454 <MEXTI_voidInit>:
#include "EXTI_config.h"
#include "EXTI_private.h"


void MEXTI_voidInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
	#if		INTERRUPT_MODE == EXTI_RISING
		SET_BIT(EXTI->RTSR , INTERRUPT_LINE);
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <MEXTI_voidInit+0x24>)
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <MEXTI_voidInit+0x24>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000462:	6093      	str	r3, [r2, #8]
	#else 
		#error("invalid mode")

	#endif
	
	CLR_BIT(EXTI->IMR , INTERRUPT_LINE);		//Disable interrupt line
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <MEXTI_voidInit+0x24>)
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <MEXTI_voidInit+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	40010400 	.word	0x40010400

0800047c <MEXTI_voidEnableEXTI>:


void MEXTI_voidEnableEXTI(u8 Copy_u8EXTILine)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->IMR , Copy_u8EXTILine);		//Enable interrupt line
 8000486:	4907      	ldr	r1, [pc, #28]	; (80004a4 <MEXTI_voidEnableEXTI+0x28>)
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MEXTI_voidEnableEXTI+0x28>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	79fa      	ldrb	r2, [r7, #7]
 800048e:	2001      	movs	r0, #1
 8000490:	fa00 f202 	lsl.w	r2, r0, r2
 8000494:	4313      	orrs	r3, r2
 8000496:	600b      	str	r3, [r1, #0]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40010400 	.word	0x40010400

080004a8 <MEXTI_voidSetSignalLatch>:
}



void MEXTI_voidSetSignalLatch(u8 Copy_u8EXTILine , u8 Copy_u8EXTISenseMode)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	4613      	mov	r3, r2
 80004b6:	71bb      	strb	r3, [r7, #6]
	SET_BIT(EXTI->IMR , Copy_u8EXTILine);		//Enable interrupt line
 80004b8:	491e      	ldr	r1, [pc, #120]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	79fa      	ldrb	r2, [r7, #7]
 80004c0:	2001      	movs	r0, #1
 80004c2:	fa00 f202 	lsl.w	r2, r0, r2
 80004c6:	4313      	orrs	r3, r2
 80004c8:	600b      	str	r3, [r1, #0]
	
	switch (Copy_u8EXTISenseMode)      
 80004ca:	79bb      	ldrb	r3, [r7, #6]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d00e      	beq.n	80004ee <MEXTI_voidSetSignalLatch+0x46>
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d016      	beq.n	8000502 <MEXTI_voidSetSignalLatch+0x5a>
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d000      	beq.n	80004da <MEXTI_voidSetSignalLatch+0x32>
		case EXTI_ON_CHANGE :          
			SET_BIT(EXTI->RTSR , Copy_u8EXTILine);
			SET_BIT(EXTI->FTSR , Copy_u8EXTILine);                  
			break;            

		default : 		break;
 80004d8:	e026      	b.n	8000528 <MEXTI_voidSetSignalLatch+0x80>
			SET_BIT(EXTI->RTSR , Copy_u8EXTILine);                  
 80004da:	4916      	ldr	r1, [pc, #88]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	79fa      	ldrb	r2, [r7, #7]
 80004e2:	2001      	movs	r0, #1
 80004e4:	fa00 f202 	lsl.w	r2, r0, r2
 80004e8:	4313      	orrs	r3, r2
 80004ea:	608b      	str	r3, [r1, #8]
			break;            
 80004ec:	e01c      	b.n	8000528 <MEXTI_voidSetSignalLatch+0x80>
			SET_BIT(EXTI->FTSR , Copy_u8EXTILine);                  
 80004ee:	4911      	ldr	r1, [pc, #68]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	2001      	movs	r0, #1
 80004f8:	fa00 f202 	lsl.w	r2, r0, r2
 80004fc:	4313      	orrs	r3, r2
 80004fe:	60cb      	str	r3, [r1, #12]
			break;            
 8000500:	e012      	b.n	8000528 <MEXTI_voidSetSignalLatch+0x80>
			SET_BIT(EXTI->RTSR , Copy_u8EXTILine);
 8000502:	490c      	ldr	r1, [pc, #48]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	79fa      	ldrb	r2, [r7, #7]
 800050a:	2001      	movs	r0, #1
 800050c:	fa00 f202 	lsl.w	r2, r0, r2
 8000510:	4313      	orrs	r3, r2
 8000512:	608b      	str	r3, [r1, #8]
			SET_BIT(EXTI->FTSR , Copy_u8EXTILine);                  
 8000514:	4907      	ldr	r1, [pc, #28]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MEXTI_voidSetSignalLatch+0x8c>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	79fa      	ldrb	r2, [r7, #7]
 800051c:	2001      	movs	r0, #1
 800051e:	fa00 f202 	lsl.w	r2, r0, r2
 8000522:	4313      	orrs	r3, r2
 8000524:	60cb      	str	r3, [r1, #12]
			break;            
 8000526:	bf00      	nop
	}
	
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40010400 	.word	0x40010400

08000538 <MEXTI_voidSetCallBack>:



void MEXTI_voidSetCallBack(u8 Copy_u8EXTILine , void (*ptr) (void) )
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	71fb      	strb	r3, [r7, #7]
	EXTI_Callback[Copy_u8EXTILine] = ptr ;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4904      	ldr	r1, [pc, #16]	; (8000558 <MEXTI_voidSetCallBack+0x20>)
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	20000094 	.word	0x20000094

0800055c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	EXTI_Callback[0]();
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <EXTI0_IRQHandler+0x1c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 0);
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <EXTI0_IRQHandler+0x20>)
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <EXTI0_IRQHandler+0x20>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6153      	str	r3, [r2, #20]
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000094 	.word	0x20000094
 800057c:	40010400 	.word	0x40010400

08000580 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	EXTI_Callback[1]();
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <EXTI1_IRQHandler+0x1c>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 1); 
 800058a:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <EXTI1_IRQHandler+0x20>)
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <EXTI1_IRQHandler+0x20>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6153      	str	r3, [r2, #20]
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000094 	.word	0x20000094
 80005a0:	40010400 	.word	0x40010400

080005a4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	EXTI_Callback[2]();
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <EXTI2_IRQHandler+0x1c>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 2); 
 80005ae:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <EXTI2_IRQHandler+0x20>)
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <EXTI2_IRQHandler+0x20>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6153      	str	r3, [r2, #20]
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000094 	.word	0x20000094
 80005c4:	40010400 	.word	0x40010400

080005c8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	EXTI_Callback[3]();
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <EXTI3_IRQHandler+0x1c>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 3); 
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <EXTI3_IRQHandler+0x20>)
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <EXTI3_IRQHandler+0x20>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	6153      	str	r3, [r2, #20]
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000094 	.word	0x20000094
 80005e8:	40010400 	.word	0x40010400

080005ec <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	EXTI_Callback[4]();
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <EXTI4_IRQHandler+0x1c>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4798      	blx	r3
	/* clear pending bit by write on to it */
	SET_BIT(EXTI->PR , 4); 
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <EXTI4_IRQHandler+0x20>)
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <EXTI4_IRQHandler+0x20>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f043 0310 	orr.w	r3, r3, #16
 8000600:	6153      	str	r3, [r2, #20]
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000094 	.word	0x20000094
 800060c:	40010400 	.word	0x40010400

08000610 <MNVIC_voidEnableInterrupt>:
#include "NVIC_private.h"



void MNVIC_voidEnableInterrupt(u8 Copy_u8IntNum)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	if (Copy_u8IntNum <= 31)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b1f      	cmp	r3, #31
 800061e:	d806      	bhi.n	800062e <MNVIC_voidEnableInterrupt+0x1e>
	{
		NVIC_ISER0 = (1 << Copy_u8IntNum);
 8000620:	4a0b      	ldr	r2, [pc, #44]	; (8000650 <MNVIC_voidEnableInterrupt+0x40>)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2101      	movs	r1, #1
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	6013      	str	r3, [r2, #0]
	
	else 
	{
		/* return an error */
	}
}
 800062c:	e00b      	b.n	8000646 <MNVIC_voidEnableInterrupt+0x36>
	else if (Copy_u8IntNum <= 59)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b3b      	cmp	r3, #59	; 0x3b
 8000632:	d808      	bhi.n	8000646 <MNVIC_voidEnableInterrupt+0x36>
		Copy_u8IntNum -=32;
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	3b20      	subs	r3, #32
 8000638:	71fb      	strb	r3, [r7, #7]
		NVIC_ISER1 = (1 << Copy_u8IntNum);
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <MNVIC_voidEnableInterrupt+0x44>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000e104 	.word	0xe000e104

08000658 <MNVIC_voidSetPriority>:
	return Local_u8Result;
}


void MNVIC_voidSetPriority(s8 Copy_s8IntNum , u8 Copy_u8GroupPriority  , u8 Copy_u8SubPriority, u32 Copy_u32PriGroup)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	460b      	mov	r3, r1
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	4613      	mov	r3, r2
 800066a:	717b      	strb	r3, [r7, #5]
	/* SCB_AIRCR register is used to determines the split of group priority from sub priority */
	#define		SCB_AIRCR						(*((volatile u32*)(0XE000ED00 + 0X0C)))
	SCB_AIRCR = Copy_u32PriGroup ;
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MNVIC_voidSetPriority+0x60>)
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	6013      	str	r3, [r2, #0]
	u8 Local_u8Priority = Copy_u8SubPriority | (Copy_u8GroupPriority << (Copy_u32PriGroup - 0X05FA0300)/256) ; // 256 = 0x100
 8000672:	79ba      	ldrb	r2, [r7, #6]
 8000674:	6839      	ldr	r1, [r7, #0]
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MNVIC_voidSetPriority+0x64>)
 8000678:	440b      	add	r3, r1
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	b25a      	sxtb	r2, r3
 8000682:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000686:	4313      	orrs	r3, r2
 8000688:	b25b      	sxtb	r3, r3
 800068a:	73fb      	strb	r3, [r7, #15]
	/* Core peripheral */
	
	/* External Peripheral */
	
	if (Copy_s8IntNum >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db09      	blt.n	80006a8 <MNVIC_voidSetPriority+0x50>
	{
		NVIC_IPR[Copy_s8IntNum] = Local_u8Priority << 4 ;
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800069c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80006a0:	7bfa      	ldrb	r2, [r7, #15]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	701a      	strb	r2, [r3, #0]
	}
	
	SCB_AIRCR = Copy_u32PriGroup ;
 80006a8:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <MNVIC_voidSetPriority+0x60>)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	6013      	str	r3, [r2, #0]
}   
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	e000ed0c 	.word	0xe000ed0c
 80006bc:	fa05fd00 	.word	0xfa05fd00

080006c0 <MRCC_voidInitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void MRCC_voidInitSysClock(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	/* clear registers */
	RCC_CFGR = 0;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MRCC_voidInitSysClock+0x28>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
	RCC_CR = 0;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MRCC_voidInitSysClock+0x2c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]

	#if		RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		RCC_CR = 0X00010000;								/* Enable HSE with no bypass */
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MRCC_voidInitSysClock+0x2c>)
 80006d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006d6:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0X00000001;								/* Select system clock switch */
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <MRCC_voidInitSysClock+0x28>)
 80006da:	2201      	movs	r2, #1
 80006dc:	601a      	str	r2, [r3, #0]
			#error("you entered non valid value")
		#endif
	#else
		#error("you entered non valid clock type")
	#endif
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40021004 	.word	0x40021004
 80006ec:	40021000 	.word	0x40021000

080006f0 <MRCC_voidEnableClock>:


void MRCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	2b1f      	cmp	r3, #31
 8000704:	d825      	bhi.n	8000752 <MRCC_voidEnableClock+0x62>
	{
		switch (Copy_u8BusId)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d00e      	beq.n	800072a <MRCC_voidEnableClock+0x3a>
 800070c:	2b02      	cmp	r3, #2
 800070e:	d016      	beq.n	800073e <MRCC_voidEnableClock+0x4e>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d000      	beq.n	8000716 <MRCC_voidEnableClock+0x26>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
				break;
				
			default        : 
				/* Return error */ 
				break;
 8000714:	e01d      	b.n	8000752 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_AHBENR,Copy_u8PerId);
 8000716:	4911      	ldr	r1, [pc, #68]	; (800075c <MRCC_voidEnableClock+0x6c>)
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MRCC_voidEnableClock+0x6c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	79ba      	ldrb	r2, [r7, #6]
 800071e:	2001      	movs	r0, #1
 8000720:	fa00 f202 	lsl.w	r2, r0, r2
 8000724:	4313      	orrs	r3, r2
 8000726:	600b      	str	r3, [r1, #0]
				break;
 8000728:	e013      	b.n	8000752 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB1ENR,Copy_u8PerId);
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <MRCC_voidEnableClock+0x70>)
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MRCC_voidEnableClock+0x70>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	79ba      	ldrb	r2, [r7, #6]
 8000732:	2001      	movs	r0, #1
 8000734:	fa00 f202 	lsl.w	r2, r0, r2
 8000738:	4313      	orrs	r3, r2
 800073a:	600b      	str	r3, [r1, #0]
				break;
 800073c:	e009      	b.n	8000752 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
 800073e:	4909      	ldr	r1, [pc, #36]	; (8000764 <MRCC_voidEnableClock+0x74>)
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MRCC_voidEnableClock+0x74>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	79ba      	ldrb	r2, [r7, #6]
 8000746:	2001      	movs	r0, #1
 8000748:	fa00 f202 	lsl.w	r2, r0, r2
 800074c:	4313      	orrs	r3, r2
 800074e:	600b      	str	r3, [r1, #0]
				break;
 8000750:	bf00      	nop
	
	else
	{
		/* Return error */
	}
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40021014 	.word	0x40021014
 8000760:	4002101c 	.word	0x4002101c
 8000764:	40021018 	.word	0x40021018

08000768 <SEVSEG_voidInit>:
#include "SEVSEG_config.h"



void SEVSEG_voidInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinDirection(SEVSEG1_PINA , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800076c:	2201      	movs	r2, #1
 800076e:	2101      	movs	r1, #1
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fced 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PINB , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000776:	2201      	movs	r2, #1
 8000778:	2102      	movs	r1, #2
 800077a:	2000      	movs	r0, #0
 800077c:	f7ff fce8 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PINC , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000780:	2201      	movs	r2, #1
 8000782:	2103      	movs	r1, #3
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fce3 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PIND , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800078a:	2201      	movs	r2, #1
 800078c:	2104      	movs	r1, #4
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fcde 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PINE , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000794:	2201      	movs	r2, #1
 8000796:	2105      	movs	r1, #5
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff fcd9 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PINF , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800079e:	2201      	movs	r2, #1
 80007a0:	2106      	movs	r1, #6
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fcd4 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PING , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2107      	movs	r1, #7
 80007ac:	2000      	movs	r0, #0
 80007ae:	f7ff fccf 	bl	8000150 <MGPIO_voidSetPinDirection>

	MGPIO_voidSetPinDirection(SEVSEG2_PINA , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2100      	movs	r1, #0
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff fcca 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PINB , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff fcc5 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PINC , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2105      	movs	r1, #5
 80007ca:	2001      	movs	r0, #1
 80007cc:	f7ff fcc0 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PIND , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2106      	movs	r1, #6
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fcbb 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PINE , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007da:	2201      	movs	r2, #1
 80007dc:	2107      	movs	r1, #7
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff fcb6 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PINF , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2108      	movs	r1, #8
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fcb1 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PING , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2109      	movs	r1, #9
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fcac 	bl	8000150 <MGPIO_voidSetPinDirection>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SEVSEG1_voidDisplay>:



void SEVSEG1_voidDisplay(u8 Copy_u8Num)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Bit[7] = {0} ;
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	f8c3 2003 	str.w	r2, [r3, #3]
	u8 Local_u8Index = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
	switch (SEVSEG_TYPE)
	{
		case COMMON_CATHODE_SEVSEG :
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	e013      	b.n	8000844 <SEVSEG1_voidDisplay+0x48>
			{
				Local_u8Bit[Local_u8Index] = GET_BIT(array_val[Copy_u8Num] , Local_u8Index);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	4921      	ldr	r1, [pc, #132]	; (80008a8 <SEVSEG1_voidDisplay+0xac>)
 8000822:	5c8a      	ldrb	r2, [r1, r2]
 8000824:	4611      	mov	r1, r2
 8000826:	7bfa      	ldrb	r2, [r7, #15]
 8000828:	fa41 f202 	asr.w	r2, r1, r2
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	f002 0201 	and.w	r2, r2, #1
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	f107 0110 	add.w	r1, r7, #16
 8000838:	440b      	add	r3, r1
 800083a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	3301      	adds	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	2b06      	cmp	r3, #6
 8000848:	d9e8      	bls.n	800081c <SEVSEG1_voidDisplay+0x20>
			}
			
			MGPIO_voidSetPinValue(SEVSEG1_PINA , Local_u8Bit[0]) ;
 800084a:	7a3b      	ldrb	r3, [r7, #8]
 800084c:	461a      	mov	r2, r3
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fd3f 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PINB , Local_u8Bit[1]) ;
 8000856:	7a7b      	ldrb	r3, [r7, #9]
 8000858:	461a      	mov	r2, r3
 800085a:	2102      	movs	r1, #2
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff fd39 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PINC , Local_u8Bit[2]) ;
 8000862:	7abb      	ldrb	r3, [r7, #10]
 8000864:	461a      	mov	r2, r3
 8000866:	2103      	movs	r1, #3
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff fd33 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PIND , Local_u8Bit[3]) ;
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	461a      	mov	r2, r3
 8000872:	2104      	movs	r1, #4
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fd2d 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PINE , Local_u8Bit[4]) ;
 800087a:	7b3b      	ldrb	r3, [r7, #12]
 800087c:	461a      	mov	r2, r3
 800087e:	2105      	movs	r1, #5
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fd27 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PINF , Local_u8Bit[5]) ;
 8000886:	7b7b      	ldrb	r3, [r7, #13]
 8000888:	461a      	mov	r2, r3
 800088a:	2106      	movs	r1, #6
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff fd21 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PING , Local_u8Bit[6]) ;
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	461a      	mov	r2, r3
 8000896:	2107      	movs	r1, #7
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fd1b 	bl	80002d4 <MGPIO_voidSetPinValue>
			break;
 800089e:	bf00      	nop
			MGPIO_voidSetPinValue(SEVSEG1_PING , Local_u8Bit[6]) ;
			break;
		
		default : 			break;
	}
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000000 	.word	0x20000000

080008ac <SEVSEG2_voidDisplay>:




void SEVSEG2_voidDisplay(u8 Copy_u8Num)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Bit[7] = {0} ;
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	f8c3 2003 	str.w	r2, [r3, #3]
	u8 Local_u8Index = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
	switch (SEVSEG_TYPE)
	{
		case COMMON_CATHODE_SEVSEG :
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	e013      	b.n	80008f4 <SEVSEG2_voidDisplay+0x48>
			{
				Local_u8Bit[Local_u8Index] = GET_BIT(array_val[Copy_u8Num] , Local_u8Index);
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	4921      	ldr	r1, [pc, #132]	; (8000958 <SEVSEG2_voidDisplay+0xac>)
 80008d2:	5c8a      	ldrb	r2, [r1, r2]
 80008d4:	4611      	mov	r1, r2
 80008d6:	7bfa      	ldrb	r2, [r7, #15]
 80008d8:	fa41 f202 	asr.w	r2, r1, r2
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	f002 0201 	and.w	r2, r2, #1
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	f107 0110 	add.w	r1, r7, #16
 80008e8:	440b      	add	r3, r1
 80008ea:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	3301      	adds	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d9e8      	bls.n	80008cc <SEVSEG2_voidDisplay+0x20>
			}

			MGPIO_voidSetPinValue(SEVSEG2_PINA , Local_u8Bit[0]) ;
 80008fa:	7a3b      	ldrb	r3, [r7, #8]
 80008fc:	461a      	mov	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fce7 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PINB , Local_u8Bit[1]) ;
 8000906:	7a7b      	ldrb	r3, [r7, #9]
 8000908:	461a      	mov	r2, r3
 800090a:	2101      	movs	r1, #1
 800090c:	2001      	movs	r0, #1
 800090e:	f7ff fce1 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PINC , Local_u8Bit[2]) ;
 8000912:	7abb      	ldrb	r3, [r7, #10]
 8000914:	461a      	mov	r2, r3
 8000916:	2105      	movs	r1, #5
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fcdb 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PIND , Local_u8Bit[3]) ;
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	461a      	mov	r2, r3
 8000922:	2106      	movs	r1, #6
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fcd5 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PINE , Local_u8Bit[4]) ;
 800092a:	7b3b      	ldrb	r3, [r7, #12]
 800092c:	461a      	mov	r2, r3
 800092e:	2107      	movs	r1, #7
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fccf 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PINF , Local_u8Bit[5]) ;
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	461a      	mov	r2, r3
 800093a:	2108      	movs	r1, #8
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fcc9 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PING , Local_u8Bit[6]) ;
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	461a      	mov	r2, r3
 8000946:	2109      	movs	r1, #9
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fcc3 	bl	80002d4 <MGPIO_voidSetPinValue>
			break;
 800094e:	bf00      	nop
			MGPIO_voidSetPinValue(SEVSEG2_PING , Local_u8Bit[6]) ;
			break;

		default : 			break;
	}
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000

0800095c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8000964:	f001 fc90 	bl	8002288 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f002 fd6f 	bl	800344c <malloc>
 800096e:	4603      	mov	r3, r0
 8000970:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000972:	f001 fc97 	bl	80022a4 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    if( pv )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d006      	beq.n	800099c <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800098e:	f001 fc7b 	bl	8002288 <vTaskSuspendAll>
        {
            free( pv );
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f002 fd62 	bl	800345c <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8000998:	f001 fc84 	bl	80022a4 <xTaskResumeAll>
    }
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f103 0208 	add.w	r2, r3, #8
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f103 0208 	add.w	r2, r3, #8
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f103 0208 	add.w	r2, r3, #8
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80009fa:	b480      	push	{r7}
 80009fc:	b085      	sub	sp, #20
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a56:	d103      	bne.n	8000a60 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	e00c      	b.n	8000a7a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3308      	adds	r3, #8
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e002      	b.n	8000a6e <vListInsert+0x2e>
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d9f6      	bls.n	8000a68 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	683a      	ldr	r2, [r7, #0]
 8000a94:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6892      	ldr	r2, [r2, #8]
 8000ac6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6852      	ldr	r2, [r2, #4]
 8000ad0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d103      	bne.n	8000ae4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
	...

08000b04 <main>:




int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af02      	add	r7, sp, #8

	system_init();
 8000b0a:	f000 f83d 	bl	8000b88 <system_init>

	BaseType_t task1_ret = pdFALSE , task2_ret = pdFALSE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]

	sevseg = xSemaphoreCreateBinary();
 8000b16:	2203      	movs	r2, #3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 fb12 	bl	8001144 <xQueueGenericCreate>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <main+0x64>)
 8000b24:	601a      	str	r2, [r3, #0]
	if(sevseg != NULL)
	{
		/* semaphore created successfully */
	}

	Queue1 = xQueueCreate(10,sizeof(unsigned char)) ;
 8000b26:	2200      	movs	r2, #0
 8000b28:	2101      	movs	r1, #1
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f000 fb0a 	bl	8001144 <xQueueGenericCreate>
 8000b30:	4602      	mov	r2, r0
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <main+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
	if( Queue1 == NULL )
	{
		/* Queue was not created and must not be used. */
	}

	task1_ret = xTaskCreate(task1,"task1",configMINIMAL_STACK_SIZE,NULL,TASK1_PRIORITY,&task1_handle);
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <main+0x6c>)
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2246      	movs	r2, #70	; 0x46
 8000b42:	490c      	ldr	r1, [pc, #48]	; (8000b74 <main+0x70>)
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <main+0x74>)
 8000b46:	f001 f9e3 	bl	8001f10 <xTaskCreate>
 8000b4a:	6078      	str	r0, [r7, #4]
	task2_ret = xTaskCreate(task2,"task2",configMINIMAL_STACK_SIZE,NULL,TASK2_PRIORITY,&task2_handle);
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <main+0x78>)
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	2304      	movs	r3, #4
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2300      	movs	r3, #0
 8000b56:	2246      	movs	r2, #70	; 0x46
 8000b58:	4909      	ldr	r1, [pc, #36]	; (8000b80 <main+0x7c>)
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <main+0x80>)
 8000b5c:	f001 f9d8 	bl	8001f10 <xTaskCreate>
 8000b60:	6038      	str	r0, [r7, #0]
	{
		/* task2 created successfully */
	}


	vTaskStartScheduler();
 8000b62:	f001 fb41 	bl	80021e8 <vTaskStartScheduler>
	for(;;);
 8000b66:	e7fe      	b.n	8000b66 <main+0x62>
 8000b68:	200000dc 	.word	0x200000dc
 8000b6c:	200000e0 	.word	0x200000e0
 8000b70:	200000d4 	.word	0x200000d4
 8000b74:	08003640 	.word	0x08003640
 8000b78:	08000be9 	.word	0x08000be9
 8000b7c:	200000d8 	.word	0x200000d8
 8000b80:	08003648 	.word	0x08003648
 8000b84:	08000c55 	.word	0x08000c55

08000b88 <system_init>:




void system_init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	/* Enable external crystal clock 8 mHZ */
	MRCC_voidInitSysClock();
 8000b8c:	f7ff fd98 	bl	80006c0 <MRCC_voidInitSysClock>
	/* Enable portA clock */
	MRCC_voidEnableClock(RCC_APB2 , IOPAEN);
 8000b90:	2102      	movs	r1, #2
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff fdac 	bl	80006f0 <MRCC_voidEnableClock>
	/* Enable portB clock */
	MRCC_voidEnableClock(RCC_APB2 , IOPBEN);
 8000b98:	2103      	movs	r1, #3
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff fda8 	bl	80006f0 <MRCC_voidEnableClock>
	MEXTI_voidInit();
 8000ba0:	f7ff fc58 	bl	8000454 <MEXTI_voidInit>

	/* Set PINA9 as Output NMHZ Push pull */
	MGPIO_voidSetPullResistor(PORTA,PIN0,GPIO_PULL_UP);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fbf1 	bl	8000390 <MGPIO_voidSetPullResistor>

	MEXTI_voidSetSignalLatch(EXTI_LINE0,EXTI_FALLING);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fc79 	bl	80004a8 <MEXTI_voidSetSignalLatch>
	MEXTI_voidSetCallBack(EXTI_LINE0,EXTI_callback);
 8000bb6:	490a      	ldr	r1, [pc, #40]	; (8000be0 <system_init+0x58>)
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fcbd 	bl	8000538 <MEXTI_voidSetCallBack>
	 * very important note : we should set all priority bits as group priority
	 * and any interrupt priority uses FreeRTOS API must have lower priority than configMAX_SYSCALL_INTERRUPT_PRIORITY
	 * that means it must be more than it in value because zero is the highest priority
	 * for more information please visit this site : http://www.freertos.org/RTOS-Cortex-M3-M4.html
	 */
	MNVIC_voidSetPriority(EXTI0,8,0,NVIC_GROUP4_SUB0);
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <system_init+0x5c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	f7ff fd47 	bl	8000658 <MNVIC_voidSetPriority>

	MEXTI_voidEnableEXTI(EXTI_LINE0);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff fc56 	bl	800047c <MEXTI_voidEnableEXTI>

	MNVIC_voidEnableInterrupt(EXTI0);
 8000bd0:	2006      	movs	r0, #6
 8000bd2:	f7ff fd1d 	bl	8000610 <MNVIC_voidEnableInterrupt>
	/* initialize 7-segment */
	SEVSEG_voidInit();
 8000bd6:	f7ff fdc7 	bl	8000768 <SEVSEG_voidInit>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08000c91 	.word	0x08000c91
 8000be4:	05fa0300 	.word	0x05fa0300

08000be8 <task1>:



void task1(void *pvParameter)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	BaseType_t ret = pdFALSE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
	char num = 0 ;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	75fb      	strb	r3, [r7, #23]
	char var;
	for(;;)
	{
		ret = xSemaphoreTake(sevseg,portMAX_DELAY);
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <task1+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fe2f 	bl	8001864 <xQueueSemaphoreTake>
 8000c06:	6138      	str	r0, [r7, #16]
		if(ret == pdTRUE)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d119      	bne.n	8000c42 <task1+0x5a>
		{
			if(num ==10)
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	2b0a      	cmp	r3, #10
 8000c12:	d101      	bne.n	8000c18 <task1+0x30>
			{
				num = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	75fb      	strb	r3, [r7, #23]
			}
			SEVSEG1_voidDisplay(num);
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fdee 	bl	80007fc <SEVSEG1_voidDisplay>

			/* software delay */
			//for(u64 i=0 ; i< 350000 ; i++);
			var = 9-num;
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
 8000c22:	f1c3 0309 	rsb	r3, r3, #9
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	73fb      	strb	r3, [r7, #15]
			xQueueSend(Queue1,&var,portMAX_DELAY);
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <task1+0x68>)
 8000c2c:	6818      	ldr	r0, [r3, #0]
 8000c2e:	f107 010f 	add.w	r1, r7, #15
 8000c32:	2300      	movs	r3, #0
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	f000 fb02 	bl	8001240 <xQueueGenericSend>
			num++;
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	75fb      	strb	r3, [r7, #23]
		}
		vTaskDelay(100);
 8000c42:	2064      	movs	r0, #100	; 0x64
 8000c44:	f001 fa9c 	bl	8002180 <vTaskDelay>
		ret = xSemaphoreTake(sevseg,portMAX_DELAY);
 8000c48:	e7d6      	b.n	8000bf8 <task1+0x10>
 8000c4a:	bf00      	nop
 8000c4c:	200000dc 	.word	0x200000dc
 8000c50:	200000e0 	.word	0x200000e0

08000c54 <task2>:
}



void task2(void *pvParameter)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	BaseType_t queue_ret = pdFALSE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
	unsigned char var;
	for(;;)
	{
		queue_ret = xQueueReceive(Queue1,&var,portMAX_DELAY);
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <task2+0x38>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f107 010b 	add.w	r1, r7, #11
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fd1d 	bl	80016ac <xQueueReceive>
 8000c72:	60f8      	str	r0, [r7, #12]
		if(queue_ret == pdTRUE)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d103      	bne.n	8000c82 <task2+0x2e>
		{
			SEVSEG2_voidDisplay(var);
 8000c7a:	7afb      	ldrb	r3, [r7, #11]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe15 	bl	80008ac <SEVSEG2_voidDisplay>
		}

		vTaskDelay(100);
 8000c82:	2064      	movs	r0, #100	; 0x64
 8000c84:	f001 fa7c 	bl	8002180 <vTaskDelay>
		queue_ret = xQueueReceive(Queue1,&var,portMAX_DELAY);
 8000c88:	e7ea      	b.n	8000c60 <task2+0xc>
 8000c8a:	bf00      	nop
 8000c8c:	200000e0 	.word	0x200000e0

08000c90 <EXTI_callback>:
	}
}


void EXTI_callback(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	BaseType_t ret = pdFALSE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
	ret = xSemaphoreGiveFromISR(sevseg,NULL);
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <EXTI_callback+0x20>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fc6c 	bl	800157e <xQueueGiveFromISR>
 8000ca6:	6078      	str	r0, [r7, #4]
	{
//		SEVSEG_voidDisplay(3);
//		for(u64 i=0 ; i< 350000 ; i++);
	}

}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000dc 	.word	0x200000dc

08000cb4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ccc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3b04      	subs	r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	f023 0201 	bic.w	r2, r3, #1
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3b04      	subs	r3, #4
 8000ce2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000ce4:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <pxPortInitialiseStack+0x54>)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3b14      	subs	r3, #20
 8000cee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3b20      	subs	r3, #32
 8000cfa:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	08000d0d 	.word	0x08000d0d

08000d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <prvTaskExitError+0x4c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1e:	d009      	beq.n	8000d34 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	e7fe      	b.n	8000d32 <prvTaskExitError+0x26>
 8000d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d38:	f383 8811 	msr	BASEPRI, r3
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	f3bf 8f4f 	dsb	sy
 8000d44:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000d46:	bf00      	nop
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0fc      	beq.n	8000d48 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	2000000c 	.word	0x2000000c
 8000d5c:	00000000 	.word	0x00000000

08000d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <pxCurrentTCBConst2>)
 8000d62:	6819      	ldr	r1, [r3, #0]
 8000d64:	6808      	ldr	r0, [r1, #0]
 8000d66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d6a:	f380 8809 	msr	PSP, r0
 8000d6e:	f3bf 8f6f 	isb	sy
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	f380 8811 	msr	BASEPRI, r0
 8000d7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000d7e:	4770      	bx	lr

08000d80 <pxCurrentTCBConst2>:
 8000d80:	200000ec 	.word	0x200000ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop

08000d88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000d88:	4806      	ldr	r0, [pc, #24]	; (8000da4 <prvPortStartFirstTask+0x1c>)
 8000d8a:	6800      	ldr	r0, [r0, #0]
 8000d8c:	6800      	ldr	r0, [r0, #0]
 8000d8e:	f380 8808 	msr	MSP, r0
 8000d92:	b662      	cpsie	i
 8000d94:	b661      	cpsie	f
 8000d96:	f3bf 8f4f 	dsb	sy
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	df00      	svc	0
 8000da0:	bf00      	nop
 8000da2:	0000      	.short	0x0000
 8000da4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop

08000dac <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <xPortStartScheduler+0xcc>)
 8000db4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	22ff      	movs	r2, #255	; 0xff
 8000dc2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000dcc:	78fb      	ldrb	r3, [r7, #3]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <xPortStartScheduler+0xd0>)
 8000dd8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <xPortStartScheduler+0xd4>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000de0:	e009      	b.n	8000df6 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <xPortStartScheduler+0xd4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <xPortStartScheduler+0xd4>)
 8000dea:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	2b80      	cmp	r3, #128	; 0x80
 8000e00:	d0ef      	beq.n	8000de2 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <xPortStartScheduler+0xd4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d009      	beq.n	8000e22 <xPortStartScheduler+0x76>
 8000e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e12:	f383 8811 	msr	BASEPRI, r3
 8000e16:	f3bf 8f6f 	isb	sy
 8000e1a:	f3bf 8f4f 	dsb	sy
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	e7fe      	b.n	8000e20 <xPortStartScheduler+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <xPortStartScheduler+0xd4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <xPortStartScheduler+0xd4>)
 8000e2a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <xPortStartScheduler+0xd4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <xPortStartScheduler+0xd4>)
 8000e36:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <xPortStartScheduler+0xd8>)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <xPortStartScheduler+0xd8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <xPortStartScheduler+0xd8>)
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <xPortStartScheduler+0xd8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000e56:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000e58:	f000 f8b6 	bl	8000fc8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <xPortStartScheduler+0xdc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000e62:	f7ff ff91 	bl	8000d88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000e66:	f001 fb7f 	bl	8002568 <vTaskSwitchContext>
    prvTaskExitError();
 8000e6a:	f7ff ff4f 	bl	8000d0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	e000e400 	.word	0xe000e400
 8000e7c:	200000e4 	.word	0x200000e4
 8000e80:	200000e8 	.word	0x200000e8
 8000e84:	e000ed20 	.word	0xe000ed20
 8000e88:	2000000c 	.word	0x2000000c

08000e8c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e96:	f383 8811 	msr	BASEPRI, r3
 8000e9a:	f3bf 8f6f 	isb	sy
 8000e9e:	f3bf 8f4f 	dsb	sy
 8000ea2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <vPortEnterCritical+0x54>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <vPortEnterCritical+0x54>)
 8000eac:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <vPortEnterCritical+0x54>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d10e      	bne.n	8000ed4 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <vPortEnterCritical+0x58>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d009      	beq.n	8000ed4 <vPortEnterCritical+0x48>
 8000ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	f3bf 8f4f 	dsb	sy
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	e7fe      	b.n	8000ed2 <vPortEnterCritical+0x46>
    }
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	e000ed04 	.word	0xe000ed04

08000ee8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <vPortExitCritical+0x48>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d109      	bne.n	8000f0a <vPortExitCritical+0x22>
 8000ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efa:	f383 8811 	msr	BASEPRI, r3
 8000efe:	f3bf 8f6f 	isb	sy
 8000f02:	f3bf 8f4f 	dsb	sy
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e7fe      	b.n	8000f08 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <vPortExitCritical+0x48>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <vPortExitCritical+0x48>)
 8000f12:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <vPortExitCritical+0x48>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d104      	bne.n	8000f26 <vPortExitCritical+0x3e>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	2000000c 	.word	0x2000000c
	...

08000f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000f40:	f3ef 8009 	mrs	r0, PSP
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <pxCurrentTCBConst>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f50:	6010      	str	r0, [r2, #0]
 8000f52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000f56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000f5a:	f380 8811 	msr	BASEPRI, r0
 8000f5e:	f001 fb03 	bl	8002568 <vTaskSwitchContext>
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	f380 8811 	msr	BASEPRI, r0
 8000f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f6e:	6819      	ldr	r1, [r3, #0]
 8000f70:	6808      	ldr	r0, [r1, #0]
 8000f72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f76:	f380 8809 	msr	PSP, r0
 8000f7a:	f3bf 8f6f 	isb	sy
 8000f7e:	4770      	bx	lr

08000f80 <pxCurrentTCBConst>:
 8000f80:	200000ec 	.word	0x200000ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop

08000f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
        __asm volatile
 8000f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f92:	f383 8811 	msr	BASEPRI, r3
 8000f96:	f3bf 8f6f 	isb	sy
 8000f9a:	f3bf 8f4f 	dsb	sy
 8000f9e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000fa0:	f001 fa2a 	bl	80023f8 <xTaskIncrementTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <SysTick_Handler+0x3c>)
 8000fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	e000ed04 	.word	0xe000ed04

08000fc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <vPortSetupTimerInterrupt+0x28>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <vPortSetupTimerInterrupt+0x2c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <vPortSetupTimerInterrupt+0x30>)
 8000fda:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fde:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <vPortSetupTimerInterrupt+0x28>)
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	601a      	str	r2, [r3, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010
 8000ff4:	e000e018 	.word	0xe000e018
 8000ff8:	e000e014 	.word	0xe000e014

08000ffc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001002:	f3ef 8305 	mrs	r3, IPSR
 8001006:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	d913      	bls.n	8001036 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <vPortValidateInterruptPriority+0x68>)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <vPortValidateInterruptPriority+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	7afa      	ldrb	r2, [r7, #11]
 800101e:	429a      	cmp	r2, r3
 8001020:	d209      	bcs.n	8001036 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8001022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001026:	f383 8811 	msr	BASEPRI, r3
 800102a:	f3bf 8f6f 	isb	sy
 800102e:	f3bf 8f4f 	dsb	sy
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	e7fe      	b.n	8001034 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <vPortValidateInterruptPriority+0x70>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <vPortValidateInterruptPriority+0x74>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d909      	bls.n	800105a <vPortValidateInterruptPriority+0x5e>
 8001046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800104a:	f383 8811 	msr	BASEPRI, r3
 800104e:	f3bf 8f6f 	isb	sy
 8001052:	f3bf 8f4f 	dsb	sy
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	e7fe      	b.n	8001058 <vPortValidateInterruptPriority+0x5c>
    }
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	e000e3f0 	.word	0xe000e3f0
 8001068:	200000e4 	.word	0x200000e4
 800106c:	e000ed0c 	.word	0xe000ed0c
 8001070:	200000e8 	.word	0x200000e8

08001074 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d109      	bne.n	800109c <xQueueGenericReset+0x28>
 8001088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108c:	f383 8811 	msr	BASEPRI, r3
 8001090:	f3bf 8f6f 	isb	sy
 8001094:	f3bf 8f4f 	dsb	sy
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	e7fe      	b.n	800109a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 800109c:	f7ff fef6 	bl	8000e8c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a8:	68f9      	ldr	r1, [r7, #12]
 80010aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010ac:	fb01 f303 	mul.w	r3, r1, r3
 80010b0:	441a      	add	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2200      	movs	r2, #0
 80010ba:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010cc:	3b01      	subs	r3, #1
 80010ce:	68f9      	ldr	r1, [r7, #12]
 80010d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010d2:	fb01 f303 	mul.w	r3, r1, r3
 80010d6:	441a      	add	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	22ff      	movs	r2, #255	; 0xff
 80010e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d01a      	beq.n	8001130 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3310      	adds	r3, #16
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fada 	bl	80026b8 <xTaskRemoveFromEventList>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d012      	beq.n	8001130 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <xQueueGenericReset+0xcc>)
 800110c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	f3bf 8f4f 	dsb	sy
 8001116:	f3bf 8f6f 	isb	sy
 800111a:	e009      	b.n	8001130 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3310      	adds	r3, #16
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fc3f 	bl	80009a4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3324      	adds	r3, #36	; 0x24
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fc3a 	bl	80009a4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001130:	f7ff feda 	bl	8000ee8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001134:	2301      	movs	r3, #1
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000ed04 	.word	0xe000ed04

08001144 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af02      	add	r7, sp, #8
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	4613      	mov	r3, r2
 8001150:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d109      	bne.n	800116c <xQueueGenericCreate+0x28>
 8001158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800115c:	f383 8811 	msr	BASEPRI, r3
 8001160:	f3bf 8f6f 	isb	sy
 8001164:	f3bf 8f4f 	dsb	sy
 8001168:	61bb      	str	r3, [r7, #24]
 800116a:	e7fe      	b.n	800116a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <xQueueGenericCreate+0x46>
 800117c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	fbb2 f2f3 	udiv	r2, r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	429a      	cmp	r2, r3
 8001188:	d101      	bne.n	800118e <xQueueGenericCreate+0x4a>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <xQueueGenericCreate+0x4c>
 800118e:	2300      	movs	r3, #0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <xQueueGenericCreate+0x64>
 8001194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001198:	f383 8811 	msr	BASEPRI, r3
 800119c:	f3bf 8f6f 	isb	sy
 80011a0:	f3bf 8f4f 	dsb	sy
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e7fe      	b.n	80011a6 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d809      	bhi.n	80011c8 <xQueueGenericCreate+0x84>
 80011b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b8:	f383 8811 	msr	BASEPRI, r3
 80011bc:	f3bf 8f6f 	isb	sy
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	e7fe      	b.n	80011c6 <xQueueGenericCreate+0x82>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3348      	adds	r3, #72	; 0x48
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fbc5 	bl	800095c <pvPortMalloc>
 80011d2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00d      	beq.n	80011f6 <xQueueGenericCreate+0xb2>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3348      	adds	r3, #72	; 0x48
 80011e2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4613      	mov	r3, r2
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	68b9      	ldr	r1, [r7, #8]
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 f805 	bl	8001200 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80011f6:	6a3b      	ldr	r3, [r7, #32]
    }
 80011f8:	4618      	mov	r0, r3
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e002      	b.n	8001222 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800122e:	2101      	movs	r1, #1
 8001230:	69b8      	ldr	r0, [r7, #24]
 8001232:	f7ff ff1f 	bl	8001074 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800124e:	2300      	movs	r3, #0
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <xQueueGenericSend+0x30>
 800125c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001260:	f383 8811 	msr	BASEPRI, r3
 8001264:	f3bf 8f6f 	isb	sy
 8001268:	f3bf 8f4f 	dsb	sy
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
 800126e:	e7fe      	b.n	800126e <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d103      	bne.n	800127e <xQueueGenericSend+0x3e>
 8001276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <xQueueGenericSend+0x42>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <xQueueGenericSend+0x44>
 8001282:	2300      	movs	r3, #0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <xQueueGenericSend+0x5c>
 8001288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128c:	f383 8811 	msr	BASEPRI, r3
 8001290:	f3bf 8f6f 	isb	sy
 8001294:	f3bf 8f4f 	dsb	sy
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	e7fe      	b.n	800129a <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d103      	bne.n	80012aa <xQueueGenericSend+0x6a>
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <xQueueGenericSend+0x6e>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <xQueueGenericSend+0x70>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <xQueueGenericSend+0x88>
 80012b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	e7fe      	b.n	80012c6 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012c8:	f001 fb8c 	bl	80029e4 <xTaskGetSchedulerState>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <xQueueGenericSend+0x98>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <xQueueGenericSend+0x9c>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <xQueueGenericSend+0x9e>
 80012dc:	2300      	movs	r3, #0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <xQueueGenericSend+0xb6>
 80012e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e6:	f383 8811 	msr	BASEPRI, r3
 80012ea:	f3bf 8f6f 	isb	sy
 80012ee:	f3bf 8f4f 	dsb	sy
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	e7fe      	b.n	80012f4 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80012f6:	f7ff fdc9 	bl	8000e8c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001302:	429a      	cmp	r2, r3
 8001304:	d302      	bcc.n	800130c <xQueueGenericSend+0xcc>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d129      	bne.n	8001360 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001312:	f000 fbc6 	bl	8001aa2 <prvCopyDataToQueue>
 8001316:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	2b00      	cmp	r3, #0
 800131e:	d010      	beq.n	8001342 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	3324      	adds	r3, #36	; 0x24
 8001324:	4618      	mov	r0, r3
 8001326:	f001 f9c7 	bl	80026b8 <xTaskRemoveFromEventList>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001330:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <xQueueGenericSend+0x1f0>)
 8001332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	f3bf 8f6f 	isb	sy
 8001340:	e00a      	b.n	8001358 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <xQueueGenericSend+0x1f0>)
 800134a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	f3bf 8f4f 	dsb	sy
 8001354:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001358:	f7ff fdc6 	bl	8000ee8 <vPortExitCritical>
                return pdPASS;
 800135c:	2301      	movs	r3, #1
 800135e:	e063      	b.n	8001428 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d103      	bne.n	800136e <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001366:	f7ff fdbf 	bl	8000ee8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800136a:	2300      	movs	r3, #0
 800136c:	e05c      	b.n	8001428 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001370:	2b00      	cmp	r3, #0
 8001372:	d106      	bne.n	8001382 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4618      	mov	r0, r3
 800137a:	f001 f9ff 	bl	800277c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800137e:	2301      	movs	r3, #1
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001382:	f7ff fdb1 	bl	8000ee8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001386:	f000 ff7f 	bl	8002288 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800138a:	f7ff fd7f 	bl	8000e8c <vPortEnterCritical>
 800138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001394:	b25b      	sxtb	r3, r3
 8001396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139a:	d103      	bne.n	80013a4 <xQueueGenericSend+0x164>
 800139c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d103      	bne.n	80013ba <xQueueGenericSend+0x17a>
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013ba:	f7ff fd95 	bl	8000ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013be:	1d3a      	adds	r2, r7, #4
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 f9ee 	bl	80027a8 <xTaskCheckForTimeOut>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d124      	bne.n	800141c <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013d4:	f000 fc5d 	bl	8001c92 <prvIsQueueFull>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d018      	beq.n	8001410 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e0:	3310      	adds	r3, #16
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 f918 	bl	800261c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80013ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ee:	f000 fbe8 	bl	8001bc2 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80013f2:	f000 ff57 	bl	80022a4 <xTaskResumeAll>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f af7c 	bne.w	80012f6 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <xQueueGenericSend+0x1f0>)
 8001400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f3bf 8f4f 	dsb	sy
 800140a:	f3bf 8f6f 	isb	sy
 800140e:	e772      	b.n	80012f6 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001412:	f000 fbd6 	bl	8001bc2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001416:	f000 ff45 	bl	80022a4 <xTaskResumeAll>
 800141a:	e76c      	b.n	80012f6 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800141c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800141e:	f000 fbd0 	bl	8001bc2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001422:	f000 ff3f 	bl	80022a4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001426:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001428:	4618      	mov	r0, r3
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	e000ed04 	.word	0xe000ed04

08001434 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b090      	sub	sp, #64	; 0x40
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001448:	2b00      	cmp	r3, #0
 800144a:	d109      	bne.n	8001460 <xQueueGenericSendFromISR+0x2c>
 800144c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001450:	f383 8811 	msr	BASEPRI, r3
 8001454:	f3bf 8f6f 	isb	sy
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
 800145e:	e7fe      	b.n	800145e <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d103      	bne.n	800146e <xQueueGenericSendFromISR+0x3a>
 8001466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <xQueueGenericSendFromISR+0x3e>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <xQueueGenericSendFromISR+0x40>
 8001472:	2300      	movs	r3, #0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d109      	bne.n	800148c <xQueueGenericSendFromISR+0x58>
 8001478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147c:	f383 8811 	msr	BASEPRI, r3
 8001480:	f3bf 8f6f 	isb	sy
 8001484:	f3bf 8f4f 	dsb	sy
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	e7fe      	b.n	800148a <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d103      	bne.n	800149a <xQueueGenericSendFromISR+0x66>
 8001492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <xQueueGenericSendFromISR+0x6a>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <xQueueGenericSendFromISR+0x6c>
 800149e:	2300      	movs	r3, #0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <xQueueGenericSendFromISR+0x84>
 80014a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a8:	f383 8811 	msr	BASEPRI, r3
 80014ac:	f3bf 8f6f 	isb	sy
 80014b0:	f3bf 8f4f 	dsb	sy
 80014b4:	623b      	str	r3, [r7, #32]
 80014b6:	e7fe      	b.n	80014b6 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014b8:	f7ff fda0 	bl	8000ffc <vPortValidateInterruptPriority>
        __asm volatile
 80014bc:	f3ef 8211 	mrs	r2, BASEPRI
 80014c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c4:	f383 8811 	msr	BASEPRI, r3
 80014c8:	f3bf 8f6f 	isb	sy
 80014cc:	f3bf 8f4f 	dsb	sy
 80014d0:	61fa      	str	r2, [r7, #28]
 80014d2:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80014d4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d302      	bcc.n	80014ea <xQueueGenericSendFromISR+0xb6>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d13d      	bne.n	8001566 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80014ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001500:	f000 facf 	bl	8001aa2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001504:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d112      	bne.n	8001534 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	2b00      	cmp	r3, #0
 8001514:	d024      	beq.n	8001560 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	3324      	adds	r3, #36	; 0x24
 800151a:	4618      	mov	r0, r3
 800151c:	f001 f8cc 	bl	80026b8 <xTaskRemoveFromEventList>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01c      	beq.n	8001560 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d019      	beq.n	8001560 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e015      	b.n	8001560 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001534:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001538:	2b7f      	cmp	r3, #127	; 0x7f
 800153a:	d109      	bne.n	8001550 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 800153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e7fe      	b.n	800154e <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001554:	3301      	adds	r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	b25a      	sxtb	r2, r3
 800155a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800155c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001560:	2301      	movs	r3, #1
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001564:	e001      	b.n	800156a <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001566:	2300      	movs	r3, #0
 8001568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	613b      	str	r3, [r7, #16]
        __asm volatile
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001576:	4618      	mov	r0, r3
 8001578:	3740      	adds	r7, #64	; 0x40
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b08e      	sub	sp, #56	; 0x38
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <xQueueGiveFromISR+0x28>
        __asm volatile
 8001592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001596:	f383 8811 	msr	BASEPRI, r3
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	f3bf 8f4f 	dsb	sy
 80015a2:	623b      	str	r3, [r7, #32]
 80015a4:	e7fe      	b.n	80015a4 <xQueueGiveFromISR+0x26>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80015a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <xQueueGiveFromISR+0x44>
 80015ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b2:	f383 8811 	msr	BASEPRI, r3
 80015b6:	f3bf 8f6f 	isb	sy
 80015ba:	f3bf 8f4f 	dsb	sy
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	e7fe      	b.n	80015c0 <xQueueGiveFromISR+0x42>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80015c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <xQueueGiveFromISR+0x54>
 80015ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <xQueueGiveFromISR+0x58>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <xQueueGiveFromISR+0x5a>
 80015d6:	2300      	movs	r3, #0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <xQueueGiveFromISR+0x72>
 80015dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e0:	f383 8811 	msr	BASEPRI, r3
 80015e4:	f3bf 8f6f 	isb	sy
 80015e8:	f3bf 8f4f 	dsb	sy
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	e7fe      	b.n	80015ee <xQueueGiveFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80015f0:	f7ff fd04 	bl	8000ffc <vPortValidateInterruptPriority>
        __asm volatile
 80015f4:	f3ef 8211 	mrs	r2, BASEPRI
 80015f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fc:	f383 8811 	msr	BASEPRI, r3
 8001600:	f3bf 8f6f 	isb	sy
 8001604:	f3bf 8f4f 	dsb	sy
 8001608:	617a      	str	r2, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 800160c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	429a      	cmp	r2, r3
 800161e:	d939      	bls.n	8001694 <xQueueGiveFromISR+0x116>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001632:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163a:	d112      	bne.n	8001662 <xQueueGiveFromISR+0xe4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	2b00      	cmp	r3, #0
 8001642:	d024      	beq.n	800168e <xQueueGiveFromISR+0x110>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001646:	3324      	adds	r3, #36	; 0x24
 8001648:	4618      	mov	r0, r3
 800164a:	f001 f835 	bl	80026b8 <xTaskRemoveFromEventList>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01c      	beq.n	800168e <xQueueGiveFromISR+0x110>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d019      	beq.n	800168e <xQueueGiveFromISR+0x110>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e015      	b.n	800168e <xQueueGiveFromISR+0x110>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001662:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001666:	2b7f      	cmp	r3, #127	; 0x7f
 8001668:	d109      	bne.n	800167e <xQueueGiveFromISR+0x100>
        __asm volatile
 800166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166e:	f383 8811 	msr	BASEPRI, r3
 8001672:	f3bf 8f6f 	isb	sy
 8001676:	f3bf 8f4f 	dsb	sy
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e7fe      	b.n	800167c <xQueueGiveFromISR+0xfe>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800167e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001682:	3301      	adds	r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	b25a      	sxtb	r2, r3
 8001688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800168e:	2301      	movs	r3, #1
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
 8001692:	e001      	b.n	8001698 <xQueueGiveFromISR+0x11a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001694:	2300      	movs	r3, #0
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80016a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3738      	adds	r7, #56	; 0x38
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d109      	bne.n	80016da <xQueueReceive+0x2e>
        __asm volatile
 80016c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ca:	f383 8811 	msr	BASEPRI, r3
 80016ce:	f3bf 8f6f 	isb	sy
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	e7fe      	b.n	80016d8 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d103      	bne.n	80016e8 <xQueueReceive+0x3c>
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <xQueueReceive+0x40>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <xQueueReceive+0x42>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <xQueueReceive+0x5a>
 80016f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016f6:	f383 8811 	msr	BASEPRI, r3
 80016fa:	f3bf 8f6f 	isb	sy
 80016fe:	f3bf 8f4f 	dsb	sy
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	e7fe      	b.n	8001704 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001706:	f001 f96d 	bl	80029e4 <xTaskGetSchedulerState>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <xQueueReceive+0x6a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <xQueueReceive+0x6e>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <xQueueReceive+0x70>
 800171a:	2300      	movs	r3, #0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <xQueueReceive+0x88>
 8001720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	e7fe      	b.n	8001732 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001734:	f7ff fbaa 	bl	8000e8c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01f      	beq.n	8001784 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001748:	f000 fa15 	bl	8001b76 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	1e5a      	subs	r2, r3, #1
 8001750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001752:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00f      	beq.n	800177c <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	3310      	adds	r3, #16
 8001760:	4618      	mov	r0, r3
 8001762:	f000 ffa9 	bl	80026b8 <xTaskRemoveFromEventList>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800176c:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <xQueueReceive+0x1b4>)
 800176e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800177c:	f7ff fbb4 	bl	8000ee8 <vPortExitCritical>
                return pdPASS;
 8001780:	2301      	movs	r3, #1
 8001782:	e069      	b.n	8001858 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800178a:	f7ff fbad 	bl	8000ee8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800178e:	2300      	movs	r3, #0
 8001790:	e062      	b.n	8001858 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4618      	mov	r0, r3
 800179e:	f000 ffed 	bl	800277c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80017a6:	f7ff fb9f 	bl	8000ee8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80017aa:	f000 fd6d 	bl	8002288 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80017ae:	f7ff fb6d 	bl	8000e8c <vPortEnterCritical>
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017be:	d103      	bne.n	80017c8 <xQueueReceive+0x11c>
 80017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d103      	bne.n	80017de <xQueueReceive+0x132>
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017de:	f7ff fb83 	bl	8000ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80017e2:	1d3a      	adds	r2, r7, #4
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 ffdc 	bl	80027a8 <xTaskCheckForTimeOut>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d123      	bne.n	800183e <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017f8:	f000 fa35 	bl	8001c66 <prvIsQueueEmpty>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d017      	beq.n	8001832 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	3324      	adds	r3, #36	; 0x24
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f000 ff06 	bl	800261c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001812:	f000 f9d6 	bl	8001bc2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001816:	f000 fd45 	bl	80022a4 <xTaskResumeAll>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d189      	bne.n	8001734 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <xQueueReceive+0x1b4>)
 8001822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f3bf 8f4f 	dsb	sy
 800182c:	f3bf 8f6f 	isb	sy
 8001830:	e780      	b.n	8001734 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001834:	f000 f9c5 	bl	8001bc2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001838:	f000 fd34 	bl	80022a4 <xTaskResumeAll>
 800183c:	e77a      	b.n	8001734 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800183e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001840:	f000 f9bf 	bl	8001bc2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001844:	f000 fd2e 	bl	80022a4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800184a:	f000 fa0c 	bl	8001c66 <prvIsQueueEmpty>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	f43f af6f 	beq.w	8001734 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001856:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001858:	4618      	mov	r0, r3
 800185a:	3730      	adds	r7, #48	; 0x30
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	e000ed04 	.word	0xe000ed04

08001864 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800186e:	2300      	movs	r3, #0
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001876:	2300      	movs	r3, #0
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <xQueueSemaphoreTake+0x30>
 8001880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001884:	f383 8811 	msr	BASEPRI, r3
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	623b      	str	r3, [r7, #32]
 8001892:	e7fe      	b.n	8001892 <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d009      	beq.n	80018b0 <xQueueSemaphoreTake+0x4c>
 800189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a0:	f383 8811 	msr	BASEPRI, r3
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e7fe      	b.n	80018ae <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018b0:	f001 f898 	bl	80029e4 <xTaskGetSchedulerState>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <xQueueSemaphoreTake+0x5c>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <xQueueSemaphoreTake+0x60>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <xQueueSemaphoreTake+0x62>
 80018c4:	2300      	movs	r3, #0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <xQueueSemaphoreTake+0x7a>
 80018ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ce:	f383 8811 	msr	BASEPRI, r3
 80018d2:	f3bf 8f6f 	isb	sy
 80018d6:	f3bf 8f4f 	dsb	sy
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	e7fe      	b.n	80018dc <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80018de:	f7ff fad5 	bl	8000e8c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80018e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80018e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d024      	beq.n	8001938 <xQueueSemaphoreTake+0xd4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80018ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f0:	1e5a      	subs	r2, r3, #1
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d104      	bne.n	8001908 <xQueueSemaphoreTake+0xa4>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80018fe:	f001 fa09 	bl	8002d14 <pvTaskIncrementMutexHeldCount>
 8001902:	4602      	mov	r2, r0
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00f      	beq.n	8001930 <xQueueSemaphoreTake+0xcc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001912:	3310      	adds	r3, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fecf 	bl	80026b8 <xTaskRemoveFromEventList>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <xQueueSemaphoreTake+0xcc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001920:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <xQueueSemaphoreTake+0x20c>)
 8001922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001930:	f7ff fada 	bl	8000ee8 <vPortExitCritical>
                return pdPASS;
 8001934:	2301      	movs	r3, #1
 8001936:	e096      	b.n	8001a66 <xQueueSemaphoreTake+0x202>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d110      	bne.n	8001960 <xQueueSemaphoreTake+0xfc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <xQueueSemaphoreTake+0xf4>
 8001944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001948:	f383 8811 	msr	BASEPRI, r3
 800194c:	f3bf 8f6f 	isb	sy
 8001950:	f3bf 8f4f 	dsb	sy
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e7fe      	b.n	8001956 <xQueueSemaphoreTake+0xf2>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001958:	f7ff fac6 	bl	8000ee8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800195c:	2300      	movs	r3, #0
 800195e:	e082      	b.n	8001a66 <xQueueSemaphoreTake+0x202>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <xQueueSemaphoreTake+0x110>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4618      	mov	r0, r3
 800196c:	f000 ff06 	bl	800277c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001970:	2301      	movs	r3, #1
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001974:	f7ff fab8 	bl	8000ee8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001978:	f000 fc86 	bl	8002288 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800197c:	f7ff fa86 	bl	8000e8c <vPortEnterCritical>
 8001980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001986:	b25b      	sxtb	r3, r3
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d103      	bne.n	8001996 <xQueueSemaphoreTake+0x132>
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800199c:	b25b      	sxtb	r3, r3
 800199e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a2:	d103      	bne.n	80019ac <xQueueSemaphoreTake+0x148>
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019ac:	f7ff fa9c 	bl	8000ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019b0:	463a      	mov	r2, r7
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fef5 	bl	80027a8 <xTaskCheckForTimeOut>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d132      	bne.n	8001a2a <xQueueSemaphoreTake+0x1c6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80019c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019c6:	f000 f94e 	bl	8001c66 <prvIsQueueEmpty>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d026      	beq.n	8001a1e <xQueueSemaphoreTake+0x1ba>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80019d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <xQueueSemaphoreTake+0x188>
                        {
                            taskENTER_CRITICAL();
 80019d8:	f7ff fa58 	bl	8000e8c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80019dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 f81d 	bl	8002a20 <xTaskPriorityInherit>
 80019e6:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80019e8:	f7ff fa7e 	bl	8000ee8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ee:	3324      	adds	r3, #36	; 0x24
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fe11 	bl	800261c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80019fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019fc:	f000 f8e1 	bl	8001bc2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001a00:	f000 fc50 	bl	80022a4 <xTaskResumeAll>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f47f af69 	bne.w	80018de <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <xQueueSemaphoreTake+0x20c>)
 8001a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f3bf 8f4f 	dsb	sy
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	e75f      	b.n	80018de <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a20:	f000 f8cf 	bl	8001bc2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001a24:	f000 fc3e 	bl	80022a4 <xTaskResumeAll>
 8001a28:	e759      	b.n	80018de <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a2c:	f000 f8c9 	bl	8001bc2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001a30:	f000 fc38 	bl	80022a4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a36:	f000 f916 	bl	8001c66 <prvIsQueueEmpty>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f43f af4e 	beq.w	80018de <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8001a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <xQueueSemaphoreTake+0x200>
                        {
                            taskENTER_CRITICAL();
 8001a48:	f7ff fa20 	bl	8000e8c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a4e:	f000 f811 	bl	8001a74 <prvGetDisinheritPriorityAfterTimeout>
 8001a52:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 f8ce 	bl	8002bfc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8001a60:	f7ff fa42 	bl	8000ee8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001a64:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3738      	adds	r7, #56	; 0x38
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000ed04 	.word	0xe000ed04

08001a74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1c3 030a 	rsb	r3, r3, #10
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e001      	b.n	8001a96 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001a96:	68fb      	ldr	r3, [r7, #12]
    }
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10d      	bne.n	8001adc <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d14d      	bne.n	8001b64 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 f81d 	bl	8002b0c <xTaskPriorityDisinherit>
 8001ad2:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	e043      	b.n	8001b64 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d119      	bne.n	8001b16 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6858      	ldr	r0, [r3, #4]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	461a      	mov	r2, r3
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	f001 fcbd 	bl	800346c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	441a      	add	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d32b      	bcc.n	8001b64 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	e026      	b.n	8001b64 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	68d8      	ldr	r0, [r3, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	f001 fca3 	bl	800346c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	425b      	negs	r3, r3
 8001b30:	441a      	add	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d207      	bcs.n	8001b52 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	441a      	add	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d105      	bne.n	8001b64 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001b6c:	697b      	ldr	r3, [r7, #20]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d018      	beq.n	8001bba <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	441a      	add	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d303      	bcc.n	8001baa <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6838      	ldr	r0, [r7, #0]
 8001bb6:	f001 fc59 	bl	800346c <memcpy>
    }
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001bca:	f7ff f95f 	bl	8000e8c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bd4:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bd6:	e011      	b.n	8001bfc <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3324      	adds	r3, #36	; 0x24
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fd67 	bl	80026b8 <xTaskRemoveFromEventList>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001bf0:	f000 fe3e 	bl	8002870 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	dce9      	bgt.n	8001bd8 <prvUnlockQueue+0x16>
 8001c04:	e000      	b.n	8001c08 <prvUnlockQueue+0x46>
                        break;
 8001c06:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	22ff      	movs	r2, #255	; 0xff
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001c10:	f7ff f96a 	bl	8000ee8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001c14:	f7ff f93a 	bl	8000e8c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c1e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c20:	e011      	b.n	8001c46 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d012      	beq.n	8001c50 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3310      	adds	r3, #16
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fd42 	bl	80026b8 <xTaskRemoveFromEventList>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001c3a:	f000 fe19 	bl	8002870 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dce9      	bgt.n	8001c22 <prvUnlockQueue+0x60>
 8001c4e:	e000      	b.n	8001c52 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001c50:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	22ff      	movs	r2, #255	; 0xff
 8001c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001c5a:	f7ff f945 	bl	8000ee8 <vPortExitCritical>
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c6e:	f7ff f90d 	bl	8000e8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e001      	b.n	8001c84 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001c84:	f7ff f930 	bl	8000ee8 <vPortExitCritical>

    return xReturn;
 8001c88:	68fb      	ldr	r3, [r7, #12]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001c9a:	f7ff f8f7 	bl	8000e8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d102      	bne.n	8001cb0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e001      	b.n	8001cb4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001cb4:	f7ff f918 	bl	8000ee8 <vPortExitCritical>

    return xReturn;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001cd2:	f7ff f8db 	bl	8000e8c <vPortEnterCritical>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d103      	bne.n	8001cec <vQueueWaitForMessageRestricted+0x2a>
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d103      	bne.n	8001d02 <vQueueWaitForMessageRestricted+0x40>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d02:	f7ff f8f1 	bl	8000ee8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3324      	adds	r3, #36	; 0x24
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fca4 	bl	8002664 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001d1c:	6978      	ldr	r0, [r7, #20]
 8001d1e:	f7ff ff50 	bl	8001bc2 <prvUnlockQueue>
    }
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d32:	e003      	b.n	8001d3c <LoopCopyDataInit>

08001d34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001d36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d3a:	3104      	adds	r1, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001d40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d44:	d3f6      	bcc.n	8001d34 <CopyDataInit>
	ldr	r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001d48:	e002      	b.n	8001d50 <LoopFillZerobss>

08001d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d4c:	f842 3b04 	str.w	r3, [r2], #4

08001d50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001d52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d54:	d3f9      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d56:	f000 f821 	bl	8001d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f001 fb53 	bl	8003404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d5e:	f7fe fed1 	bl	8000b04 <main>
	bx	lr
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d64:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001d68:	08003668 	.word	0x08003668
	ldr	r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d70:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001d74:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001d78:	200002a0 	.word	0x200002a0

08001d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_2_IRQHandler>

08001d7e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <MemManage_Handler+0x4>

08001d84 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <BusFault_Handler+0x4>

08001d8a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <UsageFault_Handler+0x4>

08001d90 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <SystemInit+0x5c>)
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <SystemInit+0x5c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001dac:	4912      	ldr	r1, [pc, #72]	; (8001df8 <SystemInit+0x5c>)
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <SystemInit+0x5c>)
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <SystemInit+0x60>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001db8:	4a0f      	ldr	r2, [pc, #60]	; (8001df8 <SystemInit+0x5c>)
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <SystemInit+0x5c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <SystemInit+0x5c>)
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <SystemInit+0x5c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001dd4:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <SystemInit+0x5c>)
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <SystemInit+0x5c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dde:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SystemInit+0x5c>)
 8001de2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001de6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001de8:	f000 f80c 	bl	8001e04 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SystemInit+0x64>)
 8001dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	f8ff0000 	.word	0xf8ff0000
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001e08:	f000 f802 	bl	8001e10 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e1e:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e20:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3301      	adds	r3, #1
 8001e38:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <SetSysClockTo72+0x38>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e46:	d1f0      	bne.n	8001e2a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001e54:	2301      	movs	r3, #1
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	e001      	b.n	8001e5e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d14b      	bne.n	8001efc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001e64:	4a29      	ldr	r2, [pc, #164]	; (8001f0c <SetSysClockTo72+0xfc>)
 8001e66:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <SetSysClockTo72+0xfc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001e70:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <SetSysClockTo72+0xfc>)
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <SetSysClockTo72+0xfc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <SetSysClockTo72+0xfc>)
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <SetSysClockTo72+0xfc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001e90:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001eae:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001eb0:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001eba:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ebc:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ec8:	bf00      	nop
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f9      	beq.n	8001eca <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 0303 	bic.w	r3, r3, #3
 8001ee0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001eee:	bf00      	nop
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SetSysClockTo72+0xf8>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d1f9      	bne.n	8001ef0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40022000 	.word	0x40022000

08001f10 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af04      	add	r7, sp, #16
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fd19 	bl	800095c <pvPortMalloc>
 8001f2a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00e      	beq.n	8001f50 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001f32:	2050      	movs	r0, #80	; 0x50
 8001f34:	f7fe fd12 	bl	800095c <pvPortMalloc>
 8001f38:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
 8001f46:	e005      	b.n	8001f54 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f7fe fd19 	bl	8000980 <vPortFree>
 8001f4e:	e001      	b.n	8001f54 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d013      	beq.n	8001f82 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9303      	str	r3, [sp, #12]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f80e 	bl	8001f92 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001f76:	69f8      	ldr	r0, [r7, #28]
 8001f78:	f000 f898 	bl	80020ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e002      	b.n	8001f88 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001f88:	69bb      	ldr	r3, [r7, #24]
    }
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b088      	sub	sp, #32
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001faa:	3b01      	subs	r3, #1
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f023 0307 	bic.w	r3, r3, #7
 8001fb8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d009      	beq.n	8001fd8 <prvInitialiseNewTask+0x46>
 8001fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e7fe      	b.n	8001fd6 <prvInitialiseNewTask+0x44>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01f      	beq.n	800201e <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e012      	b.n	800200a <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	7819      	ldrb	r1, [r3, #0]
 8001fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3334      	adds	r3, #52	; 0x34
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	3301      	adds	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d9e9      	bls.n	8001fe4 <prvInitialiseNewTask+0x52>
 8002010:	e000      	b.n	8002014 <prvInitialiseNewTask+0x82>
            {
                break;
 8002012:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800201c:	e003      	b.n	8002026 <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	2b09      	cmp	r3, #9
 800202a:	d901      	bls.n	8002030 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800202c:	2309      	movs	r3, #9
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
            pxNewTCB->uxMutexesHeld = 0;
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002044:	3304      	adds	r3, #4
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fccb 	bl	80009e2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	3318      	adds	r3, #24
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fcc6 	bl	80009e2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800205a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205e:	f1c3 020a 	rsb	r2, r3, #10
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206e:	3348      	adds	r3, #72	; 0x48
 8002070:	2204      	movs	r2, #4
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fa04 	bl	8003482 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	334c      	adds	r3, #76	; 0x4c
 800207e:	2201      	movs	r2, #1
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f001 f9fd 	bl	8003482 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	69b8      	ldr	r0, [r7, #24]
 800208e:	f7fe fe11 	bl	8000cb4 <pxPortInitialiseStack>
 8002092:	4602      	mov	r2, r0
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <prvInitialiseNewTask+0x112>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020a2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80020b4:	f7fe feea 	bl	8000e8c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <prvAddNewTaskToReadyList+0xb8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	4a29      	ldr	r2, [pc, #164]	; (8002164 <prvAddNewTaskToReadyList+0xb8>)
 80020c0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80020c2:	4b29      	ldr	r3, [pc, #164]	; (8002168 <prvAddNewTaskToReadyList+0xbc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80020ca:	4a27      	ldr	r2, [pc, #156]	; (8002168 <prvAddNewTaskToReadyList+0xbc>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <prvAddNewTaskToReadyList+0xb8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d110      	bne.n	80020fa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80020d8:	f000 fbee 	bl	80028b8 <prvInitialiseTaskLists>
 80020dc:	e00d      	b.n	80020fa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80020de:	4b23      	ldr	r3, [pc, #140]	; (800216c <prvAddNewTaskToReadyList+0xc0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <prvAddNewTaskToReadyList+0xbc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d802      	bhi.n	80020fa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80020f4:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <prvAddNewTaskToReadyList+0xbc>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <prvAddNewTaskToReadyList+0xc4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <prvAddNewTaskToReadyList+0xc4>)
 8002102:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	2201      	movs	r2, #1
 800210a:	409a      	lsls	r2, r3
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <prvAddNewTaskToReadyList+0xc8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4313      	orrs	r3, r2
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <prvAddNewTaskToReadyList+0xc8>)
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4a15      	ldr	r2, [pc, #84]	; (8002178 <prvAddNewTaskToReadyList+0xcc>)
 8002124:	441a      	add	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3304      	adds	r3, #4
 800212a:	4619      	mov	r1, r3
 800212c:	4610      	mov	r0, r2
 800212e:	f7fe fc64 	bl	80009fa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002132:	f7fe fed9 	bl	8000ee8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <prvAddNewTaskToReadyList+0xc0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00e      	beq.n	800215c <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <prvAddNewTaskToReadyList+0xbc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	429a      	cmp	r2, r3
 800214a:	d207      	bcs.n	800215c <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <prvAddNewTaskToReadyList+0xd0>)
 800214e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000228 	.word	0x20000228
 8002168:	200000ec 	.word	0x200000ec
 800216c:	20000234 	.word	0x20000234
 8002170:	20000244 	.word	0x20000244
 8002174:	20000230 	.word	0x20000230
 8002178:	200000f0 	.word	0x200000f0
 800217c:	e000ed04 	.word	0xe000ed04

08002180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <vTaskDelay+0x60>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <vTaskDelay+0x2e>
 800219a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219e:	f383 8811 	msr	BASEPRI, r3
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	f3bf 8f4f 	dsb	sy
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	e7fe      	b.n	80021ac <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80021ae:	f000 f86b 	bl	8002288 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021b2:	2100      	movs	r1, #0
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fdc1 	bl	8002d3c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80021ba:	f000 f873 	bl	80022a4 <xTaskResumeAll>
 80021be:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <vTaskDelay+0x64>)
 80021c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000250 	.word	0x20000250
 80021e4:	e000ed04 	.word	0xe000ed04

080021e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <vTaskStartScheduler+0x84>)
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2300      	movs	r3, #0
 80021f8:	2246      	movs	r2, #70	; 0x46
 80021fa:	491d      	ldr	r1, [pc, #116]	; (8002270 <vTaskStartScheduler+0x88>)
 80021fc:	481d      	ldr	r0, [pc, #116]	; (8002274 <vTaskStartScheduler+0x8c>)
 80021fe:	f7ff fe87 	bl	8001f10 <xTaskCreate>
 8002202:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d102      	bne.n	8002210 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800220a:	f000 fdfd 	bl	8002e08 <xTimerCreateTimerTask>
 800220e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d115      	bne.n	8002242 <vTaskStartScheduler+0x5a>
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <vTaskStartScheduler+0x90>)
 800222a:	f04f 32ff 	mov.w	r2, #4294967295
 800222e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <vTaskStartScheduler+0x94>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <vTaskStartScheduler+0x98>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800223c:	f7fe fdb6 	bl	8000dac <xPortStartScheduler>
 8002240:	e00d      	b.n	800225e <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d109      	bne.n	800225e <vTaskStartScheduler+0x76>
 800224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	e7fe      	b.n	800225c <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <vTaskStartScheduler+0x9c>)
 8002260:	681b      	ldr	r3, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000024c 	.word	0x2000024c
 8002270:	08003650 	.word	0x08003650
 8002274:	08002889 	.word	0x08002889
 8002278:	20000248 	.word	0x20000248
 800227c:	20000234 	.word	0x20000234
 8002280:	2000022c 	.word	0x2000022c
 8002284:	20000010 	.word	0x20000010

08002288 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <vTaskSuspendAll+0x18>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	4a03      	ldr	r2, [pc, #12]	; (80022a0 <vTaskSuspendAll+0x18>)
 8002294:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000250 	.word	0x20000250

080022a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <xTaskResumeAll+0x114>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <xTaskResumeAll+0x2a>
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	e7fe      	b.n	80022cc <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80022ce:	f7fe fddd 	bl	8000e8c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <xTaskResumeAll+0x114>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <xTaskResumeAll+0x114>)
 80022da:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <xTaskResumeAll+0x114>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d161      	bne.n	80023a8 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <xTaskResumeAll+0x118>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d05d      	beq.n	80023a8 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80022ec:	e02e      	b.n	800234c <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022ee:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <xTaskResumeAll+0x11c>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3318      	adds	r3, #24
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fbd8 	bl	8000ab0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3304      	adds	r3, #4
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fbd3 	bl	8000ab0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	2201      	movs	r2, #1
 8002310:	409a      	lsls	r2, r3
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <xTaskResumeAll+0x120>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <xTaskResumeAll+0x120>)
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <xTaskResumeAll+0x124>)
 800232a:	441a      	add	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3304      	adds	r3, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4610      	mov	r0, r2
 8002334:	f7fe fb61 	bl	80009fa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <xTaskResumeAll+0x128>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8002346:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <xTaskResumeAll+0x12c>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <xTaskResumeAll+0x11c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1cc      	bne.n	80022ee <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800235a:	f000 fb29 	bl	80029b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <xTaskResumeAll+0x130>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d010      	beq.n	800238c <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800236a:	f000 f845 	bl	80023f8 <xTaskIncrementTick>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <xTaskResumeAll+0x12c>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3b01      	subs	r3, #1
 800237e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f1      	bne.n	800236a <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <xTaskResumeAll+0x130>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <xTaskResumeAll+0x12c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002394:	2301      	movs	r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <xTaskResumeAll+0x134>)
 800239a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80023a8:	f7fe fd9e 	bl	8000ee8 <vPortExitCritical>

    return xAlreadyYielded;
 80023ac:	68bb      	ldr	r3, [r7, #8]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000250 	.word	0x20000250
 80023bc:	20000228 	.word	0x20000228
 80023c0:	200001e8 	.word	0x200001e8
 80023c4:	20000230 	.word	0x20000230
 80023c8:	200000f0 	.word	0x200000f0
 80023cc:	200000ec 	.word	0x200000ec
 80023d0:	2000023c 	.word	0x2000023c
 80023d4:	20000238 	.word	0x20000238
 80023d8:	e000ed04 	.word	0xe000ed04

080023dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <xTaskGetTickCount+0x18>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	2000022c 	.word	0x2000022c

080023f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002402:	4b4e      	ldr	r3, [pc, #312]	; (800253c <xTaskIncrementTick+0x144>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 808d 	bne.w	8002526 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <xTaskIncrementTick+0x148>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002414:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <xTaskIncrementTick+0x148>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11f      	bne.n	8002460 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <xTaskIncrementTick+0x14c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <xTaskIncrementTick+0x46>
 800242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242e:	f383 8811 	msr	BASEPRI, r3
 8002432:	f3bf 8f6f 	isb	sy
 8002436:	f3bf 8f4f 	dsb	sy
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	e7fe      	b.n	800243c <xTaskIncrementTick+0x44>
 800243e:	4b41      	ldr	r3, [pc, #260]	; (8002544 <xTaskIncrementTick+0x14c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	4b40      	ldr	r3, [pc, #256]	; (8002548 <xTaskIncrementTick+0x150>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3e      	ldr	r2, [pc, #248]	; (8002544 <xTaskIncrementTick+0x14c>)
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4a3e      	ldr	r2, [pc, #248]	; (8002548 <xTaskIncrementTick+0x150>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <xTaskIncrementTick+0x154>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	4a3c      	ldr	r2, [pc, #240]	; (800254c <xTaskIncrementTick+0x154>)
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	f000 faa8 	bl	80029b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <xTaskIncrementTick+0x158>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d348      	bcc.n	80024fc <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800246a:	4b36      	ldr	r3, [pc, #216]	; (8002544 <xTaskIncrementTick+0x14c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <xTaskIncrementTick+0x158>)
 8002476:	f04f 32ff 	mov.w	r2, #4294967295
 800247a:	601a      	str	r2, [r3, #0]
                    break;
 800247c:	e03e      	b.n	80024fc <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800247e:	4b31      	ldr	r3, [pc, #196]	; (8002544 <xTaskIncrementTick+0x14c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d203      	bcs.n	800249e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002496:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <xTaskIncrementTick+0x158>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800249c:	e02e      	b.n	80024fc <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3304      	adds	r3, #4
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe fb04 	bl	8000ab0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	3318      	adds	r3, #24
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fafb 	bl	8000ab0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	2201      	movs	r2, #1
 80024c0:	409a      	lsls	r2, r3
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <xTaskIncrementTick+0x15c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <xTaskIncrementTick+0x15c>)
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <xTaskIncrementTick+0x160>)
 80024da:	441a      	add	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	3304      	adds	r3, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f7fe fa89 	bl	80009fa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <xTaskIncrementTick+0x164>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3b9      	bcc.n	800246a <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80024f6:	2301      	movs	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024fa:	e7b6      	b.n	800246a <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <xTaskIncrementTick+0x164>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002502:	4915      	ldr	r1, [pc, #84]	; (8002558 <xTaskIncrementTick+0x160>)
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d901      	bls.n	8002518 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8002514:	2301      	movs	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <xTaskIncrementTick+0x168>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8002520:	2301      	movs	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e004      	b.n	8002530 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <xTaskIncrementTick+0x16c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <xTaskIncrementTick+0x16c>)
 800252e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002530:	697b      	ldr	r3, [r7, #20]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000250 	.word	0x20000250
 8002540:	2000022c 	.word	0x2000022c
 8002544:	200001e0 	.word	0x200001e0
 8002548:	200001e4 	.word	0x200001e4
 800254c:	20000240 	.word	0x20000240
 8002550:	20000248 	.word	0x20000248
 8002554:	20000230 	.word	0x20000230
 8002558:	200000f0 	.word	0x200000f0
 800255c:	200000ec 	.word	0x200000ec
 8002560:	2000023c 	.word	0x2000023c
 8002564:	20000238 	.word	0x20000238

08002568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <vTaskSwitchContext+0xa0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <vTaskSwitchContext+0xa4>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800257c:	e03e      	b.n	80025fc <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <vTaskSwitchContext+0xa4>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <vTaskSwitchContext+0xa8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	f1c3 031f 	rsb	r3, r3, #31
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	491e      	ldr	r1, [pc, #120]	; (8002614 <vTaskSwitchContext+0xac>)
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <vTaskSwitchContext+0x5a>
        __asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	e7fe      	b.n	80025c0 <vTaskSwitchContext+0x58>
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4a11      	ldr	r2, [pc, #68]	; (8002614 <vTaskSwitchContext+0xac>)
 80025ce:	4413      	add	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	3308      	adds	r3, #8
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d104      	bne.n	80025f2 <vTaskSwitchContext+0x8a>
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a07      	ldr	r2, [pc, #28]	; (8002618 <vTaskSwitchContext+0xb0>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000250 	.word	0x20000250
 800260c:	2000023c 	.word	0x2000023c
 8002610:	20000230 	.word	0x20000230
 8002614:	200000f0 	.word	0x200000f0
 8002618:	200000ec 	.word	0x200000ec

0800261c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <vTaskPlaceOnEventList+0x24>
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	e7fe      	b.n	800263e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <vTaskPlaceOnEventList+0x44>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3318      	adds	r3, #24
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fe f9f9 	bl	8000a40 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800264e:	2101      	movs	r1, #1
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	f000 fb73 	bl	8002d3c <prvAddCurrentTaskToDelayedList>
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200000ec 	.word	0x200000ec

08002664 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <vTaskPlaceOnEventListRestricted+0x26>
 8002676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e7fe      	b.n	8002688 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <vTaskPlaceOnEventListRestricted+0x50>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3318      	adds	r3, #24
 8002690:	4619      	mov	r1, r3
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f7fe f9b1 	bl	80009fa <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	68b8      	ldr	r0, [r7, #8]
 80026a8:	f000 fb48 	bl	8002d3c <prvAddCurrentTaskToDelayedList>
    }
 80026ac:	bf00      	nop
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200000ec 	.word	0x200000ec

080026b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <xTaskRemoveFromEventList+0x2a>
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	e7fe      	b.n	80026e0 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	3318      	adds	r3, #24
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe f9e2 	bl	8000ab0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <xTaskRemoveFromEventList+0xac>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d11c      	bne.n	800272e <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe f9d9 	bl	8000ab0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	2201      	movs	r2, #1
 8002704:	409a      	lsls	r2, r3
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <xTaskRemoveFromEventList+0xb0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	4a16      	ldr	r2, [pc, #88]	; (8002768 <xTaskRemoveFromEventList+0xb0>)
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4a13      	ldr	r2, [pc, #76]	; (800276c <xTaskRemoveFromEventList+0xb4>)
 800271e:	441a      	add	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	3304      	adds	r3, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f7fe f967 	bl	80009fa <vListInsertEnd>
 800272c:	e005      	b.n	800273a <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	3318      	adds	r3, #24
 8002732:	4619      	mov	r1, r3
 8002734:	480e      	ldr	r0, [pc, #56]	; (8002770 <xTaskRemoveFromEventList+0xb8>)
 8002736:	f7fe f960 	bl	80009fa <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <xTaskRemoveFromEventList+0xbc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	429a      	cmp	r2, r3
 8002746:	d905      	bls.n	8002754 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002748:	2301      	movs	r3, #1
 800274a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <xTaskRemoveFromEventList+0xc0>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e001      	b.n	8002758 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002758:	697b      	ldr	r3, [r7, #20]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000250 	.word	0x20000250
 8002768:	20000230 	.word	0x20000230
 800276c:	200000f0 	.word	0x200000f0
 8002770:	200001e8 	.word	0x200001e8
 8002774:	200000ec 	.word	0x200000ec
 8002778:	2000023c 	.word	0x2000023c

0800277c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <vTaskInternalSetTimeOutState+0x24>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <vTaskInternalSetTimeOutState+0x28>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	605a      	str	r2, [r3, #4]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000240 	.word	0x20000240
 80027a4:	2000022c 	.word	0x2000022c

080027a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <xTaskCheckForTimeOut+0x24>
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	e7fe      	b.n	80027ca <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <xTaskCheckForTimeOut+0x3e>
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e7fe      	b.n	80027e4 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80027e6:	f7fe fb51 	bl	8000e8c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <xTaskCheckForTimeOut+0xc0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002802:	d102      	bne.n	800280a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	e026      	b.n	8002858 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b17      	ldr	r3, [pc, #92]	; (800286c <xTaskCheckForTimeOut+0xc4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d00a      	beq.n	800282c <xTaskCheckForTimeOut+0x84>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	429a      	cmp	r2, r3
 800281e:	d805      	bhi.n	800282c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002820:	2301      	movs	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e015      	b.n	8002858 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	429a      	cmp	r2, r3
 8002834:	d90b      	bls.n	800284e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1ad2      	subs	r2, r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff9a 	bl	800277c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002848:	2300      	movs	r3, #0
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	e004      	b.n	8002858 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002854:	2301      	movs	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002858:	f7fe fb46 	bl	8000ee8 <vPortExitCritical>

    return xReturn;
 800285c:	69fb      	ldr	r3, [r7, #28]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000022c 	.word	0x2000022c
 800286c:	20000240 	.word	0x20000240

08002870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <vTaskMissedYield+0x14>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	2000023c 	.word	0x2000023c

08002888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002890:	f000 f852 	bl	8002938 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <prvIdleTask+0x28>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d9f9      	bls.n	8002890 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <prvIdleTask+0x2c>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80028ac:	e7f0      	b.n	8002890 <prvIdleTask+0x8>
 80028ae:	bf00      	nop
 80028b0:	200000f0 	.word	0x200000f0
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	e00c      	b.n	80028de <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <prvInitialiseTaskLists+0x60>)
 80028d0:	4413      	add	r3, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe f866 	bl	80009a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3301      	adds	r3, #1
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	d9ef      	bls.n	80028c4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80028e4:	480d      	ldr	r0, [pc, #52]	; (800291c <prvInitialiseTaskLists+0x64>)
 80028e6:	f7fe f85d 	bl	80009a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80028ea:	480d      	ldr	r0, [pc, #52]	; (8002920 <prvInitialiseTaskLists+0x68>)
 80028ec:	f7fe f85a 	bl	80009a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <prvInitialiseTaskLists+0x6c>)
 80028f2:	f7fe f857 	bl	80009a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80028f6:	480c      	ldr	r0, [pc, #48]	; (8002928 <prvInitialiseTaskLists+0x70>)
 80028f8:	f7fe f854 	bl	80009a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <prvInitialiseTaskLists+0x74>)
 80028fe:	f7fe f851 	bl	80009a4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <prvInitialiseTaskLists+0x78>)
 8002904:	4a05      	ldr	r2, [pc, #20]	; (800291c <prvInitialiseTaskLists+0x64>)
 8002906:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <prvInitialiseTaskLists+0x7c>)
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <prvInitialiseTaskLists+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200000f0 	.word	0x200000f0
 800291c:	200001b8 	.word	0x200001b8
 8002920:	200001cc 	.word	0x200001cc
 8002924:	200001e8 	.word	0x200001e8
 8002928:	200001fc 	.word	0x200001fc
 800292c:	20000214 	.word	0x20000214
 8002930:	200001e0 	.word	0x200001e0
 8002934:	200001e4 	.word	0x200001e4

08002938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800293e:	e019      	b.n	8002974 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002940:	f7fe faa4 	bl	8000e8c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <prvCheckTasksWaitingTermination+0x4c>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe f8ad 	bl	8000ab0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <prvCheckTasksWaitingTermination+0x50>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3b01      	subs	r3, #1
 800295c:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <prvCheckTasksWaitingTermination+0x50>)
 800295e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <prvCheckTasksWaitingTermination+0x54>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3b01      	subs	r3, #1
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <prvCheckTasksWaitingTermination+0x54>)
 8002968:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800296a:	f7fe fabd 	bl	8000ee8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f80e 	bl	8002990 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <prvCheckTasksWaitingTermination+0x54>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e1      	bne.n	8002940 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800297c:	bf00      	nop
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200001fc 	.word	0x200001fc
 8002988:	20000228 	.word	0x20000228
 800298c:	20000210 	.word	0x20000210

08002990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd ffef 	bl	8000980 <vPortFree>
                vPortFree( pxTCB );
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd ffec 	bl	8000980 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <prvResetNextTaskUnblockTime+0x2c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <prvResetNextTaskUnblockTime+0x30>)
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029c6:	e005      	b.n	80029d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <prvResetNextTaskUnblockTime+0x2c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <prvResetNextTaskUnblockTime+0x30>)
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	200001e0 	.word	0x200001e0
 80029e0:	20000248 	.word	0x20000248

080029e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <xTaskGetSchedulerState+0x34>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80029f2:	2301      	movs	r3, #1
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	e008      	b.n	8002a0a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <xTaskGetSchedulerState+0x38>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002a00:	2302      	movs	r3, #2
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	e001      	b.n	8002a0a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002a0a:	687b      	ldr	r3, [r7, #4]
    }
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000234 	.word	0x20000234
 8002a1c:	20000250 	.word	0x20000250

08002a20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d05e      	beq.n	8002af4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3a:	4b31      	ldr	r3, [pc, #196]	; (8002b00 <xTaskPriorityInherit+0xe0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d24e      	bcs.n	8002ae2 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	db06      	blt.n	8002a5a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <xTaskPriorityInherit+0xe0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	f1c3 020a 	rsb	r2, r3, #10
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6959      	ldr	r1, [r3, #20]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <xTaskPriorityInherit+0xe4>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4299      	cmp	r1, r3
 8002a70:	d12f      	bne.n	8002ad2 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f81a 	bl	8000ab0 <uxListRemove>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	2201      	movs	r2, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <xTaskPriorityInherit+0xe8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4013      	ands	r3, r2
 8002a94:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <xTaskPriorityInherit+0xe8>)
 8002a96:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <xTaskPriorityInherit+0xe0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <xTaskPriorityInherit+0xe8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	4a15      	ldr	r2, [pc, #84]	; (8002b08 <xTaskPriorityInherit+0xe8>)
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <xTaskPriorityInherit+0xe4>)
 8002ac2:	441a      	add	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f7fd ff95 	bl	80009fa <vListInsertEnd>
 8002ad0:	e004      	b.n	8002adc <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <xTaskPriorityInherit+0xe0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e008      	b.n	8002af4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <xTaskPriorityInherit+0xe0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d201      	bcs.n	8002af4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002af4:	68fb      	ldr	r3, [r7, #12]
    }
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200000ec 	.word	0x200000ec
 8002b04:	200000f0 	.word	0x200000f0
 8002b08:	20000230 	.word	0x20000230

08002b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d061      	beq.n	8002be6 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <xTaskPriorityDisinherit+0xe4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d009      	beq.n	8002b40 <xTaskPriorityDisinherit+0x34>
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e7fe      	b.n	8002b3e <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <xTaskPriorityDisinherit+0x50>
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	e7fe      	b.n	8002b5a <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	1e5a      	subs	r2, r3, #1
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d039      	beq.n	8002be6 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d135      	bne.n	8002be6 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd ff96 	bl	8000ab0 <uxListRemove>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	2201      	movs	r2, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43da      	mvns	r2, r3
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <xTaskPriorityDisinherit+0xe8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <xTaskPriorityDisinherit+0xe8>)
 8002b9e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	f1c3 020a 	rsb	r2, r3, #10
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	2201      	movs	r2, #1
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <xTaskPriorityDisinherit+0xe8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <xTaskPriorityDisinherit+0xe8>)
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <xTaskPriorityDisinherit+0xec>)
 8002bd4:	441a      	add	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f7fd ff0c 	bl	80009fa <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002be6:	697b      	ldr	r3, [r7, #20]
    }
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200000ec 	.word	0x200000ec
 8002bf4:	20000230 	.word	0x20000230
 8002bf8:	200000f0 	.word	0x200000f0

08002bfc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d075      	beq.n	8002d00 <vTaskPriorityDisinheritAfterTimeout+0x104>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8002c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c20:	f383 8811 	msr	BASEPRI, r3
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e7fe      	b.n	8002c2e <vTaskPriorityDisinheritAfterTimeout+0x32>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d202      	bcs.n	8002c40 <vTaskPriorityDisinheritAfterTimeout+0x44>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e002      	b.n	8002c46 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d057      	beq.n	8002d00 <vTaskPriorityDisinheritAfterTimeout+0x104>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d152      	bne.n	8002d00 <vTaskPriorityDisinheritAfterTimeout+0x104>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d109      	bne.n	8002c78 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	e7fe      	b.n	8002c76 <vTaskPriorityDisinheritAfterTimeout+0x7a>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db04      	blt.n	8002c96 <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 020a 	rsb	r2, r3, #10
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	6959      	ldr	r1, [r3, #20]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4299      	cmp	r1, r3
 8002caa:	d129      	bne.n	8002d00 <vTaskPriorityDisinheritAfterTimeout+0x104>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fefd 	bl	8000ab0 <uxListRemove>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10a      	bne.n	8002cd2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002cd0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4a06      	ldr	r2, [pc, #24]	; (8002d0c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8002cf2:	441a      	add	r2, r3
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7fd fe7d 	bl	80009fa <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002d00:	bf00      	nop
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200000ec 	.word	0x200000ec
 8002d0c:	200000f0 	.word	0x200000f0
 8002d10:	20000230 	.word	0x20000230

08002d14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d004      	beq.n	8002d2a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d26:	3201      	adds	r2, #1
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 8002d2a:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <pvTaskIncrementMutexHeldCount+0x24>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
    }
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200000ec 	.word	0x200000ec

08002d3c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <prvAddCurrentTaskToDelayedList+0xb0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3304      	adds	r3, #4
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd feac 	bl	8000ab0 <uxListRemove>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	2201      	movs	r2, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4013      	ands	r3, r2
 8002d72:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d74:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d10a      	bne.n	8002d94 <prvAddCurrentTaskToDelayedList+0x58>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	481a      	ldr	r0, [pc, #104]	; (8002df8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002d8e:	f7fd fe34 	bl	80009fa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002d92:	e026      	b.n	8002de2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d9c:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d209      	bcs.n	8002dc0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <prvAddCurrentTaskToDelayedList+0xc0>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3304      	adds	r3, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f7fd fe41 	bl	8000a40 <vListInsert>
}
 8002dbe:	e010      	b.n	8002de2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f7fd fe37 	bl	8000a40 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d202      	bcs.n	8002de2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002ddc:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6013      	str	r3, [r2, #0]
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000022c 	.word	0x2000022c
 8002df0:	200000ec 	.word	0x200000ec
 8002df4:	20000230 	.word	0x20000230
 8002df8:	20000214 	.word	0x20000214
 8002dfc:	200001e4 	.word	0x200001e4
 8002e00:	200001e0 	.word	0x200001e0
 8002e04:	20000248 	.word	0x20000248

08002e08 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002e12:	f000 facd 	bl	80033b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <xTimerCreateTimerTask+0x50>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <xTimerCreateTimerTask+0x54>)
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	2303      	movs	r3, #3
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2300      	movs	r3, #0
 8002e28:	2246      	movs	r2, #70	; 0x46
 8002e2a:	490d      	ldr	r1, [pc, #52]	; (8002e60 <xTimerCreateTimerTask+0x58>)
 8002e2c:	480d      	ldr	r0, [pc, #52]	; (8002e64 <xTimerCreateTimerTask+0x5c>)
 8002e2e:	f7ff f86f 	bl	8001f10 <xTaskCreate>
 8002e32:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <xTimerCreateTimerTask+0x46>
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	e7fe      	b.n	8002e4c <xTimerCreateTimerTask+0x44>
        return xReturn;
 8002e4e:	687b      	ldr	r3, [r7, #4]
    }
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000284 	.word	0x20000284
 8002e5c:	20000288 	.word	0x20000288
 8002e60:	08003658 	.word	0x08003658
 8002e64:	08002f99 	.word	0x08002f99

08002e68 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <xTimerGenericCommand+0x2c>
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	623b      	str	r3, [r7, #32]
 8002e92:	e7fe      	b.n	8002e92 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <xTimerGenericCommand+0x94>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d02a      	beq.n	8002ef2 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	dc18      	bgt.n	8002ee0 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002eae:	f7ff fd99 	bl	80029e4 <xTaskGetSchedulerState>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d109      	bne.n	8002ecc <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <xTimerGenericCommand+0x94>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	f107 0114 	add.w	r1, r7, #20
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec4:	f7fe f9bc 	bl	8001240 <xQueueGenericSend>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8002eca:	e012      	b.n	8002ef2 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <xTimerGenericCommand+0x94>)
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	f107 0114 	add.w	r1, r7, #20
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f7fe f9b2 	bl	8001240 <xQueueGenericSend>
 8002edc:	6278      	str	r0, [r7, #36]	; 0x24
 8002ede:	e008      	b.n	8002ef2 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <xTimerGenericCommand+0x94>)
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	f107 0114 	add.w	r1, r7, #20
 8002ee8:	2300      	movs	r3, #0
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	f7fe faa2 	bl	8001434 <xQueueGenericSendFromISR>
 8002ef0:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3728      	adds	r7, #40	; 0x28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000284 	.word	0x20000284

08002f00 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <prvProcessExpiredTimer+0x94>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd fdc9 	bl	8000ab0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d021      	beq.n	8002f70 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	18d1      	adds	r1, r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	6978      	ldr	r0, [r7, #20]
 8002f3a:	f000 f8cf 	bl	80030dc <prvInsertTimerInActiveList>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01e      	beq.n	8002f82 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f44:	2300      	movs	r3, #0
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff8a 	bl	8002e68 <xTimerGenericCommand>
 8002f54:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <prvProcessExpiredTimer+0x82>
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e7fe      	b.n	8002f6e <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	4798      	blx	r3
    }
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000027c 	.word	0x2000027c

08002f98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f857 	bl	8003058 <prvGetNextExpireTime>
 8002faa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f803 	bl	8002fbc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002fb6:	f000 f8d3 	bl	8003160 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002fba:	e7f1      	b.n	8002fa0 <prvTimerTask+0x8>

08002fbc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002fc6:	f7ff f95f 	bl	8002288 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002fca:	f107 0308 	add.w	r3, r7, #8
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f864 	bl	800309c <prvSampleTimeNow>
 8002fd4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d130      	bne.n	800303e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <prvProcessTimerOrBlockTask+0x3c>
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d806      	bhi.n	8002ff8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002fea:	f7ff f95b 	bl	80022a4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ff85 	bl	8002f00 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002ff6:	e024      	b.n	8003042 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <prvProcessTimerOrBlockTask+0x90>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <prvProcessTimerOrBlockTask+0x50>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <prvProcessTimerOrBlockTask+0x52>
 800300c:	2300      	movs	r3, #0
 800300e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <prvProcessTimerOrBlockTask+0x94>)
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	f7fe fe50 	bl	8001cc2 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003022:	f7ff f93f 	bl	80022a4 <xTaskResumeAll>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800302c:	4b09      	ldr	r3, [pc, #36]	; (8003054 <prvProcessTimerOrBlockTask+0x98>)
 800302e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	f3bf 8f6f 	isb	sy
    }
 800303c:	e001      	b.n	8003042 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800303e:	f7ff f931 	bl	80022a4 <xTaskResumeAll>
    }
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000280 	.word	0x20000280
 8003050:	20000284 	.word	0x20000284
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <prvGetNextExpireTime+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <prvGetNextExpireTime+0x16>
 800306a:	2201      	movs	r2, #1
 800306c:	e000      	b.n	8003070 <prvGetNextExpireTime+0x18>
 800306e:	2200      	movs	r2, #0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <prvGetNextExpireTime+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e001      	b.n	800308c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800308c:	68fb      	ldr	r3, [r7, #12]
    }
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	2000027c 	.word	0x2000027c

0800309c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80030a4:	f7ff f99a 	bl	80023dc <xTaskGetTickCount>
 80030a8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <prvSampleTimeNow+0x3c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d205      	bcs.n	80030c0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80030b4:	f000 f918 	bl	80032e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e002      	b.n	80030c6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80030c6:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <prvSampleTimeNow+0x3c>)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80030cc:	68fb      	ldr	r3, [r7, #12]
    }
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000028c 	.word	0x2000028c

080030dc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d812      	bhi.n	8003128 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	1ad2      	subs	r2, r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	429a      	cmp	r2, r3
 800310e:	d302      	bcc.n	8003116 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003110:	2301      	movs	r3, #1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e01b      	b.n	800314e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <prvInsertTimerInActiveList+0x7c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3304      	adds	r3, #4
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f7fd fc8d 	bl	8000a40 <vListInsert>
 8003126:	e012      	b.n	800314e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d206      	bcs.n	800313e <prvInsertTimerInActiveList+0x62>
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003138:	2301      	movs	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	e007      	b.n	800314e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <prvInsertTimerInActiveList+0x80>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3304      	adds	r3, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f7fd fc79 	bl	8000a40 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800314e:	697b      	ldr	r3, [r7, #20]
    }
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000280 	.word	0x20000280
 800315c:	2000027c 	.word	0x2000027c

08003160 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003160:	b580      	push	{r7, lr}
 8003162:	b08c      	sub	sp, #48	; 0x30
 8003164:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003166:	e0ac      	b.n	80032c2 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f2c0 80a9 	blt.w	80032c2 <prvProcessReceivedCommands+0x162>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	3304      	adds	r3, #4
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd fc95 	bl	8000ab0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff87 	bl	800309c <prvSampleTimeNow>
 800318e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b09      	cmp	r3, #9
 8003194:	f200 8094 	bhi.w	80032c0 <prvProcessReceivedCommands+0x160>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <prvProcessReceivedCommands+0x40>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	080031c9 	.word	0x080031c9
 80031ac:	0800323b 	.word	0x0800323b
 80031b0:	0800324f 	.word	0x0800324f
 80031b4:	08003297 	.word	0x08003297
 80031b8:	080031c9 	.word	0x080031c9
 80031bc:	080031c9 	.word	0x080031c9
 80031c0:	0800323b 	.word	0x0800323b
 80031c4:	0800324f 	.word	0x0800324f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	18d1      	adds	r1, r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031e8:	f7ff ff78 	bl	80030dc <prvInsertTimerInActiveList>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d067      	beq.n	80032c2 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031f8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d05c      	beq.n	80032c2 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	441a      	add	r2, r3
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2300      	movs	r3, #0
 8003216:	2100      	movs	r1, #0
 8003218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800321a:	f7ff fe25 	bl	8002e68 <xTimerGenericCommand>
 800321e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d14d      	bne.n	80032c2 <prvProcessReceivedCommands+0x162>
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	e7fe      	b.n	8003238 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 800324c:	e039      	b.n	80032c2 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	b2da      	uxtb	r2, r3
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <prvProcessReceivedCommands+0x122>
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e7fe      	b.n	8003280 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	18d1      	adds	r1, r2, r3
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003290:	f7ff ff24 	bl	80030dc <prvInsertTimerInActiveList>
                        break;
 8003294:	e015      	b.n	80032c2 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d103      	bne.n	80032ac <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 80032a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032a6:	f7fd fb6b 	bl	8000980 <vPortFree>
 80032aa:	e00a      	b.n	80032c2 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80032be:	e000      	b.n	80032c2 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
 80032c0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <prvProcessReceivedCommands+0x184>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f107 0108 	add.w	r1, r7, #8
 80032ca:	2200      	movs	r2, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe f9ed 	bl	80016ac <xQueueReceive>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f af47 	bne.w	8003168 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80032da:	bf00      	nop
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000284 	.word	0x20000284

080032e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032ee:	e047      	b.n	8003380 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <prvSwitchTimerLists+0xc0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <prvSwitchTimerLists+0xc0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	3304      	adds	r3, #4
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fbd1 	bl	8000ab0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	6938      	ldr	r0, [r7, #16]
 8003314:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02d      	beq.n	8003380 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4413      	add	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90e      	bls.n	8003354 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <prvSwitchTimerLists+0xc0>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	3304      	adds	r3, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f7fd fb77 	bl	8000a40 <vListInsert>
 8003352:	e015      	b.n	8003380 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	2100      	movs	r1, #0
 800335e:	6938      	ldr	r0, [r7, #16]
 8003360:	f7ff fd82 	bl	8002e68 <xTimerGenericCommand>
 8003364:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <prvSwitchTimerLists+0x98>
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	e7fe      	b.n	800337e <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003380:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <prvSwitchTimerLists+0xc0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1b2      	bne.n	80032f0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <prvSwitchTimerLists+0xc0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <prvSwitchTimerLists+0xc4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <prvSwitchTimerLists+0xc0>)
 8003396:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003398:	4a04      	ldr	r2, [pc, #16]	; (80033ac <prvSwitchTimerLists+0xc4>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6013      	str	r3, [r2, #0]
    }
 800339e:	bf00      	nop
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	2000027c 	.word	0x2000027c
 80033ac:	20000280 	.word	0x20000280

080033b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80033b4:	f7fd fd6a 	bl	8000e8c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <prvCheckForValidListAndQueue+0x40>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d113      	bne.n	80033e8 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 80033c0:	480c      	ldr	r0, [pc, #48]	; (80033f4 <prvCheckForValidListAndQueue+0x44>)
 80033c2:	f7fd faef 	bl	80009a4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80033c6:	480c      	ldr	r0, [pc, #48]	; (80033f8 <prvCheckForValidListAndQueue+0x48>)
 80033c8:	f7fd faec 	bl	80009a4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <prvCheckForValidListAndQueue+0x4c>)
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <prvCheckForValidListAndQueue+0x44>)
 80033d0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <prvCheckForValidListAndQueue+0x50>)
 80033d4:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <prvCheckForValidListAndQueue+0x48>)
 80033d6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80033d8:	2200      	movs	r2, #0
 80033da:	210c      	movs	r1, #12
 80033dc:	2005      	movs	r0, #5
 80033de:	f7fd feb1 	bl	8001144 <xQueueGenericCreate>
 80033e2:	4602      	mov	r2, r0
 80033e4:	4b02      	ldr	r3, [pc, #8]	; (80033f0 <prvCheckForValidListAndQueue+0x40>)
 80033e6:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80033e8:	f7fd fd7e 	bl	8000ee8 <vPortExitCritical>
    }
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000284 	.word	0x20000284
 80033f4:	20000254 	.word	0x20000254
 80033f8:	20000268 	.word	0x20000268
 80033fc:	2000027c 	.word	0x2000027c
 8003400:	20000280 	.word	0x20000280

08003404 <__libc_init_array>:
 8003404:	b570      	push	{r4, r5, r6, lr}
 8003406:	2500      	movs	r5, #0
 8003408:	4e0c      	ldr	r6, [pc, #48]	; (800343c <__libc_init_array+0x38>)
 800340a:	4c0d      	ldr	r4, [pc, #52]	; (8003440 <__libc_init_array+0x3c>)
 800340c:	1ba4      	subs	r4, r4, r6
 800340e:	10a4      	asrs	r4, r4, #2
 8003410:	42a5      	cmp	r5, r4
 8003412:	d109      	bne.n	8003428 <__libc_init_array+0x24>
 8003414:	f000 f908 	bl	8003628 <_init>
 8003418:	2500      	movs	r5, #0
 800341a:	4e0a      	ldr	r6, [pc, #40]	; (8003444 <__libc_init_array+0x40>)
 800341c:	4c0a      	ldr	r4, [pc, #40]	; (8003448 <__libc_init_array+0x44>)
 800341e:	1ba4      	subs	r4, r4, r6
 8003420:	10a4      	asrs	r4, r4, #2
 8003422:	42a5      	cmp	r5, r4
 8003424:	d105      	bne.n	8003432 <__libc_init_array+0x2e>
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800342c:	4798      	blx	r3
 800342e:	3501      	adds	r5, #1
 8003430:	e7ee      	b.n	8003410 <__libc_init_array+0xc>
 8003432:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003436:	4798      	blx	r3
 8003438:	3501      	adds	r5, #1
 800343a:	e7f2      	b.n	8003422 <__libc_init_array+0x1e>
 800343c:	08003660 	.word	0x08003660
 8003440:	08003660 	.word	0x08003660
 8003444:	08003660 	.word	0x08003660
 8003448:	08003664 	.word	0x08003664

0800344c <malloc>:
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <malloc+0xc>)
 800344e:	4601      	mov	r1, r0
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	f000 b86b 	b.w	800352c <_malloc_r>
 8003456:	bf00      	nop
 8003458:	20000014 	.word	0x20000014

0800345c <free>:
 800345c:	4b02      	ldr	r3, [pc, #8]	; (8003468 <free+0xc>)
 800345e:	4601      	mov	r1, r0
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	f000 b817 	b.w	8003494 <_free_r>
 8003466:	bf00      	nop
 8003468:	20000014 	.word	0x20000014

0800346c <memcpy>:
 800346c:	b510      	push	{r4, lr}
 800346e:	1e43      	subs	r3, r0, #1
 8003470:	440a      	add	r2, r1
 8003472:	4291      	cmp	r1, r2
 8003474:	d100      	bne.n	8003478 <memcpy+0xc>
 8003476:	bd10      	pop	{r4, pc}
 8003478:	f811 4b01 	ldrb.w	r4, [r1], #1
 800347c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003480:	e7f7      	b.n	8003472 <memcpy+0x6>

08003482 <memset>:
 8003482:	4603      	mov	r3, r0
 8003484:	4402      	add	r2, r0
 8003486:	4293      	cmp	r3, r2
 8003488:	d100      	bne.n	800348c <memset+0xa>
 800348a:	4770      	bx	lr
 800348c:	f803 1b01 	strb.w	r1, [r3], #1
 8003490:	e7f9      	b.n	8003486 <memset+0x4>
	...

08003494 <_free_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4605      	mov	r5, r0
 8003498:	2900      	cmp	r1, #0
 800349a:	d043      	beq.n	8003524 <_free_r+0x90>
 800349c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a0:	1f0c      	subs	r4, r1, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bfb8      	it	lt
 80034a6:	18e4      	addlt	r4, r4, r3
 80034a8:	f000 f8ae 	bl	8003608 <__malloc_lock>
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <_free_r+0x94>)
 80034ae:	6813      	ldr	r3, [r2, #0]
 80034b0:	4610      	mov	r0, r2
 80034b2:	b933      	cbnz	r3, 80034c2 <_free_r+0x2e>
 80034b4:	6063      	str	r3, [r4, #4]
 80034b6:	6014      	str	r4, [r2, #0]
 80034b8:	4628      	mov	r0, r5
 80034ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034be:	f000 b8a4 	b.w	800360a <__malloc_unlock>
 80034c2:	42a3      	cmp	r3, r4
 80034c4:	d90b      	bls.n	80034de <_free_r+0x4a>
 80034c6:	6821      	ldr	r1, [r4, #0]
 80034c8:	1862      	adds	r2, r4, r1
 80034ca:	4293      	cmp	r3, r2
 80034cc:	bf01      	itttt	eq
 80034ce:	681a      	ldreq	r2, [r3, #0]
 80034d0:	685b      	ldreq	r3, [r3, #4]
 80034d2:	1852      	addeq	r2, r2, r1
 80034d4:	6022      	streq	r2, [r4, #0]
 80034d6:	6063      	str	r3, [r4, #4]
 80034d8:	6004      	str	r4, [r0, #0]
 80034da:	e7ed      	b.n	80034b8 <_free_r+0x24>
 80034dc:	4613      	mov	r3, r2
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	b10a      	cbz	r2, 80034e6 <_free_r+0x52>
 80034e2:	42a2      	cmp	r2, r4
 80034e4:	d9fa      	bls.n	80034dc <_free_r+0x48>
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	1858      	adds	r0, r3, r1
 80034ea:	42a0      	cmp	r0, r4
 80034ec:	d10b      	bne.n	8003506 <_free_r+0x72>
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	4401      	add	r1, r0
 80034f2:	1858      	adds	r0, r3, r1
 80034f4:	4282      	cmp	r2, r0
 80034f6:	6019      	str	r1, [r3, #0]
 80034f8:	d1de      	bne.n	80034b8 <_free_r+0x24>
 80034fa:	6810      	ldr	r0, [r2, #0]
 80034fc:	6852      	ldr	r2, [r2, #4]
 80034fe:	4401      	add	r1, r0
 8003500:	6019      	str	r1, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	e7d8      	b.n	80034b8 <_free_r+0x24>
 8003506:	d902      	bls.n	800350e <_free_r+0x7a>
 8003508:	230c      	movs	r3, #12
 800350a:	602b      	str	r3, [r5, #0]
 800350c:	e7d4      	b.n	80034b8 <_free_r+0x24>
 800350e:	6820      	ldr	r0, [r4, #0]
 8003510:	1821      	adds	r1, r4, r0
 8003512:	428a      	cmp	r2, r1
 8003514:	bf01      	itttt	eq
 8003516:	6811      	ldreq	r1, [r2, #0]
 8003518:	6852      	ldreq	r2, [r2, #4]
 800351a:	1809      	addeq	r1, r1, r0
 800351c:	6021      	streq	r1, [r4, #0]
 800351e:	6062      	str	r2, [r4, #4]
 8003520:	605c      	str	r4, [r3, #4]
 8003522:	e7c9      	b.n	80034b8 <_free_r+0x24>
 8003524:	bd38      	pop	{r3, r4, r5, pc}
 8003526:	bf00      	nop
 8003528:	20000290 	.word	0x20000290

0800352c <_malloc_r>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	1ccd      	adds	r5, r1, #3
 8003530:	f025 0503 	bic.w	r5, r5, #3
 8003534:	3508      	adds	r5, #8
 8003536:	2d0c      	cmp	r5, #12
 8003538:	bf38      	it	cc
 800353a:	250c      	movcc	r5, #12
 800353c:	2d00      	cmp	r5, #0
 800353e:	4606      	mov	r6, r0
 8003540:	db01      	blt.n	8003546 <_malloc_r+0x1a>
 8003542:	42a9      	cmp	r1, r5
 8003544:	d903      	bls.n	800354e <_malloc_r+0x22>
 8003546:	230c      	movs	r3, #12
 8003548:	6033      	str	r3, [r6, #0]
 800354a:	2000      	movs	r0, #0
 800354c:	bd70      	pop	{r4, r5, r6, pc}
 800354e:	f000 f85b 	bl	8003608 <__malloc_lock>
 8003552:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <_malloc_r+0xb4>)
 8003554:	6814      	ldr	r4, [r2, #0]
 8003556:	4621      	mov	r1, r4
 8003558:	b991      	cbnz	r1, 8003580 <_malloc_r+0x54>
 800355a:	4c22      	ldr	r4, [pc, #136]	; (80035e4 <_malloc_r+0xb8>)
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	b91b      	cbnz	r3, 8003568 <_malloc_r+0x3c>
 8003560:	4630      	mov	r0, r6
 8003562:	f000 f841 	bl	80035e8 <_sbrk_r>
 8003566:	6020      	str	r0, [r4, #0]
 8003568:	4629      	mov	r1, r5
 800356a:	4630      	mov	r0, r6
 800356c:	f000 f83c 	bl	80035e8 <_sbrk_r>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	d126      	bne.n	80035c2 <_malloc_r+0x96>
 8003574:	230c      	movs	r3, #12
 8003576:	4630      	mov	r0, r6
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	f000 f846 	bl	800360a <__malloc_unlock>
 800357e:	e7e4      	b.n	800354a <_malloc_r+0x1e>
 8003580:	680b      	ldr	r3, [r1, #0]
 8003582:	1b5b      	subs	r3, r3, r5
 8003584:	d41a      	bmi.n	80035bc <_malloc_r+0x90>
 8003586:	2b0b      	cmp	r3, #11
 8003588:	d90f      	bls.n	80035aa <_malloc_r+0x7e>
 800358a:	600b      	str	r3, [r1, #0]
 800358c:	18cc      	adds	r4, r1, r3
 800358e:	50cd      	str	r5, [r1, r3]
 8003590:	4630      	mov	r0, r6
 8003592:	f000 f83a 	bl	800360a <__malloc_unlock>
 8003596:	f104 000b 	add.w	r0, r4, #11
 800359a:	1d23      	adds	r3, r4, #4
 800359c:	f020 0007 	bic.w	r0, r0, #7
 80035a0:	1ac3      	subs	r3, r0, r3
 80035a2:	d01b      	beq.n	80035dc <_malloc_r+0xb0>
 80035a4:	425a      	negs	r2, r3
 80035a6:	50e2      	str	r2, [r4, r3]
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
 80035aa:	428c      	cmp	r4, r1
 80035ac:	bf0b      	itete	eq
 80035ae:	6863      	ldreq	r3, [r4, #4]
 80035b0:	684b      	ldrne	r3, [r1, #4]
 80035b2:	6013      	streq	r3, [r2, #0]
 80035b4:	6063      	strne	r3, [r4, #4]
 80035b6:	bf18      	it	ne
 80035b8:	460c      	movne	r4, r1
 80035ba:	e7e9      	b.n	8003590 <_malloc_r+0x64>
 80035bc:	460c      	mov	r4, r1
 80035be:	6849      	ldr	r1, [r1, #4]
 80035c0:	e7ca      	b.n	8003558 <_malloc_r+0x2c>
 80035c2:	1cc4      	adds	r4, r0, #3
 80035c4:	f024 0403 	bic.w	r4, r4, #3
 80035c8:	42a0      	cmp	r0, r4
 80035ca:	d005      	beq.n	80035d8 <_malloc_r+0xac>
 80035cc:	1a21      	subs	r1, r4, r0
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 f80a 	bl	80035e8 <_sbrk_r>
 80035d4:	3001      	adds	r0, #1
 80035d6:	d0cd      	beq.n	8003574 <_malloc_r+0x48>
 80035d8:	6025      	str	r5, [r4, #0]
 80035da:	e7d9      	b.n	8003590 <_malloc_r+0x64>
 80035dc:	bd70      	pop	{r4, r5, r6, pc}
 80035de:	bf00      	nop
 80035e0:	20000290 	.word	0x20000290
 80035e4:	20000294 	.word	0x20000294

080035e8 <_sbrk_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	2300      	movs	r3, #0
 80035ec:	4c05      	ldr	r4, [pc, #20]	; (8003604 <_sbrk_r+0x1c>)
 80035ee:	4605      	mov	r5, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	6023      	str	r3, [r4, #0]
 80035f4:	f000 f80a 	bl	800360c <_sbrk>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d102      	bne.n	8003602 <_sbrk_r+0x1a>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	b103      	cbz	r3, 8003602 <_sbrk_r+0x1a>
 8003600:	602b      	str	r3, [r5, #0]
 8003602:	bd38      	pop	{r3, r4, r5, pc}
 8003604:	2000029c 	.word	0x2000029c

08003608 <__malloc_lock>:
 8003608:	4770      	bx	lr

0800360a <__malloc_unlock>:
 800360a:	4770      	bx	lr

0800360c <_sbrk>:
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <_sbrk+0x14>)
 800360e:	4602      	mov	r2, r0
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	b909      	cbnz	r1, 8003618 <_sbrk+0xc>
 8003614:	4903      	ldr	r1, [pc, #12]	; (8003624 <_sbrk+0x18>)
 8003616:	6019      	str	r1, [r3, #0]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	4402      	add	r2, r0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	4770      	bx	lr
 8003620:	20000298 	.word	0x20000298
 8003624:	200002a0 	.word	0x200002a0

08003628 <_init>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	bf00      	nop
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr

08003634 <_fini>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr
