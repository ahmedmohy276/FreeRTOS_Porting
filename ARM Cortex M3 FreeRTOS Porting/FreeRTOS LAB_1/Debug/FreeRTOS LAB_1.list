
FreeRTOS LAB_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08002be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e0  20000078  08002c58  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000258  08002c58  00020258  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007d49  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000133b  00000000  00000000  00027dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005f8  00000000  00000000  00029128  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000530  00000000  00000000  00029720  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003001  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000225b  00000000  00000000  0002cc51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002eeac  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000017b4  00000000  00000000  0002ef28  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000306dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ba0 	.word	0x08002ba0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08002ba0 	.word	0x08002ba0

08000150 <MGPIO_voidSetPinDirection>:
#include "DIO_config.h"



void MGPIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	460b      	mov	r3, r1
 800015c:	71bb      	strb	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d03a      	beq.n	80001de <MGPIO_voidSetPinDirection+0x8e>
 8000168:	2b02      	cmp	r3, #2
 800016a:	d06d      	beq.n	8000248 <MGPIO_voidSetPinDirection+0xf8>
 800016c:	2b00      	cmp	r3, #0
 800016e:	d000      	beq.n	8000172 <MGPIO_voidSetPinDirection+0x22>
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
			}
			break;
			
		default : 		break;
 8000170:	e0a4      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			if (Copy_u8Pin <= 7)
 8000172:	79bb      	ldrb	r3, [r7, #6]
 8000174:	2b07      	cmp	r3, #7
 8000176:	d815      	bhi.n	80001a4 <MGPIO_voidSetPinDirection+0x54>
				GPIOA->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000178:	4953      	ldr	r1, [pc, #332]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 800017a:	4b53      	ldr	r3, [pc, #332]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	79ba      	ldrb	r2, [r7, #6]
 8000180:	0092      	lsls	r2, r2, #2
 8000182:	200f      	movs	r0, #15
 8000184:	fa00 f202 	lsl.w	r2, r0, r2
 8000188:	43d2      	mvns	r2, r2
 800018a:	4013      	ands	r3, r2
 800018c:	600b      	str	r3, [r1, #0]
				GPIOA->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 800018e:	484e      	ldr	r0, [pc, #312]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 8000190:	4b4d      	ldr	r3, [pc, #308]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	7979      	ldrb	r1, [r7, #5]
 8000196:	79ba      	ldrb	r2, [r7, #6]
 8000198:	0092      	lsls	r2, r2, #2
 800019a:	fa01 f202 	lsl.w	r2, r1, r2
 800019e:	4313      	orrs	r3, r2
 80001a0:	6003      	str	r3, [r0, #0]
			break;
 80001a2:	e086      	b.n	80002b2 <MGPIO_voidSetPinDirection+0x162>
			else if (Copy_u8Pin <= 15)
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2b0f      	cmp	r3, #15
 80001a8:	f200 8083 	bhi.w	80002b2 <MGPIO_voidSetPinDirection+0x162>
				Copy_u8Pin -= 8;
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	3b08      	subs	r3, #8
 80001b0:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 80001b2:	4945      	ldr	r1, [pc, #276]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001b4:	4b44      	ldr	r3, [pc, #272]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	79ba      	ldrb	r2, [r7, #6]
 80001ba:	0092      	lsls	r2, r2, #2
 80001bc:	200f      	movs	r0, #15
 80001be:	fa00 f202 	lsl.w	r2, r0, r2
 80001c2:	43d2      	mvns	r2, r2
 80001c4:	4013      	ands	r3, r2
 80001c6:	604b      	str	r3, [r1, #4]
				GPIOA->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 80001c8:	483f      	ldr	r0, [pc, #252]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001ca:	4b3f      	ldr	r3, [pc, #252]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	7979      	ldrb	r1, [r7, #5]
 80001d0:	79ba      	ldrb	r2, [r7, #6]
 80001d2:	0092      	lsls	r2, r2, #2
 80001d4:	fa01 f202 	lsl.w	r2, r1, r2
 80001d8:	4313      	orrs	r3, r2
 80001da:	6043      	str	r3, [r0, #4]
			break;
 80001dc:	e069      	b.n	80002b2 <MGPIO_voidSetPinDirection+0x162>
			if (Copy_u8Pin <= 7)
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	d815      	bhi.n	8000210 <MGPIO_voidSetPinDirection+0xc0>
				GPIOB->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 80001e4:	4939      	ldr	r1, [pc, #228]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001e6:	4b39      	ldr	r3, [pc, #228]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	200f      	movs	r0, #15
 80001f0:	fa00 f202 	lsl.w	r2, r0, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4013      	ands	r3, r2
 80001f8:	600b      	str	r3, [r1, #0]
				GPIOB->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 80001fa:	4834      	ldr	r0, [pc, #208]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001fc:	4b33      	ldr	r3, [pc, #204]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	7979      	ldrb	r1, [r7, #5]
 8000202:	79ba      	ldrb	r2, [r7, #6]
 8000204:	0092      	lsls	r2, r2, #2
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	4313      	orrs	r3, r2
 800020c:	6003      	str	r3, [r0, #0]
			break;
 800020e:	e052      	b.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
			else if (Copy_u8Pin <= 15)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b0f      	cmp	r3, #15
 8000214:	d84f      	bhi.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
				Copy_u8Pin -= 8;
 8000216:	79bb      	ldrb	r3, [r7, #6]
 8000218:	3b08      	subs	r3, #8
 800021a:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 800021c:	492b      	ldr	r1, [pc, #172]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	0092      	lsls	r2, r2, #2
 8000226:	200f      	movs	r0, #15
 8000228:	fa00 f202 	lsl.w	r2, r0, r2
 800022c:	43d2      	mvns	r2, r2
 800022e:	4013      	ands	r3, r2
 8000230:	604b      	str	r3, [r1, #4]
				GPIOB->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	7979      	ldrb	r1, [r7, #5]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0092      	lsls	r2, r2, #2
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	4313      	orrs	r3, r2
 8000244:	6043      	str	r3, [r0, #4]
			break;
 8000246:	e036      	b.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
			if (Copy_u8Pin <= 7)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b07      	cmp	r3, #7
 800024c:	d815      	bhi.n	800027a <MGPIO_voidSetPinDirection+0x12a>
				GPIOC->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 800024e:	4920      	ldr	r1, [pc, #128]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	79ba      	ldrb	r2, [r7, #6]
 8000256:	0092      	lsls	r2, r2, #2
 8000258:	200f      	movs	r0, #15
 800025a:	fa00 f202 	lsl.w	r2, r0, r2
 800025e:	43d2      	mvns	r2, r2
 8000260:	4013      	ands	r3, r2
 8000262:	600b      	str	r3, [r1, #0]
				GPIOC->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	7979      	ldrb	r1, [r7, #5]
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4313      	orrs	r3, r2
 8000276:	6003      	str	r3, [r0, #0]
			break;
 8000278:	e01f      	b.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
			else if (Copy_u8Pin <= 15)
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	2b0f      	cmp	r3, #15
 800027e:	d81c      	bhi.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
				Copy_u8Pin -= 8;
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	3b08      	subs	r3, #8
 8000284:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000286:	4912      	ldr	r1, [pc, #72]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	200f      	movs	r0, #15
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	4013      	ands	r3, r2
 800029a:	604b      	str	r3, [r1, #4]
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	7979      	ldrb	r1, [r7, #5]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	0092      	lsls	r2, r2, #2
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4313      	orrs	r3, r2
 80002ae:	6043      	str	r3, [r0, #4]
			break;
 80002b0:	e003      	b.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
			break;
 80002b2:	bf00      	nop
 80002b4:	e002      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			break;
 80002b6:	bf00      	nop
 80002b8:	e000      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			break;
 80002ba:	bf00      	nop
	}
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40011000 	.word	0x40011000

080002d4 <MGPIO_voidSetPinValue>:


void MGPIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	460b      	mov	r3, r1
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	4613      	mov	r3, r2
 80002e4:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d018      	beq.n	800031e <MGPIO_voidSetPinValue+0x4a>
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d02a      	beq.n	8000346 <MGPIO_voidSetPinValue+0x72>
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d000      	beq.n	80002f6 <MGPIO_voidSetPinValue+0x22>
				{
					GPIOC->BSRR = (1 << Copy_u8Pin);
				}
				break;

			default : 		break;
 80002f4:	e040      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				if (Copy_u8Value == GPIO_LOW)
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <MGPIO_voidSetPinValue+0x36>
					GPIOA->BRR = (1 << Copy_u8Pin);
 80002fc:	4a21      	ldr	r2, [pc, #132]	; (8000384 <MGPIO_voidSetPinValue+0xb0>)
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	6153      	str	r3, [r2, #20]
				break;
 8000308:	e031      	b.n	800036e <MGPIO_voidSetPinValue+0x9a>
				else if (Copy_u8Value == GPIO_HIGH)
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d12e      	bne.n	800036e <MGPIO_voidSetPinValue+0x9a>
					GPIOA->BSRR = (1 << Copy_u8Pin);
 8000310:	4a1c      	ldr	r2, [pc, #112]	; (8000384 <MGPIO_voidSetPinValue+0xb0>)
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2101      	movs	r1, #1
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	6113      	str	r3, [r2, #16]
				break;
 800031c:	e027      	b.n	800036e <MGPIO_voidSetPinValue+0x9a>
				if (Copy_u8Value == GPIO_LOW)
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d106      	bne.n	8000332 <MGPIO_voidSetPinValue+0x5e>
					GPIOB->BRR = (1 << Copy_u8Pin);
 8000324:	4a18      	ldr	r2, [pc, #96]	; (8000388 <MGPIO_voidSetPinValue+0xb4>)
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	2101      	movs	r1, #1
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	6153      	str	r3, [r2, #20]
				break;
 8000330:	e01f      	b.n	8000372 <MGPIO_voidSetPinValue+0x9e>
				else if (Copy_u8Value == GPIO_HIGH)
 8000332:	797b      	ldrb	r3, [r7, #5]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d11c      	bne.n	8000372 <MGPIO_voidSetPinValue+0x9e>
					GPIOB->BSRR = (1 << Copy_u8Pin);
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <MGPIO_voidSetPinValue+0xb4>)
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	2101      	movs	r1, #1
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	6113      	str	r3, [r2, #16]
				break;
 8000344:	e015      	b.n	8000372 <MGPIO_voidSetPinValue+0x9e>
				if (Copy_u8Value == GPIO_LOW)
 8000346:	797b      	ldrb	r3, [r7, #5]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d106      	bne.n	800035a <MGPIO_voidSetPinValue+0x86>
					GPIOC->BRR = (1 << Copy_u8Pin);
 800034c:	4a0f      	ldr	r2, [pc, #60]	; (800038c <MGPIO_voidSetPinValue+0xb8>)
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	6153      	str	r3, [r2, #20]
				break;
 8000358:	e00d      	b.n	8000376 <MGPIO_voidSetPinValue+0xa2>
				else if (Copy_u8Value == GPIO_HIGH)
 800035a:	797b      	ldrb	r3, [r7, #5]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d10a      	bne.n	8000376 <MGPIO_voidSetPinValue+0xa2>
					GPIOC->BSRR = (1 << Copy_u8Pin);
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <MGPIO_voidSetPinValue+0xb8>)
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2101      	movs	r1, #1
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	6113      	str	r3, [r2, #16]
				break;
 800036c:	e003      	b.n	8000376 <MGPIO_voidSetPinValue+0xa2>
				break;
 800036e:	bf00      	nop
 8000370:	e002      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				break;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				break;
 8000376:	bf00      	nop
		}
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40011000 	.word	0x40011000

08000390 <MRCC_voidInitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void MRCC_voidInitSysClock(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	/* clear registers */
	RCC_CFGR = 0;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MRCC_voidInitSysClock+0x28>)
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
	RCC_CR = 0;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MRCC_voidInitSysClock+0x2c>)
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]

	#if		RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		RCC_CR = 0X00010000;								/* Enable HSE with no bypass */
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MRCC_voidInitSysClock+0x2c>)
 80003a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003a6:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0X00000001;								/* Select system clock switch */
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <MRCC_voidInitSysClock+0x28>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
			#error("you entered non valid value")
		#endif
	#else
		#error("you entered non valid clock type")
	#endif
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40021004 	.word	0x40021004
 80003bc:	40021000 	.word	0x40021000

080003c0 <MRCC_voidEnableClock>:


void MRCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	4613      	mov	r3, r2
 80003ce:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	2b1f      	cmp	r3, #31
 80003d4:	d825      	bhi.n	8000422 <MRCC_voidEnableClock+0x62>
	{
		switch (Copy_u8BusId)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d00e      	beq.n	80003fa <MRCC_voidEnableClock+0x3a>
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d016      	beq.n	800040e <MRCC_voidEnableClock+0x4e>
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d000      	beq.n	80003e6 <MRCC_voidEnableClock+0x26>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
				break;
				
			default        : 
				/* Return error */ 
				break;
 80003e4:	e01d      	b.n	8000422 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_AHBENR,Copy_u8PerId);
 80003e6:	4911      	ldr	r1, [pc, #68]	; (800042c <MRCC_voidEnableClock+0x6c>)
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <MRCC_voidEnableClock+0x6c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	79ba      	ldrb	r2, [r7, #6]
 80003ee:	2001      	movs	r0, #1
 80003f0:	fa00 f202 	lsl.w	r2, r0, r2
 80003f4:	4313      	orrs	r3, r2
 80003f6:	600b      	str	r3, [r1, #0]
				break;
 80003f8:	e013      	b.n	8000422 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB1ENR,Copy_u8PerId);
 80003fa:	490d      	ldr	r1, [pc, #52]	; (8000430 <MRCC_voidEnableClock+0x70>)
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MRCC_voidEnableClock+0x70>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	2001      	movs	r0, #1
 8000404:	fa00 f202 	lsl.w	r2, r0, r2
 8000408:	4313      	orrs	r3, r2
 800040a:	600b      	str	r3, [r1, #0]
				break;
 800040c:	e009      	b.n	8000422 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
 800040e:	4909      	ldr	r1, [pc, #36]	; (8000434 <MRCC_voidEnableClock+0x74>)
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MRCC_voidEnableClock+0x74>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	79ba      	ldrb	r2, [r7, #6]
 8000416:	2001      	movs	r0, #1
 8000418:	fa00 f202 	lsl.w	r2, r0, r2
 800041c:	4313      	orrs	r3, r2
 800041e:	600b      	str	r3, [r1, #0]
				break;
 8000420:	bf00      	nop
	
	else
	{
		/* Return error */
	}
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021014 	.word	0x40021014
 8000430:	4002101c 	.word	0x4002101c
 8000434:	40021018 	.word	0x40021018

08000438 <SEVSEG_voidInit>:
#include "SEVSEG_config.h"



void SEVSEG_voidInit(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinDirection(SEVSEG_PINA , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800043c:	2201      	movs	r2, #1
 800043e:	2100      	movs	r1, #0
 8000440:	2000      	movs	r0, #0
 8000442:	f7ff fe85 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PINB , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000446:	2201      	movs	r2, #1
 8000448:	2101      	movs	r1, #1
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff fe80 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PINC , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000450:	2201      	movs	r2, #1
 8000452:	2102      	movs	r1, #2
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff fe7b 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PIND , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800045a:	2201      	movs	r2, #1
 800045c:	2103      	movs	r1, #3
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff fe76 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PINE , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000464:	2201      	movs	r2, #1
 8000466:	2104      	movs	r1, #4
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff fe71 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PINF , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800046e:	2201      	movs	r2, #1
 8000470:	2105      	movs	r1, #5
 8000472:	2000      	movs	r0, #0
 8000474:	f7ff fe6c 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG_PING , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000478:	2201      	movs	r2, #1
 800047a:	2106      	movs	r1, #6
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe67 	bl	8000150 <MGPIO_voidSetPinDirection>
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <SEVSEG_voidDisplay>:



void SEVSEG_voidDisplay(u8 Copy_u8Num)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Bit[7] = {0} ;
 8000492:	f107 0308 	add.w	r3, r7, #8
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	f8c3 2003 	str.w	r2, [r3, #3]
	u8 Local_u8Index = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	73fb      	strb	r3, [r7, #15]
	switch (SEVSEG_TYPE)
	{
		case COMMON_CATHODE_SEVSEG :
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 80004a2:	2300      	movs	r3, #0
 80004a4:	73fb      	strb	r3, [r7, #15]
 80004a6:	e013      	b.n	80004d0 <SEVSEG_voidDisplay+0x48>
			{
				Local_u8Bit[Local_u8Index] = GET_BIT(array_val[Copy_u8Num] , Local_u8Index);
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	79fa      	ldrb	r2, [r7, #7]
 80004ac:	4921      	ldr	r1, [pc, #132]	; (8000534 <SEVSEG_voidDisplay+0xac>)
 80004ae:	5c8a      	ldrb	r2, [r1, r2]
 80004b0:	4611      	mov	r1, r2
 80004b2:	7bfa      	ldrb	r2, [r7, #15]
 80004b4:	fa41 f202 	asr.w	r2, r1, r2
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	f002 0201 	and.w	r2, r2, #1
 80004be:	b2d2      	uxtb	r2, r2
 80004c0:	f107 0110 	add.w	r1, r7, #16
 80004c4:	440b      	add	r3, r1
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 80004ca:	7bfb      	ldrb	r3, [r7, #15]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73fb      	strb	r3, [r7, #15]
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	2b06      	cmp	r3, #6
 80004d4:	d9e8      	bls.n	80004a8 <SEVSEG_voidDisplay+0x20>
			}
			
			MGPIO_voidSetPinValue(SEVSEG_PINA , Local_u8Bit[0]) ;
 80004d6:	7a3b      	ldrb	r3, [r7, #8]
 80004d8:	461a      	mov	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff fef9 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PINB , Local_u8Bit[1]) ;
 80004e2:	7a7b      	ldrb	r3, [r7, #9]
 80004e4:	461a      	mov	r2, r3
 80004e6:	2101      	movs	r1, #1
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff fef3 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PINC , Local_u8Bit[2]) ;
 80004ee:	7abb      	ldrb	r3, [r7, #10]
 80004f0:	461a      	mov	r2, r3
 80004f2:	2102      	movs	r1, #2
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff feed 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PIND , Local_u8Bit[3]) ;
 80004fa:	7afb      	ldrb	r3, [r7, #11]
 80004fc:	461a      	mov	r2, r3
 80004fe:	2103      	movs	r1, #3
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff fee7 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PINE , Local_u8Bit[4]) ;
 8000506:	7b3b      	ldrb	r3, [r7, #12]
 8000508:	461a      	mov	r2, r3
 800050a:	2104      	movs	r1, #4
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff fee1 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PINF , Local_u8Bit[5]) ;
 8000512:	7b7b      	ldrb	r3, [r7, #13]
 8000514:	461a      	mov	r2, r3
 8000516:	2105      	movs	r1, #5
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff fedb 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG_PING , Local_u8Bit[6]) ;
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	461a      	mov	r2, r3
 8000522:	2106      	movs	r1, #6
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff fed5 	bl	80002d4 <MGPIO_voidSetPinValue>
			break;
 800052a:	bf00      	nop
			MGPIO_voidSetPinValue(SEVSEG_PING , Local_u8Bit[6]) ;
			break;
		
		default : 			break;
	}
}
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000000 	.word	0x20000000

08000538 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8000540:	f001 fa74 	bl	8001a2c <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f002 fa3d 	bl	80029c4 <malloc>
 800054a:	4603      	mov	r3, r0
 800054c:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800054e:	f001 fa7b 	bl	8001a48 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
    if( pv )
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d006      	beq.n	8000578 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800056a:	f001 fa5f 	bl	8001a2c <vTaskSuspendAll>
        {
            free( pv );
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f002 fa30 	bl	80029d4 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8000574:	f001 fa68 	bl	8001a48 <xTaskResumeAll>
    }
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f103 0208 	add.w	r2, r3, #8
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f04f 32ff 	mov.w	r2, #4294967295
 8000598:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f103 0208 	add.w	r2, r3, #8
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f103 0208 	add.w	r2, r3, #8
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80005d6:	b480      	push	{r7}
 80005d8:	b085      	sub	sp, #20
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000632:	d103      	bne.n	800063c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e00c      	b.n	8000656 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3308      	adds	r3, #8
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	e002      	b.n	800064a <vListInsert+0x2e>
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	429a      	cmp	r2, r3
 8000654:	d9f6      	bls.n	8000644 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	6892      	ldr	r2, [r2, #8]
 80006a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	6852      	ldr	r2, [r2, #4]
 80006ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d103      	bne.n	80006c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
	...

080006e0 <main>:
void system_init(void);



int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af02      	add	r7, sp, #8
	system_init();
 80006e6:	f000 f829 	bl	800073c <system_init>
	/* create tasks */
	BaseType_t task1_ret = pdFALSE , task2_ret = pdFALSE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]

	task1_ret = xTaskCreate((pdTASK_CODE)task1,"task1",configMINIMAL_STACK_SIZE,NULL,TASK1_PRIORITY,&task1_handle);
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <main+0x44>)
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2303      	movs	r3, #3
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	2246      	movs	r2, #70	; 0x46
 80006fe:	490a      	ldr	r1, [pc, #40]	; (8000728 <main+0x48>)
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <main+0x4c>)
 8000702:	f000 ffd7 	bl	80016b4 <xTaskCreate>
 8000706:	6078      	str	r0, [r7, #4]
	task2_ret = xTaskCreate((pdTASK_CODE)task2,"task2",configMINIMAL_STACK_SIZE,NULL,TASK2_PRIORITY,&task2_handle);
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <main+0x50>)
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2302      	movs	r3, #2
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2300      	movs	r3, #0
 8000712:	2246      	movs	r2, #70	; 0x46
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <main+0x54>)
 8000716:	4808      	ldr	r0, [pc, #32]	; (8000738 <main+0x58>)
 8000718:	f000 ffcc 	bl	80016b4 <xTaskCreate>
 800071c:	6038      	str	r0, [r7, #0]
	if(task2_ret == pdTRUE)
	{
		/* task1 created successfully */
	}

	vTaskStartScheduler();
 800071e:	f001 f935 	bl	800198c <vTaskStartScheduler>

	for( ;; );
 8000722:	e7fe      	b.n	8000722 <main+0x42>
 8000724:	20000094 	.word	0x20000094
 8000728:	08002bb8 	.word	0x08002bb8
 800072c:	08000755 	.word	0x08000755
 8000730:	20000098 	.word	0x20000098
 8000734:	08002bc0 	.word	0x08002bc0
 8000738:	080007a5 	.word	0x080007a5

0800073c <system_init>:
}



void system_init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	/* Enable external crystal clock 8 mHZ */
	MRCC_voidInitSysClock();
 8000740:	f7ff fe26 	bl	8000390 <MRCC_voidInitSysClock>
	/* Enable portA clock */
	MRCC_voidEnableClock(RCC_APB2 , IOPAEN);
 8000744:	2102      	movs	r1, #2
 8000746:	2002      	movs	r0, #2
 8000748:	f7ff fe3a 	bl	80003c0 <MRCC_voidEnableClock>
	/* initialize 7-segment */
	SEVSEG_voidInit();
 800074c:	f7ff fe74 	bl	8000438 <SEVSEG_voidInit>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <task1>:



void task1(void *pvParameter)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	char num = 1 ;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		SEVSEG_voidDisplay(num);
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fe90 	bl	8000488 <SEVSEG_voidDisplay>

		/* software delay */
		for(u64 i=0 ; i< 350000 ; i++);
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	f04f 0400 	mov.w	r4, #0
 8000770:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000774:	e006      	b.n	8000784 <task1+0x30>
 8000776:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800077a:	3301      	adds	r3, #1
 800077c:	f144 0400 	adc.w	r4, r4, #0
 8000780:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000784:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000788:	4905      	ldr	r1, [pc, #20]	; (80007a0 <task1+0x4c>)
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	42a2      	cmp	r2, r4
 8000790:	bf08      	it	eq
 8000792:	4299      	cmpeq	r1, r3
 8000794:	d2ef      	bcs.n	8000776 <task1+0x22>

		vTaskDelay(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079a:	f001 f8c3 	bl	8001924 <vTaskDelay>
		SEVSEG_voidDisplay(num);
 800079e:	e7df      	b.n	8000760 <task1+0xc>
 80007a0:	0005572f 	.word	0x0005572f

080007a4 <task2>:
}



void task2(void *pvParameter)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	char num = 2 ;
 80007ac:	2302      	movs	r3, #2
 80007ae:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		SEVSEG_voidDisplay(num);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fe68 	bl	8000488 <SEVSEG_voidDisplay>

		vTaskDelay(500);
 80007b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007bc:	f001 f8b2 	bl	8001924 <vTaskDelay>
		SEVSEG_voidDisplay(num);
 80007c0:	e7f6      	b.n	80007b0 <task2+0xc>
	...

080007c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3b04      	subs	r3, #4
 80007d4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	3b04      	subs	r3, #4
 80007e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	f023 0201 	bic.w	r2, r3, #1
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3b04      	subs	r3, #4
 80007f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <pxPortInitialiseStack+0x54>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3b14      	subs	r3, #20
 80007fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3b20      	subs	r3, #32
 800080a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	0800081d 	.word	0x0800081d

0800081c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <prvTaskExitError+0x4c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800082e:	d009      	beq.n	8000844 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000834:	f383 8811 	msr	BASEPRI, r3
 8000838:	f3bf 8f6f 	isb	sy
 800083c:	f3bf 8f4f 	dsb	sy
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e7fe      	b.n	8000842 <prvTaskExitError+0x26>
 8000844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000848:	f383 8811 	msr	BASEPRI, r3
 800084c:	f3bf 8f6f 	isb	sy
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000856:	bf00      	nop
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0fc      	beq.n	8000858 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	2000000c 	.word	0x2000000c
 800086c:	00000000 	.word	0x00000000

08000870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <pxCurrentTCBConst2>)
 8000872:	6819      	ldr	r1, [r3, #0]
 8000874:	6808      	ldr	r0, [r1, #0]
 8000876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800087a:	f380 8809 	msr	PSP, r0
 800087e:	f3bf 8f6f 	isb	sy
 8000882:	f04f 0000 	mov.w	r0, #0
 8000886:	f380 8811 	msr	BASEPRI, r0
 800088a:	f04e 0e0d 	orr.w	lr, lr, #13
 800088e:	4770      	bx	lr

08000890 <pxCurrentTCBConst2>:
 8000890:	200000a4 	.word	0x200000a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop

08000898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <prvPortStartFirstTask+0x1c>)
 800089a:	6800      	ldr	r0, [r0, #0]
 800089c:	6800      	ldr	r0, [r0, #0]
 800089e:	f380 8808 	msr	MSP, r0
 80008a2:	b662      	cpsie	i
 80008a4:	b661      	cpsie	f
 80008a6:	f3bf 8f4f 	dsb	sy
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	df00      	svc	0
 80008b0:	bf00      	nop
 80008b2:	0000      	.short	0x0000
 80008b4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop

080008bc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80008c2:	4b31      	ldr	r3, [pc, #196]	; (8000988 <xPortStartScheduler+0xcc>)
 80008c4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	22ff      	movs	r2, #255	; 0xff
 80008d2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b29      	ldr	r3, [pc, #164]	; (800098c <xPortStartScheduler+0xd0>)
 80008e8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <xPortStartScheduler+0xd4>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80008f0:	e009      	b.n	8000906 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <xPortStartScheduler+0xd4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a25      	ldr	r2, [pc, #148]	; (8000990 <xPortStartScheduler+0xd4>)
 80008fa:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	b2db      	uxtb	r3, r3
 8000904:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	2b80      	cmp	r3, #128	; 0x80
 8000910:	d0ef      	beq.n	80008f2 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <xPortStartScheduler+0xd4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f1c3 0307 	rsb	r3, r3, #7
 800091a:	2b04      	cmp	r3, #4
 800091c:	d009      	beq.n	8000932 <xPortStartScheduler+0x76>
 800091e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	e7fe      	b.n	8000930 <xPortStartScheduler+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <xPortStartScheduler+0xd4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	021b      	lsls	r3, r3, #8
 8000938:	4a15      	ldr	r2, [pc, #84]	; (8000990 <xPortStartScheduler+0xd4>)
 800093a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <xPortStartScheduler+0xd4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <xPortStartScheduler+0xd4>)
 8000946:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000950:	4a10      	ldr	r2, [pc, #64]	; (8000994 <xPortStartScheduler+0xd8>)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <xPortStartScheduler+0xd8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800095a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <xPortStartScheduler+0xd8>)
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <xPortStartScheduler+0xd8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000966:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000968:	f000 f8b6 	bl	8000ad8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <xPortStartScheduler+0xdc>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000972:	f7ff ff91 	bl	8000898 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000976:	f001 f9c9 	bl	8001d0c <vTaskSwitchContext>
    prvTaskExitError();
 800097a:	f7ff ff4f 	bl	800081c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	e000e400 	.word	0xe000e400
 800098c:	2000009c 	.word	0x2000009c
 8000990:	200000a0 	.word	0x200000a0
 8000994:	e000ed20 	.word	0xe000ed20
 8000998:	2000000c 	.word	0x2000000c

0800099c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a6:	f383 8811 	msr	BASEPRI, r3
 80009aa:	f3bf 8f6f 	isb	sy
 80009ae:	f3bf 8f4f 	dsb	sy
 80009b2:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <vPortEnterCritical+0x54>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <vPortEnterCritical+0x54>)
 80009bc:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <vPortEnterCritical+0x54>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d10e      	bne.n	80009e4 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <vPortEnterCritical+0x58>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d009      	beq.n	80009e4 <vPortEnterCritical+0x48>
 80009d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	e7fe      	b.n	80009e2 <vPortEnterCritical+0x46>
    }
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2000000c 	.word	0x2000000c
 80009f4:	e000ed04 	.word	0xe000ed04

080009f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <vPortExitCritical+0x48>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d109      	bne.n	8000a1a <vPortExitCritical+0x22>
 8000a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0a:	f383 8811 	msr	BASEPRI, r3
 8000a0e:	f3bf 8f6f 	isb	sy
 8000a12:	f3bf 8f4f 	dsb	sy
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	e7fe      	b.n	8000a18 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <vPortExitCritical+0x48>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <vPortExitCritical+0x48>)
 8000a22:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <vPortExitCritical+0x48>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d104      	bne.n	8000a36 <vPortExitCritical+0x3e>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	2000000c 	.word	0x2000000c
	...

08000a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000a50:	f3ef 8009 	mrs	r0, PSP
 8000a54:	f3bf 8f6f 	isb	sy
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <pxCurrentTCBConst>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a60:	6010      	str	r0, [r2, #0]
 8000a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000a6a:	f380 8811 	msr	BASEPRI, r0
 8000a6e:	f001 f94d 	bl	8001d0c <vTaskSwitchContext>
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	f380 8811 	msr	BASEPRI, r0
 8000a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	6808      	ldr	r0, [r1, #0]
 8000a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a86:	f380 8809 	msr	PSP, r0
 8000a8a:	f3bf 8f6f 	isb	sy
 8000a8e:	4770      	bx	lr

08000a90 <pxCurrentTCBConst>:
 8000a90:	200000a4 	.word	0x200000a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop

08000a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
        __asm volatile
 8000a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa2:	f383 8811 	msr	BASEPRI, r3
 8000aa6:	f3bf 8f6f 	isb	sy
 8000aaa:	f3bf 8f4f 	dsb	sy
 8000aae:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000ab0:	f001 f874 	bl	8001b9c <xTaskIncrementTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SysTick_Handler+0x3c>)
 8000abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	e000ed04 	.word	0xe000ed04

08000ad8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <vPortSetupTimerInterrupt+0x28>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <vPortSetupTimerInterrupt+0x2c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <vPortSetupTimerInterrupt+0x30>)
 8000aea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000aee:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <vPortSetupTimerInterrupt+0x28>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	601a      	str	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010
 8000b04:	e000e018 	.word	0xe000e018
 8000b08:	e000e014 	.word	0xe000e014

08000b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000b12:	f3ef 8305 	mrs	r3, IPSR
 8000b16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b0f      	cmp	r3, #15
 8000b1c:	d913      	bls.n	8000b46 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <vPortValidateInterruptPriority+0x68>)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <vPortValidateInterruptPriority+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	7afa      	ldrb	r2, [r7, #11]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d209      	bcs.n	8000b46 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b36:	f383 8811 	msr	BASEPRI, r3
 8000b3a:	f3bf 8f6f 	isb	sy
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	e7fe      	b.n	8000b44 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <vPortValidateInterruptPriority+0x70>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <vPortValidateInterruptPriority+0x74>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d909      	bls.n	8000b6a <vPortValidateInterruptPriority+0x5e>
 8000b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b5a:	f383 8811 	msr	BASEPRI, r3
 8000b5e:	f3bf 8f6f 	isb	sy
 8000b62:	f3bf 8f4f 	dsb	sy
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	e7fe      	b.n	8000b68 <vPortValidateInterruptPriority+0x5c>
    }
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	e000e3f0 	.word	0xe000e3f0
 8000b78:	2000009c 	.word	0x2000009c
 8000b7c:	e000ed0c 	.word	0xe000ed0c
 8000b80:	200000a0 	.word	0x200000a0

08000b84 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <xQueueGenericReset+0x28>
 8000b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9c:	f383 8811 	msr	BASEPRI, r3
 8000ba0:	f3bf 8f6f 	isb	sy
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	e7fe      	b.n	8000baa <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8000bac:	f7ff fef6 	bl	800099c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb8:	68f9      	ldr	r1, [r7, #12]
 8000bba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bbc:	fb01 f303 	mul.w	r3, r1, r3
 8000bc0:	441a      	add	r2, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	68f9      	ldr	r1, [r7, #12]
 8000be0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000be2:	fb01 f303 	mul.w	r3, r1, r3
 8000be6:	441a      	add	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	22ff      	movs	r2, #255	; 0xff
 8000bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d114      	bne.n	8000c2c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d01a      	beq.n	8000c40 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3310      	adds	r3, #16
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f924 	bl	8001e5c <xTaskRemoveFromEventList>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d012      	beq.n	8000c40 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <xQueueGenericReset+0xcc>)
 8000c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	f3bf 8f4f 	dsb	sy
 8000c26:	f3bf 8f6f 	isb	sy
 8000c2a:	e009      	b.n	8000c40 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3310      	adds	r3, #16
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fca5 	bl	8000580 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	3324      	adds	r3, #36	; 0x24
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fca0 	bl	8000580 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000c40:	f7ff feda 	bl	80009f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000ed04 	.word	0xe000ed04

08000c54 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d109      	bne.n	8000c7c <xQueueGenericCreate+0x28>
 8000c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c6c:	f383 8811 	msr	BASEPRI, r3
 8000c70:	f3bf 8f6f 	isb	sy
 8000c74:	f3bf 8f4f 	dsb	sy
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	e7fe      	b.n	8000c7a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	fb02 f303 	mul.w	r3, r2, r3
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <xQueueGenericCreate+0x46>
 8000c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d101      	bne.n	8000c9e <xQueueGenericCreate+0x4a>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <xQueueGenericCreate+0x4c>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d109      	bne.n	8000cb8 <xQueueGenericCreate+0x64>
 8000ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca8:	f383 8811 	msr	BASEPRI, r3
 8000cac:	f3bf 8f6f 	isb	sy
 8000cb0:	f3bf 8f4f 	dsb	sy
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e7fe      	b.n	8000cb6 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d809      	bhi.n	8000cd8 <xQueueGenericCreate+0x84>
 8000cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc8:	f383 8811 	msr	BASEPRI, r3
 8000ccc:	f3bf 8f6f 	isb	sy
 8000cd0:	f3bf 8f4f 	dsb	sy
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e7fe      	b.n	8000cd6 <xQueueGenericCreate+0x82>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	3348      	adds	r3, #72	; 0x48
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fc2b 	bl	8000538 <pvPortMalloc>
 8000ce2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00d      	beq.n	8000d06 <xQueueGenericCreate+0xb2>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3348      	adds	r3, #72	; 0x48
 8000cf2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	68b9      	ldr	r1, [r7, #8]
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f000 f805 	bl	8000d10 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000d06:	6a3b      	ldr	r3, [r7, #32]
    }
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3728      	adds	r7, #40	; 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d103      	bne.n	8000d2c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e002      	b.n	8000d32 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d3e:	2101      	movs	r1, #1
 8000d40:	69b8      	ldr	r0, [r7, #24]
 8000d42:	f7ff ff1f 	bl	8000b84 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	; 0x38
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <xQueueGenericSend+0x30>
 8000d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d70:	f383 8811 	msr	BASEPRI, r3
 8000d74:	f3bf 8f6f 	isb	sy
 8000d78:	f3bf 8f4f 	dsb	sy
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d7e:	e7fe      	b.n	8000d7e <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d103      	bne.n	8000d8e <xQueueGenericSend+0x3e>
 8000d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <xQueueGenericSend+0x42>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <xQueueGenericSend+0x44>
 8000d92:	2300      	movs	r3, #0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <xQueueGenericSend+0x5c>
 8000d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9c:	f383 8811 	msr	BASEPRI, r3
 8000da0:	f3bf 8f6f 	isb	sy
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
 8000daa:	e7fe      	b.n	8000daa <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d103      	bne.n	8000dba <xQueueGenericSend+0x6a>
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <xQueueGenericSend+0x6e>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <xQueueGenericSend+0x70>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d109      	bne.n	8000dd8 <xQueueGenericSend+0x88>
 8000dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc8:	f383 8811 	msr	BASEPRI, r3
 8000dcc:	f3bf 8f6f 	isb	sy
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	e7fe      	b.n	8000dd6 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dd8:	f001 f9d6 	bl	8002188 <xTaskGetSchedulerState>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <xQueueGenericSend+0x98>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <xQueueGenericSend+0x9c>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <xQueueGenericSend+0x9e>
 8000dec:	2300      	movs	r3, #0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d109      	bne.n	8000e06 <xQueueGenericSend+0xb6>
 8000df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df6:	f383 8811 	msr	BASEPRI, r3
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	f3bf 8f4f 	dsb	sy
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	e7fe      	b.n	8000e04 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000e06:	f7ff fdc9 	bl	800099c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d302      	bcc.n	8000e1c <xQueueGenericSend+0xcc>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d129      	bne.n	8000e70 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e22:	f000 fa11 	bl	8001248 <prvCopyDataToQueue>
 8000e26:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d010      	beq.n	8000e52 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e32:	3324      	adds	r3, #36	; 0x24
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 f811 	bl	8001e5c <xTaskRemoveFromEventList>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d013      	beq.n	8000e68 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000e40:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <xQueueGenericSend+0x1f0>)
 8000e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	f3bf 8f4f 	dsb	sy
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	e00a      	b.n	8000e68 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d007      	beq.n	8000e68 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <xQueueGenericSend+0x1f0>)
 8000e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	f3bf 8f4f 	dsb	sy
 8000e64:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000e68:	f7ff fdc6 	bl	80009f8 <vPortExitCritical>
                return pdPASS;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e063      	b.n	8000f38 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d103      	bne.n	8000e7e <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000e76:	f7ff fdbf 	bl	80009f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e05c      	b.n	8000f38 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d106      	bne.n	8000e92 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 f849 	bl	8001f20 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000e92:	f7ff fdb1 	bl	80009f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000e96:	f000 fdc9 	bl	8001a2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000e9a:	f7ff fd7f 	bl	800099c <vPortEnterCritical>
 8000e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ea4:	b25b      	sxtb	r3, r3
 8000ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eaa:	d103      	bne.n	8000eb4 <xQueueGenericSend+0x164>
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d103      	bne.n	8000eca <xQueueGenericSend+0x17a>
 8000ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000eca:	f7ff fd95 	bl	80009f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ece:	1d3a      	adds	r2, r7, #4
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 f838 	bl	8001f4c <xTaskCheckForTimeOut>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d124      	bne.n	8000f2c <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ee4:	f000 faa8 	bl	8001438 <prvIsQueueFull>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d018      	beq.n	8000f20 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef0:	3310      	adds	r3, #16
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 ff62 	bl	8001dc0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000efe:	f000 fa33 	bl	8001368 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000f02:	f000 fda1 	bl	8001a48 <xTaskResumeAll>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f47f af7c 	bne.w	8000e06 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <xQueueGenericSend+0x1f0>)
 8000f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	f3bf 8f4f 	dsb	sy
 8000f1a:	f3bf 8f6f 	isb	sy
 8000f1e:	e772      	b.n	8000e06 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f22:	f000 fa21 	bl	8001368 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000f26:	f000 fd8f 	bl	8001a48 <xTaskResumeAll>
 8000f2a:	e76c      	b.n	8000e06 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f2e:	f000 fa1b 	bl	8001368 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000f32:	f000 fd89 	bl	8001a48 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000f36:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3738      	adds	r7, #56	; 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	e000ed04 	.word	0xe000ed04

08000f44 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b090      	sub	sp, #64	; 0x40
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d109      	bne.n	8000f70 <xQueueGenericSendFromISR+0x2c>
 8000f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f60:	f383 8811 	msr	BASEPRI, r3
 8000f64:	f3bf 8f6f 	isb	sy
 8000f68:	f3bf 8f4f 	dsb	sy
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f6e:	e7fe      	b.n	8000f6e <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d103      	bne.n	8000f7e <xQueueGenericSendFromISR+0x3a>
 8000f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <xQueueGenericSendFromISR+0x3e>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <xQueueGenericSendFromISR+0x40>
 8000f82:	2300      	movs	r3, #0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d109      	bne.n	8000f9c <xQueueGenericSendFromISR+0x58>
 8000f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f8c:	f383 8811 	msr	BASEPRI, r3
 8000f90:	f3bf 8f6f 	isb	sy
 8000f94:	f3bf 8f4f 	dsb	sy
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9a:	e7fe      	b.n	8000f9a <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d103      	bne.n	8000faa <xQueueGenericSendFromISR+0x66>
 8000fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <xQueueGenericSendFromISR+0x6a>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <xQueueGenericSendFromISR+0x6c>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d109      	bne.n	8000fc8 <xQueueGenericSendFromISR+0x84>
 8000fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb8:	f383 8811 	msr	BASEPRI, r3
 8000fbc:	f3bf 8f6f 	isb	sy
 8000fc0:	f3bf 8f4f 	dsb	sy
 8000fc4:	623b      	str	r3, [r7, #32]
 8000fc6:	e7fe      	b.n	8000fc6 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000fc8:	f7ff fda0 	bl	8000b0c <vPortValidateInterruptPriority>
        __asm volatile
 8000fcc:	f3ef 8211 	mrs	r2, BASEPRI
 8000fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd4:	f383 8811 	msr	BASEPRI, r3
 8000fd8:	f3bf 8f6f 	isb	sy
 8000fdc:	f3bf 8f4f 	dsb	sy
 8000fe0:	61fa      	str	r2, [r7, #28]
 8000fe2:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8000fe4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d302      	bcc.n	8000ffa <xQueueGenericSendFromISR+0xb6>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d13d      	bne.n	8001076 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001000:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001010:	f000 f91a 	bl	8001248 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001014:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d112      	bne.n	8001044 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	2b00      	cmp	r3, #0
 8001024:	d024      	beq.n	8001070 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001028:	3324      	adds	r3, #36	; 0x24
 800102a:	4618      	mov	r0, r3
 800102c:	f000 ff16 	bl	8001e5c <xTaskRemoveFromEventList>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d01c      	beq.n	8001070 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d019      	beq.n	8001070 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e015      	b.n	8001070 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001044:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001048:	2b7f      	cmp	r3, #127	; 0x7f
 800104a:	d109      	bne.n	8001060 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 800104c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001050:	f383 8811 	msr	BASEPRI, r3
 8001054:	f3bf 8f6f 	isb	sy
 8001058:	f3bf 8f4f 	dsb	sy
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e7fe      	b.n	800105e <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001060:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001064:	3301      	adds	r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	b25a      	sxtb	r2, r3
 800106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800106c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001070:	2301      	movs	r3, #1
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001074:	e001      	b.n	800107a <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001076:	2300      	movs	r3, #0
 8001078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107c:	613b      	str	r3, [r7, #16]
        __asm volatile
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001086:	4618      	mov	r0, r3
 8001088:	3740      	adds	r7, #64	; 0x40
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80010a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d109      	bne.n	80010be <xQueueReceive+0x2e>
        __asm volatile
 80010aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ae:	f383 8811 	msr	BASEPRI, r3
 80010b2:	f3bf 8f6f 	isb	sy
 80010b6:	f3bf 8f4f 	dsb	sy
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	e7fe      	b.n	80010bc <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <xQueueReceive+0x3c>
 80010c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <xQueueReceive+0x40>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <xQueueReceive+0x42>
 80010d0:	2300      	movs	r3, #0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <xQueueReceive+0x5a>
 80010d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010da:	f383 8811 	msr	BASEPRI, r3
 80010de:	f3bf 8f6f 	isb	sy
 80010e2:	f3bf 8f4f 	dsb	sy
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	e7fe      	b.n	80010e8 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010ea:	f001 f84d 	bl	8002188 <xTaskGetSchedulerState>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <xQueueReceive+0x6a>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <xQueueReceive+0x6e>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <xQueueReceive+0x70>
 80010fe:	2300      	movs	r3, #0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d109      	bne.n	8001118 <xQueueReceive+0x88>
 8001104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	e7fe      	b.n	8001116 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001118:	f7ff fc40 	bl	800099c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001120:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01f      	beq.n	8001168 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800112c:	f000 f8f6 	bl	800131c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	1e5a      	subs	r2, r3, #1
 8001134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001136:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00f      	beq.n	8001160 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	3310      	adds	r3, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fe89 	bl	8001e5c <xTaskRemoveFromEventList>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001150:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <xQueueReceive+0x1b4>)
 8001152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001160:	f7ff fc4a 	bl	80009f8 <vPortExitCritical>
                return pdPASS;
 8001164:	2301      	movs	r3, #1
 8001166:	e069      	b.n	800123c <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800116e:	f7ff fc43 	bl	80009f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001172:	2300      	movs	r3, #0
 8001174:	e062      	b.n	800123c <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fecd 	bl	8001f20 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001186:	2301      	movs	r3, #1
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800118a:	f7ff fc35 	bl	80009f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800118e:	f000 fc4d 	bl	8001a2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001192:	f7ff fc03 	bl	800099c <vPortEnterCritical>
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800119c:	b25b      	sxtb	r3, r3
 800119e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a2:	d103      	bne.n	80011ac <xQueueReceive+0x11c>
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d103      	bne.n	80011c2 <xQueueReceive+0x132>
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011c2:	f7ff fc19 	bl	80009f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011c6:	1d3a      	adds	r2, r7, #4
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 febc 	bl	8001f4c <xTaskCheckForTimeOut>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d123      	bne.n	8001222 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011dc:	f000 f916 	bl	800140c <prvIsQueueEmpty>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d017      	beq.n	8001216 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	3324      	adds	r3, #36	; 0x24
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fde6 	bl	8001dc0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80011f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011f6:	f000 f8b7 	bl	8001368 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80011fa:	f000 fc25 	bl	8001a48 <xTaskResumeAll>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d189      	bne.n	8001118 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <xQueueReceive+0x1b4>)
 8001206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	f3bf 8f4f 	dsb	sy
 8001210:	f3bf 8f6f 	isb	sy
 8001214:	e780      	b.n	8001118 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001218:	f000 f8a6 	bl	8001368 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800121c:	f000 fc14 	bl	8001a48 <xTaskResumeAll>
 8001220:	e77a      	b.n	8001118 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001224:	f000 f8a0 	bl	8001368 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001228:	f000 fc0e 	bl	8001a48 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800122c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800122e:	f000 f8ed 	bl	800140c <prvIsQueueEmpty>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	f43f af6f 	beq.w	8001118 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800123a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800123c:	4618      	mov	r0, r3
 800123e:	3730      	adds	r7, #48	; 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	e000ed04 	.word	0xe000ed04

08001248 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10d      	bne.n	8001282 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d14d      	bne.n	800130a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 ffa6 	bl	80021c4 <xTaskPriorityDisinherit>
 8001278:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	e043      	b.n	800130a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d119      	bne.n	80012bc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6858      	ldr	r0, [r3, #4]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	461a      	mov	r2, r3
 8001292:	68b9      	ldr	r1, [r7, #8]
 8001294:	f001 fba6 	bl	80029e4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	441a      	add	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d32b      	bcc.n	800130a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	e026      	b.n	800130a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68d8      	ldr	r0, [r3, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	461a      	mov	r2, r3
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	f001 fb8c 	bl	80029e4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	425b      	negs	r3, r3
 80012d6:	441a      	add	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	425b      	negs	r3, r3
 80012f2:	441a      	add	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d105      	bne.n	800130a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	3b01      	subs	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001312:	697b      	ldr	r3, [r7, #20]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d018      	beq.n	8001360 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	441a      	add	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	429a      	cmp	r2, r3
 8001346:	d303      	bcc.n	8001350 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68d9      	ldr	r1, [r3, #12]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	461a      	mov	r2, r3
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f001 fb42 	bl	80029e4 <memcpy>
    }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001370:	f7ff fb14 	bl	800099c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800137a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800137c:	e011      	b.n	80013a2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	2b00      	cmp	r3, #0
 8001384:	d012      	beq.n	80013ac <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3324      	adds	r3, #36	; 0x24
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fd66 	bl	8001e5c <xTaskRemoveFromEventList>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001396:	f000 fe3d 	bl	8002014 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	3b01      	subs	r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dce9      	bgt.n	800137e <prvUnlockQueue+0x16>
 80013aa:	e000      	b.n	80013ae <prvUnlockQueue+0x46>
                        break;
 80013ac:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	22ff      	movs	r2, #255	; 0xff
 80013b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80013b6:	f7ff fb1f 	bl	80009f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80013ba:	f7ff faef 	bl	800099c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013c4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80013c6:	e011      	b.n	80013ec <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d012      	beq.n	80013f6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3310      	adds	r3, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fd41 	bl	8001e5c <xTaskRemoveFromEventList>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80013e0:	f000 fe18 	bl	8002014 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80013ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dce9      	bgt.n	80013c8 <prvUnlockQueue+0x60>
 80013f4:	e000      	b.n	80013f8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80013f6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	22ff      	movs	r2, #255	; 0xff
 80013fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001400:	f7ff fafa 	bl	80009f8 <vPortExitCritical>
}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001414:	f7ff fac2 	bl	800099c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001420:	2301      	movs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e001      	b.n	800142a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800142a:	f7ff fae5 	bl	80009f8 <vPortExitCritical>

    return xReturn;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001440:	f7ff faac 	bl	800099c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	429a      	cmp	r2, r3
 800144e:	d102      	bne.n	8001456 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001450:	2301      	movs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e001      	b.n	800145a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800145a:	f7ff facd 	bl	80009f8 <vPortExitCritical>

    return xReturn;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001478:	f7ff fa90 	bl	800099c <vPortEnterCritical>
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001482:	b25b      	sxtb	r3, r3
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d103      	bne.n	8001492 <vQueueWaitForMessageRestricted+0x2a>
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001498:	b25b      	sxtb	r3, r3
 800149a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149e:	d103      	bne.n	80014a8 <vQueueWaitForMessageRestricted+0x40>
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014a8:	f7ff faa6 	bl	80009f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d106      	bne.n	80014c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3324      	adds	r3, #36	; 0x24
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fca3 	bl	8001e08 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff50 	bl	8001368 <prvUnlockQueue>
    }
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014d6:	e003      	b.n	80014e0 <LoopCopyDataInit>

080014d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80014da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014de:	3104      	adds	r1, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80014e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014e8:	d3f6      	bcc.n	80014d8 <CopyDataInit>
	ldr	r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80014ec:	e002      	b.n	80014f4 <LoopFillZerobss>

080014ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014f0:	f842 3b04 	str.w	r3, [r2], #4

080014f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80014f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014f8:	d3f9      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fa:	f000 f821 	bl	8001540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f001 fa3d 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001502:	f7ff f8ed 	bl	80006e0 <main>
	bx	lr
 8001506:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001508:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800150c:	08002be0 	.word	0x08002be0
	ldr	r0, =_sdata
 8001510:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001514:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001518:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800151c:	20000258 	.word	0x20000258

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>

08001522 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001526:	e7fe      	b.n	8001526 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800152c:	e7fe      	b.n	800152c <BusFault_Handler+0x4>

0800152e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001532:	e7fe      	b.n	8001532 <UsageFault_Handler+0x4>

08001534 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001544:	4a15      	ldr	r2, [pc, #84]	; (800159c <SystemInit+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <SystemInit+0x5c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001550:	4912      	ldr	r1, [pc, #72]	; (800159c <SystemInit+0x5c>)
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <SystemInit+0x5c>)
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <SystemInit+0x60>)
 8001558:	4013      	ands	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <SystemInit+0x5c>)
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <SystemInit+0x5c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <SystemInit+0x5c>)
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <SystemInit+0x5c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001578:	4a08      	ldr	r2, [pc, #32]	; (800159c <SystemInit+0x5c>)
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <SystemInit+0x5c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001582:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SystemInit+0x5c>)
 8001586:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800158a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800158c:	f000 f80c 	bl	80015a8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001590:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SystemInit+0x64>)
 8001592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001596:	609a      	str	r2, [r3, #8]
#endif 
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	f8ff0000 	.word	0xf8ff0000
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80015ac:	f000 f802 	bl	80015b4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015c2:	4a3a      	ldr	r2, [pc, #232]	; (80016ac <SetSysClockTo72+0xf8>)
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <SetSysClockTo72+0xf8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015ce:	4b37      	ldr	r3, [pc, #220]	; (80016ac <SetSysClockTo72+0xf8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3301      	adds	r3, #1
 80015dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <SetSysClockTo72+0x38>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015ea:	d1f0      	bne.n	80015ce <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <SetSysClockTo72+0xf8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80015f8:	2301      	movs	r3, #1
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	e001      	b.n	8001602 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d14b      	bne.n	80016a0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001608:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <SetSysClockTo72+0xfc>)
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <SetSysClockTo72+0xfc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001614:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <SetSysClockTo72+0xfc>)
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <SetSysClockTo72+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 0303 	bic.w	r3, r3, #3
 800161e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001620:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <SetSysClockTo72+0xfc>)
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <SetSysClockTo72+0xfc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800162c:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <SetSysClockTo72+0xf8>)
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <SetSysClockTo72+0xf8>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <SetSysClockTo72+0xf8>)
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <SetSysClockTo72+0xf8>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <SetSysClockTo72+0xf8>)
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <SetSysClockTo72+0xf8>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001646:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001648:	4a18      	ldr	r2, [pc, #96]	; (80016ac <SetSysClockTo72+0xf8>)
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <SetSysClockTo72+0xf8>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001652:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001654:	4a15      	ldr	r2, [pc, #84]	; (80016ac <SetSysClockTo72+0xf8>)
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <SetSysClockTo72+0xf8>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800165e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <SetSysClockTo72+0xf8>)
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <SetSysClockTo72+0xf8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800166c:	bf00      	nop
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <SetSysClockTo72+0xf8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f9      	beq.n	800166e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800167a:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <SetSysClockTo72+0xf8>)
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <SetSysClockTo72+0xf8>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 0303 	bic.w	r3, r3, #3
 8001684:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <SetSysClockTo72+0xf8>)
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <SetSysClockTo72+0xf8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001692:	bf00      	nop
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SetSysClockTo72+0xf8>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 030c 	and.w	r3, r3, #12
 800169c:	2b08      	cmp	r3, #8
 800169e:	d1f9      	bne.n	8001694 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40022000 	.word	0x40022000

080016b4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff35 	bl	8000538 <pvPortMalloc>
 80016ce:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00e      	beq.n	80016f4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80016d6:	2050      	movs	r0, #80	; 0x50
 80016d8:	f7fe ff2e 	bl	8000538 <pvPortMalloc>
 80016dc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ea:	e005      	b.n	80016f8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80016ec:	6978      	ldr	r0, [r7, #20]
 80016ee:	f7fe ff35 	bl	800055c <vPortFree>
 80016f2:	e001      	b.n	80016f8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d013      	beq.n	8001726 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80016fe:	88fa      	ldrh	r2, [r7, #6]
 8001700:	2300      	movs	r3, #0
 8001702:	9303      	str	r3, [sp, #12]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f80e 	bl	8001736 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800171a:	69f8      	ldr	r0, [r7, #28]
 800171c:	f000 f898 	bl	8001850 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001720:	2301      	movs	r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	e002      	b.n	800172c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800172c:	69bb      	ldr	r3, [r7, #24]
    }
 800172e:	4618      	mov	r0, r3
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b088      	sub	sp, #32
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800174e:	3b01      	subs	r3, #1
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f023 0307 	bic.w	r3, r3, #7
 800175c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	2b00      	cmp	r3, #0
 8001766:	d009      	beq.n	800177c <prvInitialiseNewTask+0x46>
 8001768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800176c:	f383 8811 	msr	BASEPRI, r3
 8001770:	f3bf 8f6f 	isb	sy
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e7fe      	b.n	800177a <prvInitialiseNewTask+0x44>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01f      	beq.n	80017c2 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e012      	b.n	80017ae <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	7819      	ldrb	r1, [r3, #0]
 8001790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	3334      	adds	r3, #52	; 0x34
 8001798:	460a      	mov	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	3301      	adds	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d9e9      	bls.n	8001788 <prvInitialiseNewTask+0x52>
 80017b4:	e000      	b.n	80017b8 <prvInitialiseNewTask+0x82>
            {
                break;
 80017b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80017b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80017c0:	e003      	b.n	80017ca <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	2b09      	cmp	r3, #9
 80017ce:	d901      	bls.n	80017d4 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80017d0:	2309      	movs	r3, #9
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80017da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
            pxNewTCB->uxMutexesHeld = 0;
 80017e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e2:	2200      	movs	r2, #0
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e8:	3304      	adds	r3, #4
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fee7 	bl	80005be <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80017f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f2:	3318      	adds	r3, #24
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fee2 	bl	80005be <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80017fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	f1c3 020a 	rsb	r2, r3, #10
 8001806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001808:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	3348      	adds	r3, #72	; 0x48
 8001814:	2204      	movs	r2, #4
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f001 f8ee 	bl	80029fa <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001820:	334c      	adds	r3, #76	; 0x4c
 8001822:	2201      	movs	r2, #1
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f001 f8e7 	bl	80029fa <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	68f9      	ldr	r1, [r7, #12]
 8001830:	69b8      	ldr	r0, [r7, #24]
 8001832:	f7fe ffc7 	bl	80007c4 <pxPortInitialiseStack>
 8001836:	4602      	mov	r2, r0
 8001838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <prvInitialiseNewTask+0x112>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001846:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001858:	f7ff f8a0 	bl	800099c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <prvAddNewTaskToReadyList+0xb8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	4a29      	ldr	r2, [pc, #164]	; (8001908 <prvAddNewTaskToReadyList+0xb8>)
 8001864:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <prvAddNewTaskToReadyList+0xbc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800186e:	4a27      	ldr	r2, [pc, #156]	; (800190c <prvAddNewTaskToReadyList+0xbc>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <prvAddNewTaskToReadyList+0xb8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d110      	bne.n	800189e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800187c:	f000 fbee 	bl	800205c <prvInitialiseTaskLists>
 8001880:	e00d      	b.n	800189e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <prvAddNewTaskToReadyList+0xc0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <prvAddNewTaskToReadyList+0xbc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	429a      	cmp	r2, r3
 8001896:	d802      	bhi.n	800189e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001898:	4a1c      	ldr	r2, [pc, #112]	; (800190c <prvAddNewTaskToReadyList+0xbc>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <prvAddNewTaskToReadyList+0xc4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <prvAddNewTaskToReadyList+0xc4>)
 80018a6:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	2201      	movs	r2, #1
 80018ae:	409a      	lsls	r2, r3
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <prvAddNewTaskToReadyList+0xc8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <prvAddNewTaskToReadyList+0xc8>)
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4a15      	ldr	r2, [pc, #84]	; (800191c <prvAddNewTaskToReadyList+0xcc>)
 80018c8:	441a      	add	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4610      	mov	r0, r2
 80018d2:	f7fe fe80 	bl	80005d6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80018d6:	f7ff f88f 	bl	80009f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <prvAddNewTaskToReadyList+0xc0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00e      	beq.n	8001900 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <prvAddNewTaskToReadyList+0xbc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <prvAddNewTaskToReadyList+0xd0>)
 80018f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200001e0 	.word	0x200001e0
 800190c:	200000a4 	.word	0x200000a4
 8001910:	200001ec 	.word	0x200001ec
 8001914:	200001fc 	.word	0x200001fc
 8001918:	200001e8 	.word	0x200001e8
 800191c:	200000a8 	.word	0x200000a8
 8001920:	e000ed04 	.word	0xe000ed04

08001924 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <vTaskDelay+0x60>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <vTaskDelay+0x2e>
 800193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001942:	f383 8811 	msr	BASEPRI, r3
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	e7fe      	b.n	8001950 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8001952:	f000 f86b 	bl	8001a2c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001956:	2100      	movs	r1, #0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 fcab 	bl	80022b4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800195e:	f000 f873 	bl	8001a48 <xTaskResumeAll>
 8001962:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d107      	bne.n	800197a <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <vTaskDelay+0x64>)
 800196c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f3bf 8f4f 	dsb	sy
 8001976:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000208 	.word	0x20000208
 8001988:	e000ed04 	.word	0xe000ed04

0800198c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <vTaskStartScheduler+0x84>)
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2300      	movs	r3, #0
 800199c:	2246      	movs	r2, #70	; 0x46
 800199e:	491d      	ldr	r1, [pc, #116]	; (8001a14 <vTaskStartScheduler+0x88>)
 80019a0:	481d      	ldr	r0, [pc, #116]	; (8001a18 <vTaskStartScheduler+0x8c>)
 80019a2:	f7ff fe87 	bl	80016b4 <xTaskCreate>
 80019a6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80019ae:	f000 fce7 	bl	8002380 <xTimerCreateTimerTask>
 80019b2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d115      	bne.n	80019e6 <vTaskStartScheduler+0x5a>
 80019ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <vTaskStartScheduler+0x90>)
 80019ce:	f04f 32ff 	mov.w	r2, #4294967295
 80019d2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <vTaskStartScheduler+0x94>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <vTaskStartScheduler+0x98>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80019e0:	f7fe ff6c 	bl	80008bc <xPortStartScheduler>
 80019e4:	e00d      	b.n	8001a02 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d109      	bne.n	8001a02 <vTaskStartScheduler+0x76>
 80019ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	e7fe      	b.n	8001a00 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <vTaskStartScheduler+0x9c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000204 	.word	0x20000204
 8001a14:	08002bc8 	.word	0x08002bc8
 8001a18:	0800202d 	.word	0x0800202d
 8001a1c:	20000200 	.word	0x20000200
 8001a20:	200001ec 	.word	0x200001ec
 8001a24:	200001e4 	.word	0x200001e4
 8001a28:	20000010 	.word	0x20000010

08001a2c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <vTaskSuspendAll+0x18>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <vTaskSuspendAll+0x18>)
 8001a38:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000208 	.word	0x20000208

08001a48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001a56:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <xTaskResumeAll+0x114>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <xTaskResumeAll+0x2a>
 8001a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	e7fe      	b.n	8001a70 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001a72:	f7fe ff93 	bl	800099c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <xTaskResumeAll+0x114>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <xTaskResumeAll+0x114>)
 8001a7e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <xTaskResumeAll+0x114>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d161      	bne.n	8001b4c <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <xTaskResumeAll+0x118>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d05d      	beq.n	8001b4c <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a90:	e02e      	b.n	8001af0 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <xTaskResumeAll+0x11c>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fdf4 	bl	800068c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fdef 	bl	800068c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <xTaskResumeAll+0x120>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	4a2a      	ldr	r2, [pc, #168]	; (8001b68 <xTaskResumeAll+0x120>)
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <xTaskResumeAll+0x124>)
 8001ace:	441a      	add	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f7fe fd7d 	bl	80005d6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <xTaskResumeAll+0x128>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d302      	bcc.n	8001af0 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <xTaskResumeAll+0x12c>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <xTaskResumeAll+0x11c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1cc      	bne.n	8001a92 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001afe:	f000 fb29 	bl	8002154 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <xTaskResumeAll+0x130>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001b0e:	f000 f845 	bl	8001b9c <xTaskIncrementTick>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <xTaskResumeAll+0x12c>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f1      	bne.n	8001b0e <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <xTaskResumeAll+0x130>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <xTaskResumeAll+0x12c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <xTaskResumeAll+0x134>)
 8001b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001b4c:	f7fe ff54 	bl	80009f8 <vPortExitCritical>

    return xAlreadyYielded;
 8001b50:	68bb      	ldr	r3, [r7, #8]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000208 	.word	0x20000208
 8001b60:	200001e0 	.word	0x200001e0
 8001b64:	200001a0 	.word	0x200001a0
 8001b68:	200001e8 	.word	0x200001e8
 8001b6c:	200000a8 	.word	0x200000a8
 8001b70:	200000a4 	.word	0x200000a4
 8001b74:	200001f4 	.word	0x200001f4
 8001b78:	200001f0 	.word	0x200001f0
 8001b7c:	e000ed04 	.word	0xe000ed04

08001b80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001b86:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <xTaskGetTickCount+0x18>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	200001e4 	.word	0x200001e4

08001b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <xTaskIncrementTick+0x144>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 808d 	bne.w	8001cca <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001bb0:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <xTaskIncrementTick+0x148>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <xTaskIncrementTick+0x148>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d11f      	bne.n	8001c04 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001bc4:	4b48      	ldr	r3, [pc, #288]	; (8001ce8 <xTaskIncrementTick+0x14c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <xTaskIncrementTick+0x46>
 8001bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd2:	f383 8811 	msr	BASEPRI, r3
 8001bd6:	f3bf 8f6f 	isb	sy
 8001bda:	f3bf 8f4f 	dsb	sy
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	e7fe      	b.n	8001be0 <xTaskIncrementTick+0x44>
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <xTaskIncrementTick+0x14c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	4b40      	ldr	r3, [pc, #256]	; (8001cec <xTaskIncrementTick+0x150>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a3e      	ldr	r2, [pc, #248]	; (8001ce8 <xTaskIncrementTick+0x14c>)
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4a3e      	ldr	r2, [pc, #248]	; (8001cec <xTaskIncrementTick+0x150>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <xTaskIncrementTick+0x154>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	4a3c      	ldr	r2, [pc, #240]	; (8001cf0 <xTaskIncrementTick+0x154>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	f000 faa8 	bl	8002154 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001c04:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <xTaskIncrementTick+0x158>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d348      	bcc.n	8001ca0 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <xTaskIncrementTick+0x14c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d104      	bne.n	8001c22 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <xTaskIncrementTick+0x158>)
 8001c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1e:	601a      	str	r2, [r3, #0]
                    break;
 8001c20:	e03e      	b.n	8001ca0 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <xTaskIncrementTick+0x14c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d203      	bcs.n	8001c42 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001c3a:	4a2e      	ldr	r2, [pc, #184]	; (8001cf4 <xTaskIncrementTick+0x158>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001c40:	e02e      	b.n	8001ca0 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3304      	adds	r3, #4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fd20 	bl	800068c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3318      	adds	r3, #24
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fd17 	bl	800068c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	2201      	movs	r2, #1
 8001c64:	409a      	lsls	r2, r3
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <xTaskIncrementTick+0x15c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <xTaskIncrementTick+0x15c>)
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <xTaskIncrementTick+0x160>)
 8001c7e:	441a      	add	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3304      	adds	r3, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f7fe fca5 	bl	80005d6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <xTaskIncrementTick+0x164>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3b9      	bcc.n	8001c0e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c9e:	e7b6      	b.n	8001c0e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <xTaskIncrementTick+0x164>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca6:	4915      	ldr	r1, [pc, #84]	; (8001cfc <xTaskIncrementTick+0x160>)
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d901      	bls.n	8001cbc <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <xTaskIncrementTick+0x168>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e004      	b.n	8001cd4 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <xTaskIncrementTick+0x16c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <xTaskIncrementTick+0x16c>)
 8001cd2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001cd4:	697b      	ldr	r3, [r7, #20]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000208 	.word	0x20000208
 8001ce4:	200001e4 	.word	0x200001e4
 8001ce8:	20000198 	.word	0x20000198
 8001cec:	2000019c 	.word	0x2000019c
 8001cf0:	200001f8 	.word	0x200001f8
 8001cf4:	20000200 	.word	0x20000200
 8001cf8:	200001e8 	.word	0x200001e8
 8001cfc:	200000a8 	.word	0x200000a8
 8001d00:	200000a4 	.word	0x200000a4
 8001d04:	200001f4 	.word	0x200001f4
 8001d08:	200001f0 	.word	0x200001f0

08001d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <vTaskSwitchContext+0xa0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <vTaskSwitchContext+0xa4>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001d20:	e03e      	b.n	8001da0 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <vTaskSwitchContext+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <vTaskSwitchContext+0xa8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001d36:	7afb      	ldrb	r3, [r7, #11]
 8001d38:	f1c3 031f 	rsb	r3, r3, #31
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	491e      	ldr	r1, [pc, #120]	; (8001db8 <vTaskSwitchContext+0xac>)
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <vTaskSwitchContext+0x5a>
        __asm volatile
 8001d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d56:	f383 8811 	msr	BASEPRI, r3
 8001d5a:	f3bf 8f6f 	isb	sy
 8001d5e:	f3bf 8f4f 	dsb	sy
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	e7fe      	b.n	8001d64 <vTaskSwitchContext+0x58>
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <vTaskSwitchContext+0xac>)
 8001d72:	4413      	add	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	3308      	adds	r3, #8
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d104      	bne.n	8001d96 <vTaskSwitchContext+0x8a>
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <vTaskSwitchContext+0xb0>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000208 	.word	0x20000208
 8001db0:	200001f4 	.word	0x200001f4
 8001db4:	200001e8 	.word	0x200001e8
 8001db8:	200000a8 	.word	0x200000a8
 8001dbc:	200000a4 	.word	0x200000a4

08001dc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <vTaskPlaceOnEventList+0x24>
 8001dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd4:	f383 8811 	msr	BASEPRI, r3
 8001dd8:	f3bf 8f6f 	isb	sy
 8001ddc:	f3bf 8f4f 	dsb	sy
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	e7fe      	b.n	8001de2 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <vTaskPlaceOnEventList+0x44>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3318      	adds	r3, #24
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fc15 	bl	800061c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001df2:	2101      	movs	r1, #1
 8001df4:	6838      	ldr	r0, [r7, #0]
 8001df6:	f000 fa5d 	bl	80022b4 <prvAddCurrentTaskToDelayedList>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200000a4 	.word	0x200000a4

08001e08 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <vTaskPlaceOnEventListRestricted+0x26>
 8001e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e7fe      	b.n	8001e2c <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <vTaskPlaceOnEventListRestricted+0x50>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3318      	adds	r3, #24
 8001e34:	4619      	mov	r1, r3
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7fe fbcd 	bl	80005d6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	68b8      	ldr	r0, [r7, #8]
 8001e4c:	f000 fa32 	bl	80022b4 <prvAddCurrentTaskToDelayedList>
    }
 8001e50:	bf00      	nop
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200000a4 	.word	0x200000a4

08001e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <xTaskRemoveFromEventList+0x2a>
 8001e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e7fe      	b.n	8001e84 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	3318      	adds	r3, #24
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fbfe 	bl	800068c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <xTaskRemoveFromEventList+0xac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d11c      	bne.n	8001ed2 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fbf5 	bl	800068c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <xTaskRemoveFromEventList+0xb0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <xTaskRemoveFromEventList+0xb0>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <xTaskRemoveFromEventList+0xb4>)
 8001ec2:	441a      	add	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f7fe fb83 	bl	80005d6 <vListInsertEnd>
 8001ed0:	e005      	b.n	8001ede <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	3318      	adds	r3, #24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480e      	ldr	r0, [pc, #56]	; (8001f14 <xTaskRemoveFromEventList+0xb8>)
 8001eda:	f7fe fb7c 	bl	80005d6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <xTaskRemoveFromEventList+0xbc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d905      	bls.n	8001ef8 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001eec:	2301      	movs	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <xTaskRemoveFromEventList+0xc0>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e001      	b.n	8001efc <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001efc:	697b      	ldr	r3, [r7, #20]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000208 	.word	0x20000208
 8001f0c:	200001e8 	.word	0x200001e8
 8001f10:	200000a8 	.word	0x200000a8
 8001f14:	200001a0 	.word	0x200001a0
 8001f18:	200000a4 	.word	0x200000a4
 8001f1c:	200001f4 	.word	0x200001f4

08001f20 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <vTaskInternalSetTimeOutState+0x24>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <vTaskInternalSetTimeOutState+0x28>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	200001f8 	.word	0x200001f8
 8001f48:	200001e4 	.word	0x200001e4

08001f4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <xTaskCheckForTimeOut+0x24>
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e7fe      	b.n	8001f6e <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <xTaskCheckForTimeOut+0x3e>
 8001f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7a:	f383 8811 	msr	BASEPRI, r3
 8001f7e:	f3bf 8f6f 	isb	sy
 8001f82:	f3bf 8f4f 	dsb	sy
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	e7fe      	b.n	8001f88 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8001f8a:	f7fe fd07 	bl	800099c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <xTaskCheckForTimeOut+0xc0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d102      	bne.n	8001fae <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	e026      	b.n	8001ffc <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <xTaskCheckForTimeOut+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d00a      	beq.n	8001fd0 <xTaskCheckForTimeOut+0x84>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d805      	bhi.n	8001fd0 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e015      	b.n	8001ffc <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d90b      	bls.n	8001ff2 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	1ad2      	subs	r2, r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ff9a 	bl	8001f20 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	e004      	b.n	8001ffc <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001ffc:	f7fe fcfc 	bl	80009f8 <vPortExitCritical>

    return xReturn;
 8002000:	69fb      	ldr	r3, [r7, #28]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3720      	adds	r7, #32
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200001e4 	.word	0x200001e4
 8002010:	200001f8 	.word	0x200001f8

08002014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <vTaskMissedYield+0x14>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	200001f4 	.word	0x200001f4

0800202c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002034:	f000 f852 	bl	80020dc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <prvIdleTask+0x28>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d9f9      	bls.n	8002034 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <prvIdleTask+0x2c>)
 8002042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002050:	e7f0      	b.n	8002034 <prvIdleTask+0x8>
 8002052:	bf00      	nop
 8002054:	200000a8 	.word	0x200000a8
 8002058:	e000ed04 	.word	0xe000ed04

0800205c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	e00c      	b.n	8002082 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <prvInitialiseTaskLists+0x60>)
 8002074:	4413      	add	r3, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa82 	bl	8000580 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b09      	cmp	r3, #9
 8002086:	d9ef      	bls.n	8002068 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <prvInitialiseTaskLists+0x64>)
 800208a:	f7fe fa79 	bl	8000580 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <prvInitialiseTaskLists+0x68>)
 8002090:	f7fe fa76 	bl	8000580 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <prvInitialiseTaskLists+0x6c>)
 8002096:	f7fe fa73 	bl	8000580 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <prvInitialiseTaskLists+0x70>)
 800209c:	f7fe fa70 	bl	8000580 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <prvInitialiseTaskLists+0x74>)
 80020a2:	f7fe fa6d 	bl	8000580 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <prvInitialiseTaskLists+0x78>)
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <prvInitialiseTaskLists+0x64>)
 80020aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <prvInitialiseTaskLists+0x7c>)
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <prvInitialiseTaskLists+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200000a8 	.word	0x200000a8
 80020c0:	20000170 	.word	0x20000170
 80020c4:	20000184 	.word	0x20000184
 80020c8:	200001a0 	.word	0x200001a0
 80020cc:	200001b4 	.word	0x200001b4
 80020d0:	200001cc 	.word	0x200001cc
 80020d4:	20000198 	.word	0x20000198
 80020d8:	2000019c 	.word	0x2000019c

080020dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020e2:	e019      	b.n	8002118 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80020e4:	f7fe fc5a 	bl	800099c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <prvCheckTasksWaitingTermination+0x4c>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fac9 	bl	800068c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <prvCheckTasksWaitingTermination+0x50>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <prvCheckTasksWaitingTermination+0x50>)
 8002102:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <prvCheckTasksWaitingTermination+0x54>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3b01      	subs	r3, #1
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <prvCheckTasksWaitingTermination+0x54>)
 800210c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800210e:	f7fe fc73 	bl	80009f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f80e 	bl	8002134 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <prvCheckTasksWaitingTermination+0x54>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e1      	bne.n	80020e4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200001b4 	.word	0x200001b4
 800212c:	200001e0 	.word	0x200001e0
 8002130:	200001c8 	.word	0x200001c8

08002134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa0b 	bl	800055c <vPortFree>
                vPortFree( pxTCB );
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7fe fa08 	bl	800055c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <prvResetNextTaskUnblockTime+0x2c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d104      	bne.n	800216c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <prvResetNextTaskUnblockTime+0x30>)
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800216a:	e005      	b.n	8002178 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <prvResetNextTaskUnblockTime+0x2c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a03      	ldr	r2, [pc, #12]	; (8002184 <prvResetNextTaskUnblockTime+0x30>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000198 	.word	0x20000198
 8002184:	20000200 	.word	0x20000200

08002188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <xTaskGetSchedulerState+0x34>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002196:	2301      	movs	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	e008      	b.n	80021ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <xTaskGetSchedulerState+0x38>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80021a4:	2302      	movs	r3, #2
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	e001      	b.n	80021ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80021ae:	687b      	ldr	r3, [r7, #4]
    }
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	200001ec 	.word	0x200001ec
 80021c0:	20000208 	.word	0x20000208

080021c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d061      	beq.n	800229e <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <xTaskPriorityDisinherit+0xe4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d009      	beq.n	80021f8 <xTaskPriorityDisinherit+0x34>
 80021e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e8:	f383 8811 	msr	BASEPRI, r3
 80021ec:	f3bf 8f6f 	isb	sy
 80021f0:	f3bf 8f4f 	dsb	sy
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e7fe      	b.n	80021f6 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <xTaskPriorityDisinherit+0x50>
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	e7fe      	b.n	8002212 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	429a      	cmp	r2, r3
 8002228:	d039      	beq.n	800229e <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	2b00      	cmp	r3, #0
 8002230:	d135      	bne.n	800229e <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	3304      	adds	r3, #4
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fa28 	bl	800068c <uxListRemove>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	2201      	movs	r2, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43da      	mvns	r2, r3
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <xTaskPriorityDisinherit+0xe8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4013      	ands	r3, r2
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <xTaskPriorityDisinherit+0xe8>)
 8002256:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f1c3 020a 	rsb	r2, r3, #10
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2201      	movs	r2, #1
 8002272:	409a      	lsls	r2, r3
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <xTaskPriorityDisinherit+0xe8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4313      	orrs	r3, r2
 800227a:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <xTaskPriorityDisinherit+0xe8>)
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <xTaskPriorityDisinherit+0xec>)
 800228c:	441a      	add	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	3304      	adds	r3, #4
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f7fe f99e 	bl	80005d6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800229a:	2301      	movs	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800229e:	697b      	ldr	r3, [r7, #20]
    }
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200000a4 	.word	0x200000a4
 80022ac:	200001e8 	.word	0x200001e8
 80022b0:	200000a8 	.word	0x200000a8

080022b4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <prvAddCurrentTaskToDelayedList+0xb0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3304      	adds	r3, #4
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f9de 	bl	800068c <uxListRemove>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10b      	bne.n	80022ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2201      	movs	r2, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <prvAddCurrentTaskToDelayedList+0xb8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4013      	ands	r3, r2
 80022ea:	4a20      	ldr	r2, [pc, #128]	; (800236c <prvAddCurrentTaskToDelayedList+0xb8>)
 80022ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d10a      	bne.n	800230c <prvAddCurrentTaskToDelayedList+0x58>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3304      	adds	r3, #4
 8002302:	4619      	mov	r1, r3
 8002304:	481a      	ldr	r0, [pc, #104]	; (8002370 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002306:	f7fe f966 	bl	80005d6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800230a:	e026      	b.n	800235a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d209      	bcs.n	8002338 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3304      	adds	r3, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f7fe f973 	bl	800061c <vListInsert>
}
 8002336:	e010      	b.n	800235a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <prvAddCurrentTaskToDelayedList+0xc4>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <prvAddCurrentTaskToDelayedList+0xb4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3304      	adds	r3, #4
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f7fe f969 	bl	800061c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800234a:	4b0c      	ldr	r3, [pc, #48]	; (800237c <prvAddCurrentTaskToDelayedList+0xc8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	429a      	cmp	r2, r3
 8002352:	d202      	bcs.n	800235a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6013      	str	r3, [r2, #0]
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200001e4 	.word	0x200001e4
 8002368:	200000a4 	.word	0x200000a4
 800236c:	200001e8 	.word	0x200001e8
 8002370:	200001cc 	.word	0x200001cc
 8002374:	2000019c 	.word	0x2000019c
 8002378:	20000198 	.word	0x20000198
 800237c:	20000200 	.word	0x20000200

08002380 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800238a:	f000 facd 	bl	8002928 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <xTimerCreateTimerTask+0x50>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <xTimerCreateTimerTask+0x54>)
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2303      	movs	r3, #3
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	2246      	movs	r2, #70	; 0x46
 80023a2:	490d      	ldr	r1, [pc, #52]	; (80023d8 <xTimerCreateTimerTask+0x58>)
 80023a4:	480d      	ldr	r0, [pc, #52]	; (80023dc <xTimerCreateTimerTask+0x5c>)
 80023a6:	f7ff f985 	bl	80016b4 <xTaskCreate>
 80023aa:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <xTimerCreateTimerTask+0x46>
 80023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	e7fe      	b.n	80023c4 <xTimerCreateTimerTask+0x44>
        return xReturn;
 80023c6:	687b      	ldr	r3, [r7, #4]
    }
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	2000023c 	.word	0x2000023c
 80023d4:	20000240 	.word	0x20000240
 80023d8:	08002bd0 	.word	0x08002bd0
 80023dc:	08002511 	.word	0x08002511

080023e0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <xTimerGenericCommand+0x2c>
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	e7fe      	b.n	800240a <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <xTimerGenericCommand+0x94>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d02a      	beq.n	800246a <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b05      	cmp	r3, #5
 8002424:	dc18      	bgt.n	8002458 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002426:	f7ff feaf 	bl	8002188 <xTaskGetSchedulerState>
 800242a:	4603      	mov	r3, r0
 800242c:	2b02      	cmp	r3, #2
 800242e:	d109      	bne.n	8002444 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <xTimerGenericCommand+0x94>)
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	f107 0114 	add.w	r1, r7, #20
 8002438:	2300      	movs	r3, #0
 800243a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800243c:	f7fe fc88 	bl	8000d50 <xQueueGenericSend>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24
 8002442:	e012      	b.n	800246a <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <xTimerGenericCommand+0x94>)
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	f107 0114 	add.w	r1, r7, #20
 800244c:	2300      	movs	r3, #0
 800244e:	2200      	movs	r2, #0
 8002450:	f7fe fc7e 	bl	8000d50 <xQueueGenericSend>
 8002454:	6278      	str	r0, [r7, #36]	; 0x24
 8002456:	e008      	b.n	800246a <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <xTimerGenericCommand+0x94>)
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	f107 0114 	add.w	r1, r7, #20
 8002460:	2300      	movs	r3, #0
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	f7fe fd6e 	bl	8000f44 <xQueueGenericSendFromISR>
 8002468:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800246c:	4618      	mov	r0, r3
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	2000023c 	.word	0x2000023c

08002478 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <prvProcessExpiredTimer+0x94>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3304      	adds	r3, #4
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f8fb 	bl	800068c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d021      	beq.n	80024e8 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	18d1      	adds	r1, r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	6978      	ldr	r0, [r7, #20]
 80024b2:	f000 f8cf 	bl	8002654 <prvInsertTimerInActiveList>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01e      	beq.n	80024fa <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	2100      	movs	r1, #0
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8a 	bl	80023e0 <xTimerGenericCommand>
 80024cc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d112      	bne.n	80024fa <prvProcessExpiredTimer+0x82>
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e7fe      	b.n	80024e6 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	4798      	blx	r3
    }
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000234 	.word	0x20000234

08002510 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f857 	bl	80025d0 <prvGetNextExpireTime>
 8002522:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4619      	mov	r1, r3
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f803 	bl	8002534 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800252e:	f000 f8d3 	bl	80026d8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002532:	e7f1      	b.n	8002518 <prvTimerTask+0x8>

08002534 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800253e:	f7ff fa75 	bl	8001a2c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f864 	bl	8002614 <prvSampleTimeNow>
 800254c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d130      	bne.n	80025b6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <prvProcessTimerOrBlockTask+0x3c>
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	429a      	cmp	r2, r3
 8002560:	d806      	bhi.n	8002570 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002562:	f7ff fa71 	bl	8001a48 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff85 	bl	8002478 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800256e:	e024      	b.n	80025ba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <prvProcessTimerOrBlockTask+0x90>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <prvProcessTimerOrBlockTask+0x50>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <prvProcessTimerOrBlockTask+0x52>
 8002584:	2300      	movs	r3, #0
 8002586:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <prvProcessTimerOrBlockTask+0x94>)
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f7fe ff67 	bl	8001468 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800259a:	f7ff fa55 	bl	8001a48 <xTaskResumeAll>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <prvProcessTimerOrBlockTask+0x98>)
 80025a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	f3bf 8f6f 	isb	sy
    }
 80025b4:	e001      	b.n	80025ba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80025b6:	f7ff fa47 	bl	8001a48 <xTaskResumeAll>
    }
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000238 	.word	0x20000238
 80025c8:	2000023c 	.word	0x2000023c
 80025cc:	e000ed04 	.word	0xe000ed04

080025d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <prvGetNextExpireTime+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <prvGetNextExpireTime+0x16>
 80025e2:	2201      	movs	r2, #1
 80025e4:	e000      	b.n	80025e8 <prvGetNextExpireTime+0x18>
 80025e6:	2200      	movs	r2, #0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <prvGetNextExpireTime+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e001      	b.n	8002604 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002604:	68fb      	ldr	r3, [r7, #12]
    }
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000234 	.word	0x20000234

08002614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800261c:	f7ff fab0 	bl	8001b80 <xTaskGetTickCount>
 8002620:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <prvSampleTimeNow+0x3c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d205      	bcs.n	8002638 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800262c:	f000 f918 	bl	8002860 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e002      	b.n	800263e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800263e:	4a04      	ldr	r2, [pc, #16]	; (8002650 <prvSampleTimeNow+0x3c>)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002644:	68fb      	ldr	r3, [r7, #12]
    }
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000244 	.word	0x20000244

08002654 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	d812      	bhi.n	80026a0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	429a      	cmp	r2, r3
 8002686:	d302      	bcc.n	800268e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002688:	2301      	movs	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e01b      	b.n	80026c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <prvInsertTimerInActiveList+0x7c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3304      	adds	r3, #4
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f7fd ffbf 	bl	800061c <vListInsert>
 800269e:	e012      	b.n	80026c6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d206      	bcs.n	80026b6 <prvInsertTimerInActiveList+0x62>
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e007      	b.n	80026c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <prvInsertTimerInActiveList+0x80>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3304      	adds	r3, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7fd ffab 	bl	800061c <vListInsert>
            }
        }

        return xProcessTimerNow;
 80026c6:	697b      	ldr	r3, [r7, #20]
    }
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000238 	.word	0x20000238
 80026d4:	20000234 	.word	0x20000234

080026d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026de:	e0ac      	b.n	800283a <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f2c0 80a9 	blt.w	800283a <prvProcessReceivedCommands+0x162>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	3304      	adds	r3, #4
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd ffc7 	bl	800068c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff87 	bl	8002614 <prvSampleTimeNow>
 8002706:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b09      	cmp	r3, #9
 800270c:	f200 8094 	bhi.w	8002838 <prvProcessReceivedCommands+0x160>
 8002710:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <prvProcessReceivedCommands+0x40>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	08002741 	.word	0x08002741
 800271c:	08002741 	.word	0x08002741
 8002720:	08002741 	.word	0x08002741
 8002724:	080027b3 	.word	0x080027b3
 8002728:	080027c7 	.word	0x080027c7
 800272c:	0800280f 	.word	0x0800280f
 8002730:	08002741 	.word	0x08002741
 8002734:	08002741 	.word	0x08002741
 8002738:	080027b3 	.word	0x080027b3
 800273c:	080027c7 	.word	0x080027c7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	18d1      	adds	r1, r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a3a      	ldr	r2, [r7, #32]
 800275e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002760:	f7ff ff78 	bl	8002654 <prvInsertTimerInActiveList>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d067      	beq.n	800283a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002770:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d05c      	beq.n	800283a <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	441a      	add	r2, r3
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2300      	movs	r3, #0
 800278e:	2100      	movs	r1, #0
 8002790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002792:	f7ff fe25 	bl	80023e0 <xTimerGenericCommand>
 8002796:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d14d      	bne.n	800283a <prvProcessReceivedCommands+0x162>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e7fe      	b.n	80027b0 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 80027c4:	e039      	b.n	800283a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <prvProcessReceivedCommands+0x122>
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e7fe      	b.n	80027f8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	18d1      	adds	r1, r2, r3
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	6a3a      	ldr	r2, [r7, #32]
 8002806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002808:	f7ff ff24 	bl	8002654 <prvInsertTimerInActiveList>
                        break;
 800280c:	e015      	b.n	800283a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 800281c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800281e:	f7fd fe9d 	bl	800055c <vPortFree>
 8002822:	e00a      	b.n	800283a <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002836:	e000      	b.n	800283a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002838:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <prvProcessReceivedCommands+0x184>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f107 0108 	add.w	r1, r7, #8
 8002842:	2200      	movs	r2, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fc23 	bl	8001090 <xQueueReceive>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f af47 	bne.w	80026e0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002852:	bf00      	nop
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000023c 	.word	0x2000023c

08002860 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002866:	e047      	b.n	80028f8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <prvSwitchTimerLists+0xc0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002872:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <prvSwitchTimerLists+0xc0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	3304      	adds	r3, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd ff03 	bl	800068c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	6938      	ldr	r0, [r7, #16]
 800288c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02d      	beq.n	80028f8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	699a      	ldr	r2, [r3, #24]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	4413      	add	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d90e      	bls.n	80028cc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <prvSwitchTimerLists+0xc0>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7fd fea9 	bl	800061c <vListInsert>
 80028ca:	e015      	b.n	80028f8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2300      	movs	r3, #0
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	2100      	movs	r1, #0
 80028d6:	6938      	ldr	r0, [r7, #16]
 80028d8:	f7ff fd82 	bl	80023e0 <xTimerGenericCommand>
 80028dc:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <prvSwitchTimerLists+0x98>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	e7fe      	b.n	80028f6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <prvSwitchTimerLists+0xc0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1b2      	bne.n	8002868 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <prvSwitchTimerLists+0xc0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <prvSwitchTimerLists+0xc4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <prvSwitchTimerLists+0xc0>)
 800290e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <prvSwitchTimerLists+0xc4>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
    }
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000234 	.word	0x20000234
 8002924:	20000238 	.word	0x20000238

08002928 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800292c:	f7fe f836 	bl	800099c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <prvCheckForValidListAndQueue+0x40>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <prvCheckForValidListAndQueue+0x44>)
 800293a:	f7fd fe21 	bl	8000580 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800293e:	480c      	ldr	r0, [pc, #48]	; (8002970 <prvCheckForValidListAndQueue+0x48>)
 8002940:	f7fd fe1e 	bl	8000580 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <prvCheckForValidListAndQueue+0x4c>)
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <prvCheckForValidListAndQueue+0x44>)
 8002948:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800294a:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <prvCheckForValidListAndQueue+0x50>)
 800294c:	4a08      	ldr	r2, [pc, #32]	; (8002970 <prvCheckForValidListAndQueue+0x48>)
 800294e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002950:	2200      	movs	r2, #0
 8002952:	210c      	movs	r1, #12
 8002954:	2005      	movs	r0, #5
 8002956:	f7fe f97d 	bl	8000c54 <xQueueGenericCreate>
 800295a:	4602      	mov	r2, r0
 800295c:	4b02      	ldr	r3, [pc, #8]	; (8002968 <prvCheckForValidListAndQueue+0x40>)
 800295e:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002960:	f7fe f84a 	bl	80009f8 <vPortExitCritical>
    }
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000023c 	.word	0x2000023c
 800296c:	2000020c 	.word	0x2000020c
 8002970:	20000220 	.word	0x20000220
 8002974:	20000234 	.word	0x20000234
 8002978:	20000238 	.word	0x20000238

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	2500      	movs	r5, #0
 8002980:	4e0c      	ldr	r6, [pc, #48]	; (80029b4 <__libc_init_array+0x38>)
 8002982:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002984:	1ba4      	subs	r4, r4, r6
 8002986:	10a4      	asrs	r4, r4, #2
 8002988:	42a5      	cmp	r5, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	f000 f908 	bl	8002ba0 <_init>
 8002990:	2500      	movs	r5, #0
 8002992:	4e0a      	ldr	r6, [pc, #40]	; (80029bc <__libc_init_array+0x40>)
 8002994:	4c0a      	ldr	r4, [pc, #40]	; (80029c0 <__libc_init_array+0x44>)
 8002996:	1ba4      	subs	r4, r4, r6
 8002998:	10a4      	asrs	r4, r4, #2
 800299a:	42a5      	cmp	r5, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029a4:	4798      	blx	r3
 80029a6:	3501      	adds	r5, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029ae:	4798      	blx	r3
 80029b0:	3501      	adds	r5, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	08002bd8 	.word	0x08002bd8
 80029b8:	08002bd8 	.word	0x08002bd8
 80029bc:	08002bd8 	.word	0x08002bd8
 80029c0:	08002bdc 	.word	0x08002bdc

080029c4 <malloc>:
 80029c4:	4b02      	ldr	r3, [pc, #8]	; (80029d0 <malloc+0xc>)
 80029c6:	4601      	mov	r1, r0
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f000 b86b 	b.w	8002aa4 <_malloc_r>
 80029ce:	bf00      	nop
 80029d0:	20000014 	.word	0x20000014

080029d4 <free>:
 80029d4:	4b02      	ldr	r3, [pc, #8]	; (80029e0 <free+0xc>)
 80029d6:	4601      	mov	r1, r0
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	f000 b817 	b.w	8002a0c <_free_r>
 80029de:	bf00      	nop
 80029e0:	20000014 	.word	0x20000014

080029e4 <memcpy>:
 80029e4:	b510      	push	{r4, lr}
 80029e6:	1e43      	subs	r3, r0, #1
 80029e8:	440a      	add	r2, r1
 80029ea:	4291      	cmp	r1, r2
 80029ec:	d100      	bne.n	80029f0 <memcpy+0xc>
 80029ee:	bd10      	pop	{r4, pc}
 80029f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029f8:	e7f7      	b.n	80029ea <memcpy+0x6>

080029fa <memset>:
 80029fa:	4603      	mov	r3, r0
 80029fc:	4402      	add	r2, r0
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d100      	bne.n	8002a04 <memset+0xa>
 8002a02:	4770      	bx	lr
 8002a04:	f803 1b01 	strb.w	r1, [r3], #1
 8002a08:	e7f9      	b.n	80029fe <memset+0x4>
	...

08002a0c <_free_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4605      	mov	r5, r0
 8002a10:	2900      	cmp	r1, #0
 8002a12:	d043      	beq.n	8002a9c <_free_r+0x90>
 8002a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a18:	1f0c      	subs	r4, r1, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bfb8      	it	lt
 8002a1e:	18e4      	addlt	r4, r4, r3
 8002a20:	f000 f8ae 	bl	8002b80 <__malloc_lock>
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <_free_r+0x94>)
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	4610      	mov	r0, r2
 8002a2a:	b933      	cbnz	r3, 8002a3a <_free_r+0x2e>
 8002a2c:	6063      	str	r3, [r4, #4]
 8002a2e:	6014      	str	r4, [r2, #0]
 8002a30:	4628      	mov	r0, r5
 8002a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a36:	f000 b8a4 	b.w	8002b82 <__malloc_unlock>
 8002a3a:	42a3      	cmp	r3, r4
 8002a3c:	d90b      	bls.n	8002a56 <_free_r+0x4a>
 8002a3e:	6821      	ldr	r1, [r4, #0]
 8002a40:	1862      	adds	r2, r4, r1
 8002a42:	4293      	cmp	r3, r2
 8002a44:	bf01      	itttt	eq
 8002a46:	681a      	ldreq	r2, [r3, #0]
 8002a48:	685b      	ldreq	r3, [r3, #4]
 8002a4a:	1852      	addeq	r2, r2, r1
 8002a4c:	6022      	streq	r2, [r4, #0]
 8002a4e:	6063      	str	r3, [r4, #4]
 8002a50:	6004      	str	r4, [r0, #0]
 8002a52:	e7ed      	b.n	8002a30 <_free_r+0x24>
 8002a54:	4613      	mov	r3, r2
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	b10a      	cbz	r2, 8002a5e <_free_r+0x52>
 8002a5a:	42a2      	cmp	r2, r4
 8002a5c:	d9fa      	bls.n	8002a54 <_free_r+0x48>
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	1858      	adds	r0, r3, r1
 8002a62:	42a0      	cmp	r0, r4
 8002a64:	d10b      	bne.n	8002a7e <_free_r+0x72>
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	4401      	add	r1, r0
 8002a6a:	1858      	adds	r0, r3, r1
 8002a6c:	4282      	cmp	r2, r0
 8002a6e:	6019      	str	r1, [r3, #0]
 8002a70:	d1de      	bne.n	8002a30 <_free_r+0x24>
 8002a72:	6810      	ldr	r0, [r2, #0]
 8002a74:	6852      	ldr	r2, [r2, #4]
 8002a76:	4401      	add	r1, r0
 8002a78:	6019      	str	r1, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	e7d8      	b.n	8002a30 <_free_r+0x24>
 8002a7e:	d902      	bls.n	8002a86 <_free_r+0x7a>
 8002a80:	230c      	movs	r3, #12
 8002a82:	602b      	str	r3, [r5, #0]
 8002a84:	e7d4      	b.n	8002a30 <_free_r+0x24>
 8002a86:	6820      	ldr	r0, [r4, #0]
 8002a88:	1821      	adds	r1, r4, r0
 8002a8a:	428a      	cmp	r2, r1
 8002a8c:	bf01      	itttt	eq
 8002a8e:	6811      	ldreq	r1, [r2, #0]
 8002a90:	6852      	ldreq	r2, [r2, #4]
 8002a92:	1809      	addeq	r1, r1, r0
 8002a94:	6021      	streq	r1, [r4, #0]
 8002a96:	6062      	str	r2, [r4, #4]
 8002a98:	605c      	str	r4, [r3, #4]
 8002a9a:	e7c9      	b.n	8002a30 <_free_r+0x24>
 8002a9c:	bd38      	pop	{r3, r4, r5, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000248 	.word	0x20000248

08002aa4 <_malloc_r>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	1ccd      	adds	r5, r1, #3
 8002aa8:	f025 0503 	bic.w	r5, r5, #3
 8002aac:	3508      	adds	r5, #8
 8002aae:	2d0c      	cmp	r5, #12
 8002ab0:	bf38      	it	cc
 8002ab2:	250c      	movcc	r5, #12
 8002ab4:	2d00      	cmp	r5, #0
 8002ab6:	4606      	mov	r6, r0
 8002ab8:	db01      	blt.n	8002abe <_malloc_r+0x1a>
 8002aba:	42a9      	cmp	r1, r5
 8002abc:	d903      	bls.n	8002ac6 <_malloc_r+0x22>
 8002abe:	230c      	movs	r3, #12
 8002ac0:	6033      	str	r3, [r6, #0]
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	bd70      	pop	{r4, r5, r6, pc}
 8002ac6:	f000 f85b 	bl	8002b80 <__malloc_lock>
 8002aca:	4a23      	ldr	r2, [pc, #140]	; (8002b58 <_malloc_r+0xb4>)
 8002acc:	6814      	ldr	r4, [r2, #0]
 8002ace:	4621      	mov	r1, r4
 8002ad0:	b991      	cbnz	r1, 8002af8 <_malloc_r+0x54>
 8002ad2:	4c22      	ldr	r4, [pc, #136]	; (8002b5c <_malloc_r+0xb8>)
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	b91b      	cbnz	r3, 8002ae0 <_malloc_r+0x3c>
 8002ad8:	4630      	mov	r0, r6
 8002ada:	f000 f841 	bl	8002b60 <_sbrk_r>
 8002ade:	6020      	str	r0, [r4, #0]
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f000 f83c 	bl	8002b60 <_sbrk_r>
 8002ae8:	1c43      	adds	r3, r0, #1
 8002aea:	d126      	bne.n	8002b3a <_malloc_r+0x96>
 8002aec:	230c      	movs	r3, #12
 8002aee:	4630      	mov	r0, r6
 8002af0:	6033      	str	r3, [r6, #0]
 8002af2:	f000 f846 	bl	8002b82 <__malloc_unlock>
 8002af6:	e7e4      	b.n	8002ac2 <_malloc_r+0x1e>
 8002af8:	680b      	ldr	r3, [r1, #0]
 8002afa:	1b5b      	subs	r3, r3, r5
 8002afc:	d41a      	bmi.n	8002b34 <_malloc_r+0x90>
 8002afe:	2b0b      	cmp	r3, #11
 8002b00:	d90f      	bls.n	8002b22 <_malloc_r+0x7e>
 8002b02:	600b      	str	r3, [r1, #0]
 8002b04:	18cc      	adds	r4, r1, r3
 8002b06:	50cd      	str	r5, [r1, r3]
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f000 f83a 	bl	8002b82 <__malloc_unlock>
 8002b0e:	f104 000b 	add.w	r0, r4, #11
 8002b12:	1d23      	adds	r3, r4, #4
 8002b14:	f020 0007 	bic.w	r0, r0, #7
 8002b18:	1ac3      	subs	r3, r0, r3
 8002b1a:	d01b      	beq.n	8002b54 <_malloc_r+0xb0>
 8002b1c:	425a      	negs	r2, r3
 8002b1e:	50e2      	str	r2, [r4, r3]
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	428c      	cmp	r4, r1
 8002b24:	bf0b      	itete	eq
 8002b26:	6863      	ldreq	r3, [r4, #4]
 8002b28:	684b      	ldrne	r3, [r1, #4]
 8002b2a:	6013      	streq	r3, [r2, #0]
 8002b2c:	6063      	strne	r3, [r4, #4]
 8002b2e:	bf18      	it	ne
 8002b30:	460c      	movne	r4, r1
 8002b32:	e7e9      	b.n	8002b08 <_malloc_r+0x64>
 8002b34:	460c      	mov	r4, r1
 8002b36:	6849      	ldr	r1, [r1, #4]
 8002b38:	e7ca      	b.n	8002ad0 <_malloc_r+0x2c>
 8002b3a:	1cc4      	adds	r4, r0, #3
 8002b3c:	f024 0403 	bic.w	r4, r4, #3
 8002b40:	42a0      	cmp	r0, r4
 8002b42:	d005      	beq.n	8002b50 <_malloc_r+0xac>
 8002b44:	1a21      	subs	r1, r4, r0
 8002b46:	4630      	mov	r0, r6
 8002b48:	f000 f80a 	bl	8002b60 <_sbrk_r>
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d0cd      	beq.n	8002aec <_malloc_r+0x48>
 8002b50:	6025      	str	r5, [r4, #0]
 8002b52:	e7d9      	b.n	8002b08 <_malloc_r+0x64>
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
 8002b56:	bf00      	nop
 8002b58:	20000248 	.word	0x20000248
 8002b5c:	2000024c 	.word	0x2000024c

08002b60 <_sbrk_r>:
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	2300      	movs	r3, #0
 8002b64:	4c05      	ldr	r4, [pc, #20]	; (8002b7c <_sbrk_r+0x1c>)
 8002b66:	4605      	mov	r5, r0
 8002b68:	4608      	mov	r0, r1
 8002b6a:	6023      	str	r3, [r4, #0]
 8002b6c:	f000 f80a 	bl	8002b84 <_sbrk>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d102      	bne.n	8002b7a <_sbrk_r+0x1a>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	b103      	cbz	r3, 8002b7a <_sbrk_r+0x1a>
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	20000254 	.word	0x20000254

08002b80 <__malloc_lock>:
 8002b80:	4770      	bx	lr

08002b82 <__malloc_unlock>:
 8002b82:	4770      	bx	lr

08002b84 <_sbrk>:
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <_sbrk+0x14>)
 8002b86:	4602      	mov	r2, r0
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	b909      	cbnz	r1, 8002b90 <_sbrk+0xc>
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <_sbrk+0x18>)
 8002b8e:	6019      	str	r1, [r3, #0]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	4402      	add	r2, r0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	4770      	bx	lr
 8002b98:	20000250 	.word	0x20000250
 8002b9c:	20000258 	.word	0x20000258

08002ba0 <_init>:
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba2:	bf00      	nop
 8002ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba6:	bc08      	pop	{r3}
 8002ba8:	469e      	mov	lr, r3
 8002baa:	4770      	bx	lr

08002bac <_fini>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	bf00      	nop
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr
