
FreeRTOS_LAB1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000118e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000118e  00001222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000643  00800088  00800088  0000124a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003877  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000efb  00000000  00000000  00004e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020d7  00000000  00000000  00005d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000968  00000000  00000000  00007e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e3  00000000  00000000  00008784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b79  00000000  00000000  00009967  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0000d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 03 	call	0x6da	; 0x6da <main>
      8a:	0c 94 c5 08 	jmp	0x118a	; 0x118a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VoidSetPinDirection>:
			pinvalue =PIND_REG;
			break;
	}
	
	return (pinvalue) ;
}
      92:	63 30       	cpi	r22, 0x03	; 3
      94:	51 f1       	breq	.+84     	; 0xea <DIO_VoidSetPinDirection+0x58>
      96:	18 f4       	brcc	.+6      	; 0x9e <DIO_VoidSetPinDirection+0xc>
      98:	62 30       	cpi	r22, 0x02	; 2
      9a:	41 f0       	breq	.+16     	; 0xac <DIO_VoidSetPinDirection+0x1a>
      9c:	08 95       	ret
      9e:	64 30       	cpi	r22, 0x04	; 4
      a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_VoidSetPinDirection+0x12>
      a2:	42 c0       	rjmp	.+132    	; 0x128 <DIO_VoidSetPinDirection+0x96>
      a4:	65 30       	cpi	r22, 0x05	; 5
      a6:	09 f4       	brne	.+2      	; 0xaa <DIO_VoidSetPinDirection+0x18>
      a8:	5e c0       	rjmp	.+188    	; 0x166 <DIO_VoidSetPinDirection+0xd4>
      aa:	08 95       	ret
      ac:	41 30       	cpi	r20, 0x01	; 1
      ae:	69 f4       	brne	.+26     	; 0xca <DIO_VoidSetPinDirection+0x38>
      b0:	4a b3       	in	r20, 0x1a	; 26
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	b9 01       	movw	r22, r18
      b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_VoidSetPinDirection+0x2c>
      ba:	66 0f       	add	r22, r22
      bc:	77 1f       	adc	r23, r23
      be:	8a 95       	dec	r24
      c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_VoidSetPinDirection+0x28>
      c2:	cb 01       	movw	r24, r22
      c4:	84 2b       	or	r24, r20
      c6:	8a bb       	out	0x1a, r24	; 26
      c8:	08 95       	ret
      ca:	41 11       	cpse	r20, r1
      cc:	6a c0       	rjmp	.+212    	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
      ce:	4a b3       	in	r20, 0x1a	; 26
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_VoidSetPinDirection+0x4a>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_VoidSetPinDirection+0x46>
      e0:	cb 01       	movw	r24, r22
      e2:	80 95       	com	r24
      e4:	84 23       	and	r24, r20
      e6:	8a bb       	out	0x1a, r24	; 26
      e8:	08 95       	ret
      ea:	41 30       	cpi	r20, 0x01	; 1
      ec:	69 f4       	brne	.+26     	; 0x108 <DIO_VoidSetPinDirection+0x76>
      ee:	47 b3       	in	r20, 0x17	; 23
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_VoidSetPinDirection+0x6a>
      f8:	66 0f       	add	r22, r22
      fa:	77 1f       	adc	r23, r23
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_VoidSetPinDirection+0x66>
     100:	cb 01       	movw	r24, r22
     102:	84 2b       	or	r24, r20
     104:	87 bb       	out	0x17, r24	; 23
     106:	08 95       	ret
     108:	41 11       	cpse	r20, r1
     10a:	4b c0       	rjmp	.+150    	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     10c:	47 b3       	in	r20, 0x17	; 23
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	b9 01       	movw	r22, r18
     114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_VoidSetPinDirection+0x88>
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	8a 95       	dec	r24
     11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_VoidSetPinDirection+0x84>
     11e:	cb 01       	movw	r24, r22
     120:	80 95       	com	r24
     122:	84 23       	and	r24, r20
     124:	87 bb       	out	0x17, r24	; 23
     126:	08 95       	ret
     128:	41 30       	cpi	r20, 0x01	; 1
     12a:	69 f4       	brne	.+26     	; 0x146 <DIO_VoidSetPinDirection+0xb4>
     12c:	44 b3       	in	r20, 0x14	; 20
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	b9 01       	movw	r22, r18
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_VoidSetPinDirection+0xa8>
     136:	66 0f       	add	r22, r22
     138:	77 1f       	adc	r23, r23
     13a:	8a 95       	dec	r24
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_VoidSetPinDirection+0xa4>
     13e:	cb 01       	movw	r24, r22
     140:	84 2b       	or	r24, r20
     142:	84 bb       	out	0x14, r24	; 20
     144:	08 95       	ret
     146:	41 11       	cpse	r20, r1
     148:	2c c0       	rjmp	.+88     	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     14a:	44 b3       	in	r20, 0x14	; 20
     14c:	21 e0       	ldi	r18, 0x01	; 1
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	b9 01       	movw	r22, r18
     152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_VoidSetPinDirection+0xc6>
     154:	66 0f       	add	r22, r22
     156:	77 1f       	adc	r23, r23
     158:	8a 95       	dec	r24
     15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_VoidSetPinDirection+0xc2>
     15c:	cb 01       	movw	r24, r22
     15e:	80 95       	com	r24
     160:	84 23       	and	r24, r20
     162:	84 bb       	out	0x14, r24	; 20
     164:	08 95       	ret
     166:	41 30       	cpi	r20, 0x01	; 1
     168:	69 f4       	brne	.+26     	; 0x184 <DIO_VoidSetPinDirection+0xf2>
     16a:	41 b3       	in	r20, 0x11	; 17
     16c:	21 e0       	ldi	r18, 0x01	; 1
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	b9 01       	movw	r22, r18
     172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_VoidSetPinDirection+0xe6>
     174:	66 0f       	add	r22, r22
     176:	77 1f       	adc	r23, r23
     178:	8a 95       	dec	r24
     17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_VoidSetPinDirection+0xe2>
     17c:	cb 01       	movw	r24, r22
     17e:	84 2b       	or	r24, r20
     180:	81 bb       	out	0x11, r24	; 17
     182:	08 95       	ret
     184:	41 11       	cpse	r20, r1
     186:	0d c0       	rjmp	.+26     	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     188:	41 b3       	in	r20, 0x11	; 17
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	b9 01       	movw	r22, r18
     190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_VoidSetPinDirection+0x104>
     192:	66 0f       	add	r22, r22
     194:	77 1f       	adc	r23, r23
     196:	8a 95       	dec	r24
     198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_VoidSetPinDirection+0x100>
     19a:	cb 01       	movw	r24, r22
     19c:	80 95       	com	r24
     19e:	84 23       	and	r24, r20
     1a0:	81 bb       	out	0x11, r24	; 17
     1a2:	08 95       	ret

000001a4 <DIO_VoidSetPinValue>:
     1a4:	63 30       	cpi	r22, 0x03	; 3
     1a6:	51 f1       	breq	.+84     	; 0x1fc <DIO_VoidSetPinValue+0x58>
     1a8:	18 f4       	brcc	.+6      	; 0x1b0 <DIO_VoidSetPinValue+0xc>
     1aa:	62 30       	cpi	r22, 0x02	; 2
     1ac:	41 f0       	breq	.+16     	; 0x1be <DIO_VoidSetPinValue+0x1a>
     1ae:	08 95       	ret
     1b0:	64 30       	cpi	r22, 0x04	; 4
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <DIO_VoidSetPinValue+0x12>
     1b4:	42 c0       	rjmp	.+132    	; 0x23a <DIO_VoidSetPinValue+0x96>
     1b6:	65 30       	cpi	r22, 0x05	; 5
     1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_VoidSetPinValue+0x18>
     1ba:	5e c0       	rjmp	.+188    	; 0x278 <DIO_VoidSetPinValue+0xd4>
     1bc:	08 95       	ret
     1be:	41 30       	cpi	r20, 0x01	; 1
     1c0:	69 f4       	brne	.+26     	; 0x1dc <DIO_VoidSetPinValue+0x38>
     1c2:	4b b3       	in	r20, 0x1b	; 27
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	b9 01       	movw	r22, r18
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_VoidSetPinValue+0x2c>
     1cc:	66 0f       	add	r22, r22
     1ce:	77 1f       	adc	r23, r23
     1d0:	8a 95       	dec	r24
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_VoidSetPinValue+0x28>
     1d4:	cb 01       	movw	r24, r22
     1d6:	84 2b       	or	r24, r20
     1d8:	8b bb       	out	0x1b, r24	; 27
     1da:	08 95       	ret
     1dc:	41 11       	cpse	r20, r1
     1de:	6a c0       	rjmp	.+212    	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     1e0:	4b b3       	in	r20, 0x1b	; 27
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	b9 01       	movw	r22, r18
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_VoidSetPinValue+0x4a>
     1ea:	66 0f       	add	r22, r22
     1ec:	77 1f       	adc	r23, r23
     1ee:	8a 95       	dec	r24
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_VoidSetPinValue+0x46>
     1f2:	cb 01       	movw	r24, r22
     1f4:	80 95       	com	r24
     1f6:	84 23       	and	r24, r20
     1f8:	8b bb       	out	0x1b, r24	; 27
     1fa:	08 95       	ret
     1fc:	41 30       	cpi	r20, 0x01	; 1
     1fe:	69 f4       	brne	.+26     	; 0x21a <DIO_VoidSetPinValue+0x76>
     200:	48 b3       	in	r20, 0x18	; 24
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	b9 01       	movw	r22, r18
     208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_VoidSetPinValue+0x6a>
     20a:	66 0f       	add	r22, r22
     20c:	77 1f       	adc	r23, r23
     20e:	8a 95       	dec	r24
     210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_VoidSetPinValue+0x66>
     212:	cb 01       	movw	r24, r22
     214:	84 2b       	or	r24, r20
     216:	88 bb       	out	0x18, r24	; 24
     218:	08 95       	ret
     21a:	41 11       	cpse	r20, r1
     21c:	4b c0       	rjmp	.+150    	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     21e:	48 b3       	in	r20, 0x18	; 24
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	b9 01       	movw	r22, r18
     226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_VoidSetPinValue+0x88>
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	8a 95       	dec	r24
     22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_VoidSetPinValue+0x84>
     230:	cb 01       	movw	r24, r22
     232:	80 95       	com	r24
     234:	84 23       	and	r24, r20
     236:	88 bb       	out	0x18, r24	; 24
     238:	08 95       	ret
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	69 f4       	brne	.+26     	; 0x258 <DIO_VoidSetPinValue+0xb4>
     23e:	45 b3       	in	r20, 0x15	; 21
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	b9 01       	movw	r22, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_VoidSetPinValue+0xa8>
     248:	66 0f       	add	r22, r22
     24a:	77 1f       	adc	r23, r23
     24c:	8a 95       	dec	r24
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_VoidSetPinValue+0xa4>
     250:	cb 01       	movw	r24, r22
     252:	84 2b       	or	r24, r20
     254:	85 bb       	out	0x15, r24	; 21
     256:	08 95       	ret
     258:	41 11       	cpse	r20, r1
     25a:	2c c0       	rjmp	.+88     	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     25c:	45 b3       	in	r20, 0x15	; 21
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	b9 01       	movw	r22, r18
     264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_VoidSetPinValue+0xc6>
     266:	66 0f       	add	r22, r22
     268:	77 1f       	adc	r23, r23
     26a:	8a 95       	dec	r24
     26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_VoidSetPinValue+0xc2>
     26e:	cb 01       	movw	r24, r22
     270:	80 95       	com	r24
     272:	84 23       	and	r24, r20
     274:	85 bb       	out	0x15, r24	; 21
     276:	08 95       	ret
     278:	41 30       	cpi	r20, 0x01	; 1
     27a:	69 f4       	brne	.+26     	; 0x296 <DIO_VoidSetPinValue+0xf2>
     27c:	42 b3       	in	r20, 0x12	; 18
     27e:	21 e0       	ldi	r18, 0x01	; 1
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	b9 01       	movw	r22, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_VoidSetPinValue+0xe6>
     286:	66 0f       	add	r22, r22
     288:	77 1f       	adc	r23, r23
     28a:	8a 95       	dec	r24
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_VoidSetPinValue+0xe2>
     28e:	cb 01       	movw	r24, r22
     290:	84 2b       	or	r24, r20
     292:	82 bb       	out	0x12, r24	; 18
     294:	08 95       	ret
     296:	41 11       	cpse	r20, r1
     298:	0d c0       	rjmp	.+26     	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     29a:	42 b3       	in	r20, 0x12	; 18
     29c:	21 e0       	ldi	r18, 0x01	; 1
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	b9 01       	movw	r22, r18
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_VoidSetPinValue+0x104>
     2a4:	66 0f       	add	r22, r22
     2a6:	77 1f       	adc	r23, r23
     2a8:	8a 95       	dec	r24
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_VoidSetPinValue+0x100>
     2ac:	cb 01       	movw	r24, r22
     2ae:	80 95       	com	r24
     2b0:	84 23       	and	r24, r20
     2b2:	82 bb       	out	0x12, r24	; 18
     2b4:	08 95       	ret

000002b6 <DIO_VoidSetHigh4BitDirection>:


void DIO_VoidSetHigh4BitDirection(u8 port_number,u8 Direction)
{
	switch(port_number)
     2b6:	83 30       	cpi	r24, 0x03	; 3
     2b8:	81 f0       	breq	.+32     	; 0x2da <DIO_VoidSetHigh4BitDirection+0x24>
     2ba:	18 f4       	brcc	.+6      	; 0x2c2 <DIO_VoidSetHigh4BitDirection+0xc>
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	31 f0       	breq	.+12     	; 0x2cc <DIO_VoidSetHigh4BitDirection+0x16>
     2c0:	08 95       	ret
     2c2:	84 30       	cpi	r24, 0x04	; 4
     2c4:	89 f0       	breq	.+34     	; 0x2e8 <DIO_VoidSetHigh4BitDirection+0x32>
     2c6:	85 30       	cpi	r24, 0x05	; 5
     2c8:	b1 f0       	breq	.+44     	; 0x2f6 <DIO_VoidSetHigh4BitDirection+0x40>
     2ca:	08 95       	ret
	{
		case portA:
			DDRA_REG &=0X0F;
     2cc:	8a b3       	in	r24, 0x1a	; 26
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     2d2:	8a b3       	in	r24, 0x1a	; 26
     2d4:	68 2b       	or	r22, r24
     2d6:	6a bb       	out	0x1a, r22	; 26
			break;
     2d8:	08 95       	ret
			
		case portB:
			DDRA_REG &=0X0F;
     2da:	8a b3       	in	r24, 0x1a	; 26
     2dc:	8f 70       	andi	r24, 0x0F	; 15
     2de:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     2e0:	8a b3       	in	r24, 0x1a	; 26
     2e2:	68 2b       	or	r22, r24
     2e4:	6a bb       	out	0x1a, r22	; 26
			break;
     2e6:	08 95       	ret
			
		case portC:
			DDRA_REG &=0X0F;
     2e8:	8a b3       	in	r24, 0x1a	; 26
     2ea:	8f 70       	andi	r24, 0x0F	; 15
     2ec:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     2ee:	8a b3       	in	r24, 0x1a	; 26
     2f0:	68 2b       	or	r22, r24
     2f2:	6a bb       	out	0x1a, r22	; 26
			break;
     2f4:	08 95       	ret
			
		case portD:
			DDRA_REG &=0X0F;
     2f6:	8a b3       	in	r24, 0x1a	; 26
     2f8:	8f 70       	andi	r24, 0x0F	; 15
     2fa:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     2fc:	8a b3       	in	r24, 0x1a	; 26
     2fe:	68 2b       	or	r22, r24
     300:	6a bb       	out	0x1a, r22	; 26
     302:	08 95       	ret

00000304 <DIO_VoidSetHigh4BitValue>:
	}
}

void DIO_VoidSetHigh4BitValue(u8 port_number,u8 value)
{
	switch(port_number)
     304:	83 30       	cpi	r24, 0x03	; 3
     306:	81 f0       	breq	.+32     	; 0x328 <DIO_VoidSetHigh4BitValue+0x24>
     308:	18 f4       	brcc	.+6      	; 0x310 <DIO_VoidSetHigh4BitValue+0xc>
     30a:	82 30       	cpi	r24, 0x02	; 2
     30c:	31 f0       	breq	.+12     	; 0x31a <DIO_VoidSetHigh4BitValue+0x16>
     30e:	08 95       	ret
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	89 f0       	breq	.+34     	; 0x336 <DIO_VoidSetHigh4BitValue+0x32>
     314:	85 30       	cpi	r24, 0x05	; 5
     316:	b1 f0       	breq	.+44     	; 0x344 <DIO_VoidSetHigh4BitValue+0x40>
     318:	08 95       	ret
	{
		case portA:
			PORTA_REG &=0X0F;
     31a:	8b b3       	in	r24, 0x1b	; 27
     31c:	8f 70       	andi	r24, 0x0F	; 15
     31e:	8b bb       	out	0x1b, r24	; 27
			PORTA_REG |=value;
     320:	8b b3       	in	r24, 0x1b	; 27
     322:	68 2b       	or	r22, r24
     324:	6b bb       	out	0x1b, r22	; 27
			break;
     326:	08 95       	ret
			
		case portB:
			PORTB_REG &=0X0F;
     328:	88 b3       	in	r24, 0x18	; 24
     32a:	8f 70       	andi	r24, 0x0F	; 15
     32c:	88 bb       	out	0x18, r24	; 24
			PORTB_REG |=value;
     32e:	88 b3       	in	r24, 0x18	; 24
     330:	68 2b       	or	r22, r24
     332:	68 bb       	out	0x18, r22	; 24
			break;
     334:	08 95       	ret
			
		case portC:
			PORTC_REG &=0X0F;
     336:	85 b3       	in	r24, 0x15	; 21
     338:	8f 70       	andi	r24, 0x0F	; 15
     33a:	85 bb       	out	0x15, r24	; 21
			PORTC_REG |=value;
     33c:	85 b3       	in	r24, 0x15	; 21
     33e:	68 2b       	or	r22, r24
     340:	65 bb       	out	0x15, r22	; 21
			break;
     342:	08 95       	ret
			
		case portD:
			PORTD_REG &=0X0F;
     344:	82 b3       	in	r24, 0x12	; 18
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	82 bb       	out	0x12, r24	; 18
			PORTD_REG |=value;
     34a:	82 b3       	in	r24, 0x12	; 18
     34c:	68 2b       	or	r22, r24
     34e:	62 bb       	out	0x12, r22	; 18
     350:	08 95       	ret

00000352 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
     358:	0e 94 21 07 	call	0xe42	; 0xe42 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     35c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     360:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
     364:	89 2b       	or	r24, r25
     366:	31 f4       	brne	.+12     	; 0x374 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     368:	8d e8       	ldi	r24, 0x8D	; 141
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
     370:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     374:	20 97       	sbiw	r28, 0x00	; 0
     376:	c9 f0       	breq	.+50     	; 0x3aa <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     378:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <xNextFreeByte>
     37c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <xNextFreeByte+0x1>
     380:	9e 01       	movw	r18, r28
     382:	28 0f       	add	r18, r24
     384:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     386:	2b 3d       	cpi	r18, 0xDB	; 219
     388:	45 e0       	ldi	r20, 0x05	; 5
     38a:	34 07       	cpc	r19, r20
     38c:	88 f4       	brcc	.+34     	; 0x3b0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     38e:	82 17       	cp	r24, r18
     390:	93 07       	cpc	r25, r19
     392:	88 f4       	brcc	.+34     	; 0x3b6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     394:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <__data_end>
     398:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <__data_end+0x1>
     39c:	c8 0f       	add	r28, r24
     39e:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     3a0:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <xNextFreeByte+0x1>
     3a4:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <xNextFreeByte>
     3a8:	08 c0       	rjmp	.+16     	; 0x3ba <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     3aa:	c0 e0       	ldi	r28, 0x00	; 0
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
     3ae:	05 c0       	rjmp	.+10     	; 0x3ba <pvPortMalloc+0x68>
     3b0:	c0 e0       	ldi	r28, 0x00	; 0
     3b2:	d0 e0       	ldi	r29, 0x00	; 0
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <pvPortMalloc+0x68>
     3b6:	c0 e0       	ldi	r28, 0x00	; 0
     3b8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3ba:	0e 94 e5 07 	call	0xfca	; 0xfca <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     3be:	ce 01       	movw	r24, r28
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3c6:	08 95       	ret

000003c8 <LCD_Void_4BitSendCommand>:
/************************************************************************/

static u8 INIT_step_finished=0;

void LCD_Void_4BitSendCommand(u8 command)
{
     3c8:	cf 93       	push	r28
     3ca:	c8 2f       	mov	r28, r24
	u8 COMMAND=command;
	DIO_VoidSetPinValue(RS,CONTROLPORT,LOW);
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	65 e0       	ldi	r22, 0x05	; 5
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW,CONTROLPORT,LOW);
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	65 e0       	ldi	r22, 0x05	; 5
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	COMMAND =(command) & (0XF0);
     3e0:	6c 2f       	mov	r22, r28
     3e2:	60 7f       	andi	r22, 0xF0	; 240
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,COMMAND);
     3e4:	85 e0       	ldi	r24, 0x05	; 5
     3e6:	0e 94 82 01 	call	0x304	; 0x304 <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,COMMAND);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     3ea:	41 e0       	ldi	r20, 0x01	; 1
     3ec:	65 e0       	ldi	r22, 0x05	; 5
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f4:	8f e9       	ldi	r24, 0x9F	; 159
     3f6:	9f e0       	ldi	r25, 0x0F	; 15
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_Void_4BitSendCommand+0x30>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_Void_4BitSendCommand+0x36>
     3fe:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	65 e0       	ldi	r22, 0x05	; 5
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	if (INIT_step_finished==1)
     40a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <INIT_step_finished>
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	b9 f4       	brne	.+46     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	{
		COMMAND =(command<<4) & (0XF0);
     412:	90 e1       	ldi	r25, 0x10	; 16
     414:	c9 9f       	mul	r28, r25
     416:	b0 01       	movw	r22, r0
     418:	11 24       	eor	r1, r1
		
		if (UPPER_PINS_4BIT ==1)
		{
			DIO_VoidSetHigh4BitValue(DATAPORT,COMMAND);
     41a:	85 e0       	ldi	r24, 0x05	; 5
     41c:	0e 94 82 01 	call	0x304	; 0x304 <DIO_VoidSetHigh4BitValue>
		else
		{
			DIO_VoidSetLow4BitValue(DATAPORT,COMMAND);
		}
		
		DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     420:	41 e0       	ldi	r20, 0x01	; 1
     422:	65 e0       	ldi	r22, 0x05	; 5
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     42a:	8f e9       	ldi	r24, 0x9F	; 159
     42c:	9f e0       	ldi	r25, 0x0F	; 15
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     434:	00 00       	nop
		_delay_ms(2);
		DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	65 e0       	ldi	r22, 0x05	; 5
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     440:	8f e9       	ldi	r24, 0x9F	; 159
     442:	9f e0       	ldi	r25, 0x0F	; 15
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     44a:	00 00       	nop
	}
	_delay_ms(2);
}
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <LCD_Void_4BitInit>:

void LCD_Void_4BitInit(void)
{
	INIT_step_finished=0;
     450:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <INIT_step_finished>
	DIO_VoidSetPinDirection(RS,CONTROLPORT,OUTPUT);
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	65 e0       	ldi	r22, 0x05	; 5
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(RW,CONTROLPORT,OUTPUT);
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	65 e0       	ldi	r22, 0x05	; 5
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(EN,CONTROLPORT,OUTPUT);
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	65 e0       	ldi	r22, 0x05	; 5
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitDirection(DATAPORT,0XF0);
     472:	60 ef       	ldi	r22, 0xF0	; 240
     474:	85 e0       	ldi	r24, 0x05	; 5
     476:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_VoidSetHigh4BitDirection>
     47a:	8f e5       	ldi	r24, 0x5F	; 95
     47c:	9a ee       	ldi	r25, 0xEA	; 234
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <LCD_Void_4BitInit+0x2e>
     482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_Void_4BitInit+0x34>
     484:	00 00       	nop
		DIO_VoidSetLow4BitDirection(DATAPORT,0X0F);
	}
	
	
	_delay_ms(30);
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT>>4) & (0XF0));
     486:	80 e2       	ldi	r24, 0x20	; 32
     488:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT) & (0X0F0));
     48c:	80 e2       	ldi	r24, 0x20	; 32
     48e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT<<4) & (0XF0));
     492:	80 e8       	ldi	r24, 0x80	; 128
     494:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
     498:	8f e9       	ldi	r24, 0x9F	; 159
     49a:	9f e0       	ldi	r25, 0x0F	; 15
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_Void_4BitInit+0x4c>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_Void_4BitInit+0x52>
     4a2:	00 00       	nop
	_delay_ms(2);
	LCD_Void_4BitSendCommand((DISPLAYON) & (0XF0));
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((DISPLAYON<<4) & (0XF0));
     4aa:	80 ee       	ldi	r24, 0xE0	; 224
     4ac:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
     4b0:	8f e9       	ldi	r24, 0x9F	; 159
     4b2:	9f e0       	ldi	r25, 0x0F	; 15
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_Void_4BitInit+0x64>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_Void_4BitInit+0x6a>
     4ba:	00 00       	nop
	_delay_ms(2);
	LCD_Void_4BitSendCommand((DISPLAYCLEAR) & (0XF0));
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((DISPLAYCLEAR<<4) & (0XF0));
     4c2:	80 e1       	ldi	r24, 0x10	; 16
     4c4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
     4c8:	8f e2       	ldi	r24, 0x2F	; 47
     4ca:	95 e7       	ldi	r25, 0x75	; 117
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_Void_4BitInit+0x7c>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCD_Void_4BitInit+0x82>
     4d2:	00 00       	nop
	_delay_ms(15);
	LCD_Void_4BitSendCommand((ENTRYMODESET) & (0XF0));
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((ENTRYMODESET<<4) & (0XF0));
     4da:	80 e2       	ldi	r24, 0x20	; 32
     4dc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	
	INIT_step_finished=1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <INIT_step_finished>
     4e6:	08 95       	ret

000004e8 <LCD_Void_4BitSendChar>:
}


/* LCD_VoidSendChar('0')  */
void LCD_Void_4BitSendChar(u8 data)
{
     4e8:	cf 93       	push	r28
     4ea:	c8 2f       	mov	r28, r24
	u8 DATA =data;
	DIO_VoidSetPinValue(RS,CONTROLPORT,HIGH);
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	65 e0       	ldi	r22, 0x05	; 5
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW,CONTROLPORT,LOW);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	65 e0       	ldi	r22, 0x05	; 5
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	
	DATA =(data) & (0XF0);
     500:	6c 2f       	mov	r22, r28
     502:	60 7f       	andi	r22, 0xF0	; 240
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,DATA);
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	0e 94 82 01 	call	0x304	; 0x304 <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,DATA);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	65 e0       	ldi	r22, 0x05	; 5
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     514:	8f e9       	ldi	r24, 0x9F	; 159
     516:	9f e0       	ldi	r25, 0x0F	; 15
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_Void_4BitSendChar+0x30>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_Void_4BitSendChar+0x36>
     51e:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	65 e0       	ldi	r22, 0x05	; 5
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	DATA =(data<<4) & (0XF0);
     52a:	90 e1       	ldi	r25, 0x10	; 16
     52c:	c9 9f       	mul	r28, r25
     52e:	b0 01       	movw	r22, r0
     530:	11 24       	eor	r1, r1
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,DATA);
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	0e 94 82 01 	call	0x304	; 0x304 <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,DATA);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	65 e0       	ldi	r22, 0x05	; 5
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     542:	8f e9       	ldi	r24, 0x9F	; 159
     544:	9f e0       	ldi	r25, 0x0F	; 15
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <LCD_Void_4BitSendChar+0x5e>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <LCD_Void_4BitSendChar+0x64>
     54c:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	65 e0       	ldi	r22, 0x05	; 5
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
}
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <LCD_Void_4BitSendString>:

void LCD_Void_4BitSendString(u8* PtrToString)
{
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	8c 01       	movw	r16, r24
	u8 i=0;
     564:	c0 e0       	ldi	r28, 0x00	; 0
	while(PtrToString[i] !='\0')
     566:	03 c0       	rjmp	.+6      	; 0x56e <LCD_Void_4BitSendString+0x12>
	{
		LCD_Void_4BitSendChar(PtrToString[i]);
     568:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Void_4BitSendChar>
		i++;
     56c:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_Void_4BitSendString(u8* PtrToString)
{
	u8 i=0;
	while(PtrToString[i] !='\0')
     56e:	f8 01       	movw	r30, r16
     570:	ec 0f       	add	r30, r28
     572:	f1 1d       	adc	r31, r1
     574:	80 81       	ld	r24, Z
     576:	81 11       	cpse	r24, r1
     578:	f7 cf       	rjmp	.-18     	; 0x568 <LCD_Void_4BitSendString+0xc>
	{
		LCD_Void_4BitSendChar(PtrToString[i]);
		i++;
	}
}
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     582:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     584:	03 96       	adiw	r24, 0x03	; 3
     586:	92 83       	std	Z+2, r25	; 0x02
     588:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     58a:	2f ef       	ldi	r18, 0xFF	; 255
     58c:	3f ef       	ldi	r19, 0xFF	; 255
     58e:	34 83       	std	Z+4, r19	; 0x04
     590:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     592:	96 83       	std	Z+6, r25	; 0x06
     594:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     596:	90 87       	std	Z+8, r25	; 0x08
     598:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     59a:	10 82       	st	Z, r1
     59c:	08 95       	ret

0000059e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     59e:	fc 01       	movw	r30, r24
     5a0:	11 86       	std	Z+9, r1	; 0x09
     5a2:	10 86       	std	Z+8, r1	; 0x08
     5a4:	08 95       	ret

000005a6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	9c 01       	movw	r18, r24
     5ac:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     5ae:	dc 01       	movw	r26, r24
     5b0:	11 96       	adiw	r26, 0x01	; 1
     5b2:	cd 91       	ld	r28, X+
     5b4:	dc 91       	ld	r29, X
     5b6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     5b8:	d3 83       	std	Z+3, r29	; 0x03
     5ba:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     5bc:	8c 81       	ldd	r24, Y+4	; 0x04
     5be:	9d 81       	ldd	r25, Y+5	; 0x05
     5c0:	95 83       	std	Z+5, r25	; 0x05
     5c2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     5c4:	8c 81       	ldd	r24, Y+4	; 0x04
     5c6:	9d 81       	ldd	r25, Y+5	; 0x05
     5c8:	dc 01       	movw	r26, r24
     5ca:	13 96       	adiw	r26, 0x03	; 3
     5cc:	7c 93       	st	X, r23
     5ce:	6e 93       	st	-X, r22
     5d0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     5d2:	7d 83       	std	Y+5, r23	; 0x05
     5d4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     5d6:	31 87       	std	Z+9, r19	; 0x09
     5d8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     5da:	f9 01       	movw	r30, r18
     5dc:	80 81       	ld	r24, Z
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	80 83       	st	Z, r24
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     5ee:	48 81       	ld	r20, Y
     5f0:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     5f2:	4f 3f       	cpi	r20, 0xFF	; 255
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	52 07       	cpc	r21, r18
     5f8:	21 f4       	brne	.+8      	; 0x602 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     5fa:	fc 01       	movw	r30, r24
     5fc:	a7 81       	ldd	r26, Z+7	; 0x07
     5fe:	b0 85       	ldd	r27, Z+8	; 0x08
     600:	0d c0       	rjmp	.+26     	; 0x61c <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     602:	dc 01       	movw	r26, r24
     604:	13 96       	adiw	r26, 0x03	; 3
     606:	01 c0       	rjmp	.+2      	; 0x60a <vListInsert+0x22>
     608:	df 01       	movw	r26, r30
     60a:	12 96       	adiw	r26, 0x02	; 2
     60c:	ed 91       	ld	r30, X+
     60e:	fc 91       	ld	r31, X
     610:	13 97       	sbiw	r26, 0x03	; 3
     612:	20 81       	ld	r18, Z
     614:	31 81       	ldd	r19, Z+1	; 0x01
     616:	42 17       	cp	r20, r18
     618:	53 07       	cpc	r21, r19
     61a:	b0 f7       	brcc	.-20     	; 0x608 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     61c:	12 96       	adiw	r26, 0x02	; 2
     61e:	ed 91       	ld	r30, X+
     620:	fc 91       	ld	r31, X
     622:	13 97       	sbiw	r26, 0x03	; 3
     624:	fb 83       	std	Y+3, r31	; 0x03
     626:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     628:	d5 83       	std	Z+5, r29	; 0x05
     62a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     62c:	bd 83       	std	Y+5, r27	; 0x05
     62e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     630:	13 96       	adiw	r26, 0x03	; 3
     632:	dc 93       	st	X, r29
     634:	ce 93       	st	-X, r28
     636:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     638:	99 87       	std	Y+9, r25	; 0x09
     63a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     63c:	fc 01       	movw	r30, r24
     63e:	20 81       	ld	r18, Z
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	20 83       	st	Z, r18
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     650:	a0 85       	ldd	r26, Z+8	; 0x08
     652:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     654:	c2 81       	ldd	r28, Z+2	; 0x02
     656:	d3 81       	ldd	r29, Z+3	; 0x03
     658:	84 81       	ldd	r24, Z+4	; 0x04
     65a:	95 81       	ldd	r25, Z+5	; 0x05
     65c:	9d 83       	std	Y+5, r25	; 0x05
     65e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     660:	c4 81       	ldd	r28, Z+4	; 0x04
     662:	d5 81       	ldd	r29, Z+5	; 0x05
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	9b 83       	std	Y+3, r25	; 0x03
     66a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     66c:	11 96       	adiw	r26, 0x01	; 1
     66e:	8d 91       	ld	r24, X+
     670:	9c 91       	ld	r25, X
     672:	12 97       	sbiw	r26, 0x02	; 2
     674:	e8 17       	cp	r30, r24
     676:	f9 07       	cpc	r31, r25
     678:	31 f4       	brne	.+12     	; 0x686 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     67a:	84 81       	ldd	r24, Z+4	; 0x04
     67c:	95 81       	ldd	r25, Z+5	; 0x05
     67e:	12 96       	adiw	r26, 0x02	; 2
     680:	9c 93       	st	X, r25
     682:	8e 93       	st	-X, r24
     684:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     686:	11 86       	std	Z+9, r1	; 0x09
     688:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     68a:	8c 91       	ld	r24, X
     68c:	81 50       	subi	r24, 0x01	; 1
     68e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     690:	8c 91       	ld	r24, X
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <task2>:

void task2(void *pvParameter)
{
	for (;;)
	{
		LCD_Void_4BitSendCommand(DISPLAYCLEAR);
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
		LCD_Void_4BitSendString((u8*)"I'm Task 2");
     69e:	81 e6       	ldi	r24, 0x61	; 97
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Void_4BitSendString>
		//_delay_ms(1000);
		vTaskDelay(2000);
     6a6:	80 ed       	ldi	r24, 0xD0	; 208
     6a8:	97 e0       	ldi	r25, 0x07	; 7
     6aa:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <vTaskDelay>
     6ae:	f4 cf       	rjmp	.-24     	; 0x698 <task2>

000006b0 <task1>:

void task1(void *pvParameter)
{
	for (;;)
	{
		LCD_Void_4BitSendCommand(DISPLAYCLEAR);
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
		LCD_Void_4BitSendString((u8*)"I'm Task 1");
     6b6:	8c e6       	ldi	r24, 0x6C	; 108
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Void_4BitSendString>
     6be:	2f e3       	ldi	r18, 0x3F	; 63
     6c0:	8d e0       	ldi	r24, 0x0D	; 13
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	80 40       	sbci	r24, 0x00	; 0
     6c8:	90 40       	sbci	r25, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <task1+0x14>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <task1+0x1e>
     6ce:	00 00       	nop
		_delay_ms(1000);			// During this delay the 
		
		vTaskDelay(2000);
     6d0:	80 ed       	ldi	r24, 0xD0	; 208
     6d2:	97 e0       	ldi	r25, 0x07	; 7
     6d4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <vTaskDelay>
     6d8:	eb cf       	rjmp	.-42     	; 0x6b0 <task1>

000006da <main>:

void task2(void *pvParameter);


int main()
{
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
	
	LCD_Void_4BitInit();
     6e0:	0e 94 28 02 	call	0x450	; 0x450 <LCD_Void_4BitInit>
	
	/* Create the Tasks */
	
	BaseType_t task1_return = pdFALSE, task2_return = pdFALSE ;
	
	task1_return = xTaskCreate((pdTASK_CODE)task1, (signed char *)"task1", configMINIMAL_STACK_SIZE, NULL, TASK1_PRIORITY, &task1_handle);
     6e4:	0f 2e       	mov	r0, r31
     6e6:	fb e6       	ldi	r31, 0x6B	; 107
     6e8:	ef 2e       	mov	r14, r31
     6ea:	f6 e0       	ldi	r31, 0x06	; 6
     6ec:	ff 2e       	mov	r15, r31
     6ee:	f0 2d       	mov	r31, r0
     6f0:	01 e0       	ldi	r16, 0x01	; 1
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	45 e5       	ldi	r20, 0x55	; 85
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	67 e7       	ldi	r22, 0x77	; 119
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	88 e5       	ldi	r24, 0x58	; 88
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	0e 94 a1 06 	call	0xd42	; 0xd42 <xTaskCreate>
	task2_return = xTaskCreate((pdTASK_CODE)task2, (signed char *)"task2", configMINIMAL_STACK_SIZE, NULL, TASK2_PRIORITY, &task2_handle);
     706:	0f 2e       	mov	r0, r31
     708:	f9 e6       	ldi	r31, 0x69	; 105
     70a:	ef 2e       	mov	r14, r31
     70c:	f6 e0       	ldi	r31, 0x06	; 6
     70e:	ff 2e       	mov	r15, r31
     710:	f0 2d       	mov	r31, r0
     712:	02 e0       	ldi	r16, 0x02	; 2
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	45 e5       	ldi	r20, 0x55	; 85
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	6d e7       	ldi	r22, 0x7D	; 125
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	8c e4       	ldi	r24, 0x4C	; 76
     722:	93 e0       	ldi	r25, 0x03	; 3
     724:	0e 94 a1 06 	call	0xd42	; 0xd42 <xTaskCreate>
	if (task2_return == pdTRUE)
	{
		/* task2 created successfully */
	}
	
	vTaskStartScheduler();
     728:	0e 94 f5 06 	call	0xdea	; 0xdea <vTaskStartScheduler>
	return 0;
}
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	08 95       	ret

00000738 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     738:	1b bc       	out	0x2b, r1	; 43
     73a:	8c e7       	ldi	r24, 0x7C	; 124
     73c:	8a bd       	out	0x2a, r24	; 42
     73e:	8b e0       	ldi	r24, 0x0B	; 11
     740:	8e bd       	out	0x2e, r24	; 46
     742:	89 b7       	in	r24, 0x39	; 57
     744:	80 61       	ori	r24, 0x10	; 16
     746:	89 bf       	out	0x39, r24	; 57
     748:	08 95       	ret

0000074a <pxPortInitialiseStack>:
     74a:	31 e1       	ldi	r19, 0x11	; 17
     74c:	fc 01       	movw	r30, r24
     74e:	30 83       	st	Z, r19
     750:	31 97       	sbiw	r30, 0x01	; 1
     752:	22 e2       	ldi	r18, 0x22	; 34
     754:	20 83       	st	Z, r18
     756:	31 97       	sbiw	r30, 0x01	; 1
     758:	a3 e3       	ldi	r26, 0x33	; 51
     75a:	a0 83       	st	Z, r26
     75c:	31 97       	sbiw	r30, 0x01	; 1
     75e:	60 83       	st	Z, r22
     760:	31 97       	sbiw	r30, 0x01	; 1
     762:	70 83       	st	Z, r23
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	10 82       	st	Z, r1
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	60 e8       	ldi	r22, 0x80	; 128
     76c:	60 83       	st	Z, r22
     76e:	31 97       	sbiw	r30, 0x01	; 1
     770:	10 82       	st	Z, r1
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	62 e0       	ldi	r22, 0x02	; 2
     776:	60 83       	st	Z, r22
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	60 83       	st	Z, r22
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	64 e0       	ldi	r22, 0x04	; 4
     782:	60 83       	st	Z, r22
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	65 e0       	ldi	r22, 0x05	; 5
     788:	60 83       	st	Z, r22
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	66 e0       	ldi	r22, 0x06	; 6
     78e:	60 83       	st	Z, r22
     790:	31 97       	sbiw	r30, 0x01	; 1
     792:	67 e0       	ldi	r22, 0x07	; 7
     794:	60 83       	st	Z, r22
     796:	31 97       	sbiw	r30, 0x01	; 1
     798:	68 e0       	ldi	r22, 0x08	; 8
     79a:	60 83       	st	Z, r22
     79c:	31 97       	sbiw	r30, 0x01	; 1
     79e:	69 e0       	ldi	r22, 0x09	; 9
     7a0:	60 83       	st	Z, r22
     7a2:	31 97       	sbiw	r30, 0x01	; 1
     7a4:	60 e1       	ldi	r22, 0x10	; 16
     7a6:	60 83       	st	Z, r22
     7a8:	31 97       	sbiw	r30, 0x01	; 1
     7aa:	30 83       	st	Z, r19
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	32 e1       	ldi	r19, 0x12	; 18
     7b0:	30 83       	st	Z, r19
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	33 e1       	ldi	r19, 0x13	; 19
     7b6:	30 83       	st	Z, r19
     7b8:	31 97       	sbiw	r30, 0x01	; 1
     7ba:	34 e1       	ldi	r19, 0x14	; 20
     7bc:	30 83       	st	Z, r19
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	35 e1       	ldi	r19, 0x15	; 21
     7c2:	30 83       	st	Z, r19
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	36 e1       	ldi	r19, 0x16	; 22
     7c8:	30 83       	st	Z, r19
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	37 e1       	ldi	r19, 0x17	; 23
     7ce:	30 83       	st	Z, r19
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	38 e1       	ldi	r19, 0x18	; 24
     7d4:	30 83       	st	Z, r19
     7d6:	31 97       	sbiw	r30, 0x01	; 1
     7d8:	39 e1       	ldi	r19, 0x19	; 25
     7da:	30 83       	st	Z, r19
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	30 e2       	ldi	r19, 0x20	; 32
     7e0:	30 83       	st	Z, r19
     7e2:	31 97       	sbiw	r30, 0x01	; 1
     7e4:	31 e2       	ldi	r19, 0x21	; 33
     7e6:	30 83       	st	Z, r19
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	20 83       	st	Z, r18
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	23 e2       	ldi	r18, 0x23	; 35
     7f0:	20 83       	st	Z, r18
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	40 83       	st	Z, r20
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	50 83       	st	Z, r21
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	26 e2       	ldi	r18, 0x26	; 38
     7fe:	20 83       	st	Z, r18
     800:	31 97       	sbiw	r30, 0x01	; 1
     802:	27 e2       	ldi	r18, 0x27	; 39
     804:	20 83       	st	Z, r18
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	28 e2       	ldi	r18, 0x28	; 40
     80a:	20 83       	st	Z, r18
     80c:	31 97       	sbiw	r30, 0x01	; 1
     80e:	29 e2       	ldi	r18, 0x29	; 41
     810:	20 83       	st	Z, r18
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	20 e3       	ldi	r18, 0x30	; 48
     816:	20 83       	st	Z, r18
     818:	31 97       	sbiw	r30, 0x01	; 1
     81a:	21 e3       	ldi	r18, 0x31	; 49
     81c:	20 83       	st	Z, r18
     81e:	86 97       	sbiw	r24, 0x26	; 38
     820:	08 95       	ret

00000822 <xPortStartScheduler>:
     822:	0e 94 9c 03 	call	0x738	; 0x738 <prvSetupTimerInterrupt>
     826:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     82a:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     82e:	cd 91       	ld	r28, X+
     830:	cd bf       	out	0x3d, r28	; 61
     832:	dd 91       	ld	r29, X+
     834:	de bf       	out	0x3e, r29	; 62
     836:	ff 91       	pop	r31
     838:	ef 91       	pop	r30
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	bf 91       	pop	r27
     840:	af 91       	pop	r26
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	7f 91       	pop	r23
     848:	6f 91       	pop	r22
     84a:	5f 91       	pop	r21
     84c:	4f 91       	pop	r20
     84e:	3f 91       	pop	r19
     850:	2f 91       	pop	r18
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	bf 90       	pop	r11
     860:	af 90       	pop	r10
     862:	9f 90       	pop	r9
     864:	8f 90       	pop	r8
     866:	7f 90       	pop	r7
     868:	6f 90       	pop	r6
     86a:	5f 90       	pop	r5
     86c:	4f 90       	pop	r4
     86e:	3f 90       	pop	r3
     870:	2f 90       	pop	r2
     872:	1f 90       	pop	r1
     874:	0f 90       	pop	r0
     876:	0f be       	out	0x3f, r0	; 63
     878:	0f 90       	pop	r0
     87a:	08 95       	ret
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	08 95       	ret

00000880 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     880:	0f 92       	push	r0
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	0f 92       	push	r0
     888:	1f 92       	push	r1
     88a:	11 24       	eor	r1, r1
     88c:	2f 92       	push	r2
     88e:	3f 92       	push	r3
     890:	4f 92       	push	r4
     892:	5f 92       	push	r5
     894:	6f 92       	push	r6
     896:	7f 92       	push	r7
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	2f 93       	push	r18
     8ae:	3f 93       	push	r19
     8b0:	4f 93       	push	r20
     8b2:	5f 93       	push	r21
     8b4:	6f 93       	push	r22
     8b6:	7f 93       	push	r23
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	ef 93       	push	r30
     8c6:	ff 93       	push	r31
     8c8:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     8cc:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     8d0:	0d b6       	in	r0, 0x3d	; 61
     8d2:	0d 92       	st	X+, r0
     8d4:	0e b6       	in	r0, 0x3e	; 62
     8d6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     8d8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     8dc:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     8e0:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     8e4:	cd 91       	ld	r28, X+
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	dd 91       	ld	r29, X+
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	bf 90       	pop	r11
     916:	af 90       	pop	r10
     918:	9f 90       	pop	r9
     91a:	8f 90       	pop	r8
     91c:	7f 90       	pop	r7
     91e:	6f 90       	pop	r6
     920:	5f 90       	pop	r5
     922:	4f 90       	pop	r4
     924:	3f 90       	pop	r3
     926:	2f 90       	pop	r2
     928:	1f 90       	pop	r1
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     930:	08 95       	ret

00000932 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	0f 92       	push	r0
     93a:	1f 92       	push	r1
     93c:	11 24       	eor	r1, r1
     93e:	2f 92       	push	r2
     940:	3f 92       	push	r3
     942:	4f 92       	push	r4
     944:	5f 92       	push	r5
     946:	6f 92       	push	r6
     948:	7f 92       	push	r7
     94a:	8f 92       	push	r8
     94c:	9f 92       	push	r9
     94e:	af 92       	push	r10
     950:	bf 92       	push	r11
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
     97a:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     97e:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     982:	0d b6       	in	r0, 0x3d	; 61
     984:	0d 92       	st	X+, r0
     986:	0e b6       	in	r0, 0x3e	; 62
     988:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     98a:	0e 94 27 07 	call	0xe4e	; 0xe4e <xTaskIncrementTick>
     98e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     990:	0e 94 71 08 	call	0x10e2	; 0x10e2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     994:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     998:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     99c:	cd 91       	ld	r28, X+
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	dd 91       	ld	r29, X+
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	bf 91       	pop	r27
     9ae:	af 91       	pop	r26
     9b0:	9f 91       	pop	r25
     9b2:	8f 91       	pop	r24
     9b4:	7f 91       	pop	r23
     9b6:	6f 91       	pop	r22
     9b8:	5f 91       	pop	r21
     9ba:	4f 91       	pop	r20
     9bc:	3f 91       	pop	r19
     9be:	2f 91       	pop	r18
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ff 90       	pop	r15
     9c6:	ef 90       	pop	r14
     9c8:	df 90       	pop	r13
     9ca:	cf 90       	pop	r12
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	7f 90       	pop	r7
     9d6:	6f 90       	pop	r6
     9d8:	5f 90       	pop	r5
     9da:	4f 90       	pop	r4
     9dc:	3f 90       	pop	r3
     9de:	2f 90       	pop	r2
     9e0:	1f 90       	pop	r1
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
     9e8:	08 95       	ret

000009ea <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     9ea:	0e 94 99 04 	call	0x932	; 0x932 <vPortYieldFromTick>
		asm volatile ( "reti" );
     9ee:	18 95       	reti

000009f0 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
     9f0:	e0 91 91 06 	lds	r30, 0x0691	; 0x800691 <pxDelayedTaskList>
     9f4:	f0 91 92 06 	lds	r31, 0x0692	; 0x800692 <pxDelayedTaskList+0x1>
     9f8:	80 81       	ld	r24, Z
     9fa:	81 11       	cpse	r24, r1
     9fc:	07 c0       	rjmp	.+14     	; 0xa0c <prvResetNextTaskUnblockTime+0x1c>
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	9f ef       	ldi	r25, 0xFF	; 255
     a02:	90 93 71 06 	sts	0x0671, r25	; 0x800671 <xNextTaskUnblockTime+0x1>
     a06:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <xNextTaskUnblockTime>
     a0a:	08 95       	ret
     a0c:	e0 91 91 06 	lds	r30, 0x0691	; 0x800691 <pxDelayedTaskList>
     a10:	f0 91 92 06 	lds	r31, 0x0692	; 0x800692 <pxDelayedTaskList+0x1>
     a14:	05 80       	ldd	r0, Z+5	; 0x05
     a16:	f6 81       	ldd	r31, Z+6	; 0x06
     a18:	e0 2d       	mov	r30, r0
     a1a:	80 81       	ld	r24, Z
     a1c:	91 81       	ldd	r25, Z+1	; 0x01
     a1e:	90 93 71 06 	sts	0x0671, r25	; 0x800671 <xNextTaskUnblockTime+0x1>
     a22:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <xNextTaskUnblockTime>
     a26:	08 95       	ret

00000a28 <prvDeleteTCB>:
     a28:	cf 93       	push	r28
     a2a:	df 93       	push	r29
     a2c:	ec 01       	movw	r28, r24
     a2e:	8f 89       	ldd	r24, Y+23	; 0x17
     a30:	98 8d       	ldd	r25, Y+24	; 0x18
     a32:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vPortFree>
     a36:	ce 01       	movw	r24, r28
     a38:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vPortFree>
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <prvInitialiseNewTask>:
     a42:	6f 92       	push	r6
     a44:	7f 92       	push	r7
     a46:	8f 92       	push	r8
     a48:	9f 92       	push	r9
     a4a:	af 92       	push	r10
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	4c 01       	movw	r8, r24
     a62:	d5 01       	movw	r26, r10
     a64:	57 96       	adiw	r26, 0x17	; 23
     a66:	8d 91       	ld	r24, X+
     a68:	9c 91       	ld	r25, X
     a6a:	58 97       	sbiw	r26, 0x18	; 24
     a6c:	21 50       	subi	r18, 0x01	; 1
     a6e:	31 09       	sbc	r19, r1
     a70:	3c 01       	movw	r6, r24
     a72:	62 0e       	add	r6, r18
     a74:	73 1e       	adc	r7, r19
     a76:	61 15       	cp	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	89 f4       	brne	.+34     	; 0xa9e <prvInitialiseNewTask+0x5c>
     a7c:	16 c0       	rjmp	.+44     	; 0xaaa <prvInitialiseNewTask+0x68>
     a7e:	82 2f       	mov	r24, r18
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	fb 01       	movw	r30, r22
     a84:	e8 0f       	add	r30, r24
     a86:	f9 1f       	adc	r31, r25
     a88:	30 81       	ld	r19, Z
     a8a:	d5 01       	movw	r26, r10
     a8c:	a8 0f       	add	r26, r24
     a8e:	b9 1f       	adc	r27, r25
     a90:	59 96       	adiw	r26, 0x19	; 25
     a92:	3c 93       	st	X, r19
     a94:	80 81       	ld	r24, Z
     a96:	88 23       	and	r24, r24
     a98:	29 f0       	breq	.+10     	; 0xaa4 <prvInitialiseNewTask+0x62>
     a9a:	2f 5f       	subi	r18, 0xFF	; 255
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <prvInitialiseNewTask+0x5e>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	28 30       	cpi	r18, 0x08	; 8
     aa2:	68 f3       	brcs	.-38     	; 0xa7e <prvInitialiseNewTask+0x3c>
     aa4:	f5 01       	movw	r30, r10
     aa6:	10 a2       	std	Z+32, r1	; 0x20
     aa8:	03 c0       	rjmp	.+6      	; 0xab0 <prvInitialiseNewTask+0x6e>
     aaa:	d5 01       	movw	r26, r10
     aac:	59 96       	adiw	r26, 0x19	; 25
     aae:	1c 92       	st	X, r1
     ab0:	b3 e0       	ldi	r27, 0x03	; 3
     ab2:	be 15       	cp	r27, r14
     ab4:	20 f4       	brcc	.+8      	; 0xabe <prvInitialiseNewTask+0x7c>
     ab6:	0f 2e       	mov	r0, r31
     ab8:	f3 e0       	ldi	r31, 0x03	; 3
     aba:	ef 2e       	mov	r14, r31
     abc:	f0 2d       	mov	r31, r0
     abe:	f5 01       	movw	r30, r10
     ac0:	e6 8a       	std	Z+22, r14	; 0x16
     ac2:	c5 01       	movw	r24, r10
     ac4:	02 96       	adiw	r24, 0x02	; 2
     ac6:	0e 94 cf 02 	call	0x59e	; 0x59e <vListInitialiseItem>
     aca:	c5 01       	movw	r24, r10
     acc:	0c 96       	adiw	r24, 0x0c	; 12
     ace:	0e 94 cf 02 	call	0x59e	; 0x59e <vListInitialiseItem>
     ad2:	d5 01       	movw	r26, r10
     ad4:	19 96       	adiw	r26, 0x09	; 9
     ad6:	bc 92       	st	X, r11
     ad8:	ae 92       	st	-X, r10
     ada:	18 97       	sbiw	r26, 0x08	; 8
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	8e 19       	sub	r24, r14
     ae2:	91 09       	sbc	r25, r1
     ae4:	1d 96       	adiw	r26, 0x0d	; 13
     ae6:	9c 93       	st	X, r25
     ae8:	8e 93       	st	-X, r24
     aea:	1c 97       	sbiw	r26, 0x0c	; 12
     aec:	53 96       	adiw	r26, 0x13	; 19
     aee:	bc 92       	st	X, r11
     af0:	ae 92       	st	-X, r10
     af2:	52 97       	sbiw	r26, 0x12	; 18
     af4:	84 e0       	ldi	r24, 0x04	; 4
     af6:	f5 01       	movw	r30, r10
     af8:	b1 96       	adiw	r30, 0x21	; 33
     afa:	df 01       	movw	r26, r30
     afc:	1d 92       	st	X+, r1
     afe:	8a 95       	dec	r24
     b00:	e9 f7       	brne	.-6      	; 0xafc <prvInitialiseNewTask+0xba>
     b02:	f5 01       	movw	r30, r10
     b04:	15 a2       	std	Z+37, r1	; 0x25
     b06:	a8 01       	movw	r20, r16
     b08:	b4 01       	movw	r22, r8
     b0a:	c3 01       	movw	r24, r6
     b0c:	0e 94 a5 03 	call	0x74a	; 0x74a <pxPortInitialiseStack>
     b10:	d5 01       	movw	r26, r10
     b12:	8d 93       	st	X+, r24
     b14:	9c 93       	st	X, r25
     b16:	c1 14       	cp	r12, r1
     b18:	d1 04       	cpc	r13, r1
     b1a:	19 f0       	breq	.+6      	; 0xb22 <prvInitialiseNewTask+0xe0>
     b1c:	f6 01       	movw	r30, r12
     b1e:	b1 82       	std	Z+1, r11	; 0x01
     b20:	a0 82       	st	Z, r10
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	bf 90       	pop	r11
     b32:	af 90       	pop	r10
     b34:	9f 90       	pop	r9
     b36:	8f 90       	pop	r8
     b38:	7f 90       	pop	r7
     b3a:	6f 90       	pop	r6
     b3c:	08 95       	ret

00000b3e <prvInitialiseTaskLists>:
     b3e:	cf 93       	push	r28
     b40:	c0 e0       	ldi	r28, 0x00	; 0
     b42:	10 c0       	rjmp	.+32     	; 0xb64 <prvInitialiseTaskLists+0x26>
     b44:	8c 2f       	mov	r24, r28
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	9c 01       	movw	r18, r24
     b4a:	22 0f       	add	r18, r18
     b4c:	33 1f       	adc	r19, r19
     b4e:	22 0f       	add	r18, r18
     b50:	33 1f       	adc	r19, r19
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	82 0f       	add	r24, r18
     b58:	93 1f       	adc	r25, r19
     b5a:	8b 55       	subi	r24, 0x5B	; 91
     b5c:	99 4f       	sbci	r25, 0xF9	; 249
     b5e:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
     b62:	cf 5f       	subi	r28, 0xFF	; 255
     b64:	c4 30       	cpi	r28, 0x04	; 4
     b66:	70 f3       	brcs	.-36     	; 0xb44 <prvInitialiseTaskLists+0x6>
     b68:	8c e9       	ldi	r24, 0x9C	; 156
     b6a:	96 e0       	ldi	r25, 0x06	; 6
     b6c:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
     b70:	83 e9       	ldi	r24, 0x93	; 147
     b72:	96 e0       	ldi	r25, 0x06	; 6
     b74:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
     b78:	86 e8       	ldi	r24, 0x86	; 134
     b7a:	96 e0       	ldi	r25, 0x06	; 6
     b7c:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
     b80:	8d e7       	ldi	r24, 0x7D	; 125
     b82:	96 e0       	ldi	r25, 0x06	; 6
     b84:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
     b88:	8c e9       	ldi	r24, 0x9C	; 156
     b8a:	96 e0       	ldi	r25, 0x06	; 6
     b8c:	90 93 92 06 	sts	0x0692, r25	; 0x800692 <pxDelayedTaskList+0x1>
     b90:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <pxDelayedTaskList>
     b94:	83 e9       	ldi	r24, 0x93	; 147
     b96:	96 e0       	ldi	r25, 0x06	; 6
     b98:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <pxOverflowDelayedTaskList+0x1>
     b9c:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <pxOverflowDelayedTaskList>
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <prvAddNewTaskToReadyList>:
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	0f 92       	push	r0
     bb0:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <uxCurrentNumberOfTasks>
     bba:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     bbe:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     bc2:	89 2b       	or	r24, r25
     bc4:	59 f4       	brne	.+22     	; 0xbdc <prvAddNewTaskToReadyList+0x38>
     bc6:	d0 93 ca 06 	sts	0x06CA, r29	; 0x8006ca <pxCurrentTCB+0x1>
     bca:	c0 93 c9 06 	sts	0x06C9, r28	; 0x8006c9 <pxCurrentTCB>
     bce:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	99 f4       	brne	.+38     	; 0xbfc <prvAddNewTaskToReadyList+0x58>
     bd6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <prvInitialiseTaskLists>
     bda:	10 c0       	rjmp	.+32     	; 0xbfc <prvAddNewTaskToReadyList+0x58>
     bdc:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
     be0:	81 11       	cpse	r24, r1
     be2:	0c c0       	rjmp	.+24     	; 0xbfc <prvAddNewTaskToReadyList+0x58>
     be4:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     be8:	f0 91 ca 06 	lds	r31, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     bec:	96 89       	ldd	r25, Z+22	; 0x16
     bee:	8e 89       	ldd	r24, Y+22	; 0x16
     bf0:	89 17       	cp	r24, r25
     bf2:	20 f0       	brcs	.+8      	; 0xbfc <prvAddNewTaskToReadyList+0x58>
     bf4:	d0 93 ca 06 	sts	0x06CA, r29	; 0x8006ca <pxCurrentTCB+0x1>
     bf8:	c0 93 c9 06 	sts	0x06C9, r28	; 0x8006c9 <pxCurrentTCB>
     bfc:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <uxTaskNumber>
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <uxTaskNumber>
     c06:	8e 89       	ldd	r24, Y+22	; 0x16
     c08:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
     c0c:	98 17       	cp	r25, r24
     c0e:	10 f4       	brcc	.+4      	; 0xc14 <prvAddNewTaskToReadyList+0x70>
     c10:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9c 01       	movw	r18, r24
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	82 0f       	add	r24, r18
     c26:	93 1f       	adc	r25, r19
     c28:	be 01       	movw	r22, r28
     c2a:	6e 5f       	subi	r22, 0xFE	; 254
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	8b 55       	subi	r24, 0x5B	; 91
     c30:	99 4f       	sbci	r25, 0xF9	; 249
     c32:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
     c3e:	88 23       	and	r24, r24
     c40:	51 f0       	breq	.+20     	; 0xc56 <prvAddNewTaskToReadyList+0xb2>
     c42:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     c46:	f0 91 ca 06 	lds	r31, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     c4a:	96 89       	ldd	r25, Z+22	; 0x16
     c4c:	8e 89       	ldd	r24, Y+22	; 0x16
     c4e:	98 17       	cp	r25, r24
     c50:	10 f4       	brcc	.+4      	; 0xc56 <prvAddNewTaskToReadyList+0xb2>
     c52:	0e 94 40 04 	call	0x880	; 0x880 <vPortYield>
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <prvCheckTasksWaitingTermination>:
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	1c c0       	rjmp	.+56     	; 0xc9a <prvCheckTasksWaitingTermination+0x3e>
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	0f 92       	push	r0
     c68:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <xTasksWaitingTermination+0x5>
     c6c:	f0 91 83 06 	lds	r31, 0x0683	; 0x800683 <xTasksWaitingTermination+0x6>
     c70:	c6 81       	ldd	r28, Z+6	; 0x06
     c72:	d7 81       	ldd	r29, Z+7	; 0x07
     c74:	ce 01       	movw	r24, r28
     c76:	02 96       	adiw	r24, 0x02	; 2
     c78:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
     c7c:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
     c80:	81 50       	subi	r24, 0x01	; 1
     c82:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <uxCurrentNumberOfTasks>
     c86:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <uxDeletedTasksWaitingCleanUp>
     c8a:	81 50       	subi	r24, 0x01	; 1
     c8c:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <uxDeletedTasksWaitingCleanUp>
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 14 05 	call	0xa28	; 0xa28 <prvDeleteTCB>
     c9a:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <uxDeletedTasksWaitingCleanUp>
     c9e:	81 11       	cpse	r24, r1
     ca0:	e0 cf       	rjmp	.-64     	; 0xc62 <prvCheckTasksWaitingTermination+0x6>
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <prvIdleTask>:
     ca8:	0e 94 2e 06 	call	0xc5c	; 0xc5c <prvCheckTasksWaitingTermination>
     cac:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <pxReadyTasksLists>
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	d0 f3       	brcs	.-12     	; 0xca8 <prvIdleTask>
     cb4:	0e 94 40 04 	call	0x880	; 0x880 <vPortYield>
     cb8:	f7 cf       	rjmp	.-18     	; 0xca8 <prvIdleTask>

00000cba <prvAddCurrentTaskToDelayedList>:
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	ec 01       	movw	r28, r24
     cc4:	00 91 79 06 	lds	r16, 0x0679	; 0x800679 <xTickCount>
     cc8:	10 91 7a 06 	lds	r17, 0x067A	; 0x80067a <xTickCount+0x1>
     ccc:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     cd0:	90 91 ca 06 	lds	r25, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     cd4:	02 96       	adiw	r24, 0x02	; 2
     cd6:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
     cda:	c0 0f       	add	r28, r16
     cdc:	d1 1f       	adc	r29, r17
     cde:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     ce2:	f0 91 ca 06 	lds	r31, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     ce6:	d3 83       	std	Z+3, r29	; 0x03
     ce8:	c2 83       	std	Z+2, r28	; 0x02
     cea:	c0 17       	cp	r28, r16
     cec:	d1 07       	cpc	r29, r17
     cee:	68 f4       	brcc	.+26     	; 0xd0a <prvAddCurrentTaskToDelayedList+0x50>
     cf0:	60 91 c9 06 	lds	r22, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     cf4:	70 91 ca 06 	lds	r23, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     cf8:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <pxOverflowDelayedTaskList>
     cfc:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <pxOverflowDelayedTaskList+0x1>
     d00:	6e 5f       	subi	r22, 0xFE	; 254
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInsert>
     d08:	17 c0       	rjmp	.+46     	; 0xd38 <prvAddCurrentTaskToDelayedList+0x7e>
     d0a:	60 91 c9 06 	lds	r22, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     d0e:	70 91 ca 06 	lds	r23, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     d12:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <pxDelayedTaskList>
     d16:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <pxDelayedTaskList+0x1>
     d1a:	6e 5f       	subi	r22, 0xFE	; 254
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInsert>
     d22:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <xNextTaskUnblockTime>
     d26:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <xNextTaskUnblockTime+0x1>
     d2a:	c8 17       	cp	r28, r24
     d2c:	d9 07       	cpc	r29, r25
     d2e:	20 f4       	brcc	.+8      	; 0xd38 <prvAddCurrentTaskToDelayedList+0x7e>
     d30:	d0 93 71 06 	sts	0x0671, r29	; 0x800671 <xNextTaskUnblockTime+0x1>
     d34:	c0 93 70 06 	sts	0x0670, r28	; 0x800670 <xNextTaskUnblockTime>
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <xTaskCreate>:
     d42:	2f 92       	push	r2
     d44:	3f 92       	push	r3
     d46:	4f 92       	push	r4
     d48:	5f 92       	push	r5
     d4a:	6f 92       	push	r6
     d4c:	7f 92       	push	r7
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	3c 01       	movw	r6, r24
     d68:	1b 01       	movw	r2, r22
     d6a:	5a 01       	movw	r10, r20
     d6c:	29 01       	movw	r4, r18
     d6e:	ca 01       	movw	r24, r20
     d70:	0e 94 a9 01 	call	0x352	; 0x352 <pvPortMalloc>
     d74:	6c 01       	movw	r12, r24
     d76:	89 2b       	or	r24, r25
     d78:	71 f0       	breq	.+28     	; 0xd96 <xTaskCreate+0x54>
     d7a:	86 e2       	ldi	r24, 0x26	; 38
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 a9 01 	call	0x352	; 0x352 <pvPortMalloc>
     d82:	ec 01       	movw	r28, r24
     d84:	89 2b       	or	r24, r25
     d86:	19 f0       	breq	.+6      	; 0xd8e <xTaskCreate+0x4c>
     d88:	d8 8e       	std	Y+24, r13	; 0x18
     d8a:	cf 8a       	std	Y+23, r12	; 0x17
     d8c:	06 c0       	rjmp	.+12     	; 0xd9a <xTaskCreate+0x58>
     d8e:	c6 01       	movw	r24, r12
     d90:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vPortFree>
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <xTaskCreate+0x58>
     d96:	c0 e0       	ldi	r28, 0x00	; 0
     d98:	d0 e0       	ldi	r29, 0x00	; 0
     d9a:	20 97       	sbiw	r28, 0x00	; 0
     d9c:	91 f0       	breq	.+36     	; 0xdc2 <xTaskCreate+0x80>
     d9e:	95 01       	movw	r18, r10
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	81 2c       	mov	r8, r1
     da6:	91 2c       	mov	r9, r1
     da8:	5e 01       	movw	r10, r28
     daa:	67 01       	movw	r12, r14
     dac:	e0 2e       	mov	r14, r16
     dae:	82 01       	movw	r16, r4
     db0:	b1 01       	movw	r22, r2
     db2:	c3 01       	movw	r24, r6
     db4:	0e 94 21 05 	call	0xa42	; 0xa42 <prvInitialiseNewTask>
     db8:	ce 01       	movw	r24, r28
     dba:	0e 94 d2 05 	call	0xba4	; 0xba4 <prvAddNewTaskToReadyList>
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <xTaskCreate+0x82>
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	af 90       	pop	r10
     dd8:	9f 90       	pop	r9
     dda:	8f 90       	pop	r8
     ddc:	7f 90       	pop	r7
     dde:	6f 90       	pop	r6
     de0:	5f 90       	pop	r5
     de2:	4f 90       	pop	r4
     de4:	3f 90       	pop	r3
     de6:	2f 90       	pop	r2
     de8:	08 95       	ret

00000dea <vTaskStartScheduler>:
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	0f 2e       	mov	r0, r31
     df2:	fe e6       	ldi	r31, 0x6E	; 110
     df4:	ef 2e       	mov	r14, r31
     df6:	f6 e0       	ldi	r31, 0x06	; 6
     df8:	ff 2e       	mov	r15, r31
     dfa:	f0 2d       	mov	r31, r0
     dfc:	00 e0       	ldi	r16, 0x00	; 0
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	45 e5       	ldi	r20, 0x55	; 85
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	63 e8       	ldi	r22, 0x83	; 131
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	84 e5       	ldi	r24, 0x54	; 84
     e0c:	96 e0       	ldi	r25, 0x06	; 6
     e0e:	0e 94 a1 06 	call	0xd42	; 0xd42 <xTaskCreate>
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	81 f4       	brne	.+32     	; 0xe36 <vTaskStartScheduler+0x4c>
     e16:	f8 94       	cli
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	9f ef       	ldi	r25, 0xFF	; 255
     e1c:	90 93 71 06 	sts	0x0671, r25	; 0x800671 <xNextTaskUnblockTime+0x1>
     e20:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <xNextTaskUnblockTime>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <xSchedulerRunning>
     e2a:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <xTickCount+0x1>
     e2e:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <xTickCount>
     e32:	0e 94 11 04 	call	0x822	; 0x822 <xPortStartScheduler>
     e36:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	08 95       	ret

00000e42 <vTaskSuspendAll>:
     e42:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <uxSchedulerSuspended>
     e46:	8f 5f       	subi	r24, 0xFF	; 255
     e48:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <uxSchedulerSuspended>
     e4c:	08 95       	ret

00000e4e <xTaskIncrementTick>:
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <uxSchedulerSuspended>
     e60:	81 11       	cpse	r24, r1
     e62:	9d c0       	rjmp	.+314    	; 0xf9e <xTaskIncrementTick+0x150>
     e64:	e0 90 79 06 	lds	r14, 0x0679	; 0x800679 <xTickCount>
     e68:	f0 90 7a 06 	lds	r15, 0x067A	; 0x80067a <xTickCount+0x1>
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	e8 1a       	sub	r14, r24
     e70:	f8 0a       	sbc	r15, r24
     e72:	f0 92 7a 06 	sts	0x067A, r15	; 0x80067a <xTickCount+0x1>
     e76:	e0 92 79 06 	sts	0x0679, r14	; 0x800679 <xTickCount>
     e7a:	e1 14       	cp	r14, r1
     e7c:	f1 04       	cpc	r15, r1
     e7e:	b9 f4       	brne	.+46     	; 0xeae <xTaskIncrementTick+0x60>
     e80:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <pxDelayedTaskList>
     e84:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <pxDelayedTaskList+0x1>
     e88:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <pxOverflowDelayedTaskList>
     e8c:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <pxOverflowDelayedTaskList+0x1>
     e90:	30 93 92 06 	sts	0x0692, r19	; 0x800692 <pxDelayedTaskList+0x1>
     e94:	20 93 91 06 	sts	0x0691, r18	; 0x800691 <pxDelayedTaskList>
     e98:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <pxOverflowDelayedTaskList+0x1>
     e9c:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <pxOverflowDelayedTaskList>
     ea0:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <xNumOfOverflows>
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <xNumOfOverflows>
     eaa:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <prvResetNextTaskUnblockTime>
     eae:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <xNextTaskUnblockTime>
     eb2:	90 91 71 06 	lds	r25, 0x0671	; 0x800671 <xNextTaskUnblockTime+0x1>
     eb6:	e8 16       	cp	r14, r24
     eb8:	f9 06       	cpc	r15, r25
     eba:	28 f4       	brcc	.+10     	; 0xec6 <xTaskIncrementTick+0x78>
     ebc:	d1 2c       	mov	r13, r1
     ebe:	53 c0       	rjmp	.+166    	; 0xf66 <xTaskIncrementTick+0x118>
     ec0:	dd 24       	eor	r13, r13
     ec2:	d3 94       	inc	r13
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <xTaskIncrementTick+0x7a>
     ec6:	d1 2c       	mov	r13, r1
     ec8:	e0 91 91 06 	lds	r30, 0x0691	; 0x800691 <pxDelayedTaskList>
     ecc:	f0 91 92 06 	lds	r31, 0x0692	; 0x800692 <pxDelayedTaskList+0x1>
     ed0:	80 81       	ld	r24, Z
     ed2:	81 11       	cpse	r24, r1
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <xTaskIncrementTick+0x96>
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	9f ef       	ldi	r25, 0xFF	; 255
     eda:	90 93 71 06 	sts	0x0671, r25	; 0x800671 <xNextTaskUnblockTime+0x1>
     ede:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <xNextTaskUnblockTime>
     ee2:	41 c0       	rjmp	.+130    	; 0xf66 <xTaskIncrementTick+0x118>
     ee4:	e0 91 91 06 	lds	r30, 0x0691	; 0x800691 <pxDelayedTaskList>
     ee8:	f0 91 92 06 	lds	r31, 0x0692	; 0x800692 <pxDelayedTaskList+0x1>
     eec:	05 80       	ldd	r0, Z+5	; 0x05
     eee:	f6 81       	ldd	r31, Z+6	; 0x06
     ef0:	e0 2d       	mov	r30, r0
     ef2:	c6 81       	ldd	r28, Z+6	; 0x06
     ef4:	d7 81       	ldd	r29, Z+7	; 0x07
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	9b 81       	ldd	r25, Y+3	; 0x03
     efa:	e8 16       	cp	r14, r24
     efc:	f9 06       	cpc	r15, r25
     efe:	28 f4       	brcc	.+10     	; 0xf0a <xTaskIncrementTick+0xbc>
     f00:	90 93 71 06 	sts	0x0671, r25	; 0x800671 <xNextTaskUnblockTime+0x1>
     f04:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <xNextTaskUnblockTime>
     f08:	2e c0       	rjmp	.+92     	; 0xf66 <xTaskIncrementTick+0x118>
     f0a:	8e 01       	movw	r16, r28
     f0c:	0e 5f       	subi	r16, 0xFE	; 254
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
     f10:	c8 01       	movw	r24, r16
     f12:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
     f16:	8c 89       	ldd	r24, Y+20	; 0x14
     f18:	9d 89       	ldd	r25, Y+21	; 0x15
     f1a:	89 2b       	or	r24, r25
     f1c:	21 f0       	breq	.+8      	; 0xf26 <xTaskIncrementTick+0xd8>
     f1e:	ce 01       	movw	r24, r28
     f20:	0c 96       	adiw	r24, 0x0c	; 12
     f22:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
     f26:	8e 89       	ldd	r24, Y+22	; 0x16
     f28:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
     f2c:	98 17       	cp	r25, r24
     f2e:	10 f4       	brcc	.+4      	; 0xf34 <xTaskIncrementTick+0xe6>
     f30:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9c 01       	movw	r18, r24
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	22 0f       	add	r18, r18
     f3e:	33 1f       	adc	r19, r19
     f40:	22 0f       	add	r18, r18
     f42:	33 1f       	adc	r19, r19
     f44:	82 0f       	add	r24, r18
     f46:	93 1f       	adc	r25, r19
     f48:	b8 01       	movw	r22, r16
     f4a:	8b 55       	subi	r24, 0x5B	; 91
     f4c:	99 4f       	sbci	r25, 0xF9	; 249
     f4e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
     f52:	9e 89       	ldd	r25, Y+22	; 0x16
     f54:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     f58:	f0 91 ca 06 	lds	r31, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     f5c:	86 89       	ldd	r24, Z+22	; 0x16
     f5e:	98 17       	cp	r25, r24
     f60:	08 f0       	brcs	.+2      	; 0xf64 <xTaskIncrementTick+0x116>
     f62:	ae cf       	rjmp	.-164    	; 0xec0 <xTaskIncrementTick+0x72>
     f64:	b1 cf       	rjmp	.-158    	; 0xec8 <xTaskIncrementTick+0x7a>
     f66:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <pxCurrentTCB>
     f6a:	f0 91 ca 06 	lds	r31, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
     f6e:	86 89       	ldd	r24, Z+22	; 0x16
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	fc 01       	movw	r30, r24
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	8e 0f       	add	r24, r30
     f82:	9f 1f       	adc	r25, r31
     f84:	fc 01       	movw	r30, r24
     f86:	eb 55       	subi	r30, 0x5B	; 91
     f88:	f9 4f       	sbci	r31, 0xF9	; 249
     f8a:	80 81       	ld	r24, Z
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	10 f0       	brcs	.+4      	; 0xf94 <xTaskIncrementTick+0x146>
     f90:	dd 24       	eor	r13, r13
     f92:	d3 94       	inc	r13
     f94:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xYieldPending>
     f98:	81 11       	cpse	r24, r1
     f9a:	0c c0       	rjmp	.+24     	; 0xfb4 <xTaskIncrementTick+0x166>
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <xTaskIncrementTick+0x16a>
     f9e:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <xPendedTicks>
     fa2:	90 91 76 06 	lds	r25, 0x0676	; 0x800676 <xPendedTicks+0x1>
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	90 93 76 06 	sts	0x0676, r25	; 0x800676 <xPendedTicks+0x1>
     fac:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <xPendedTicks>
     fb0:	d1 2c       	mov	r13, r1
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <xTaskIncrementTick+0x16a>
     fb4:	dd 24       	eor	r13, r13
     fb6:	d3 94       	inc	r13
     fb8:	8d 2d       	mov	r24, r13
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	08 95       	ret

00000fca <xTaskResumeAll>:
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	0f 92       	push	r0
     fd8:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <uxSchedulerSuspended>
     fdc:	81 50       	subi	r24, 0x01	; 1
     fde:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <uxSchedulerSuspended>
     fe2:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <uxSchedulerSuspended>
     fe6:	81 11       	cpse	r24, r1
     fe8:	5c c0       	rjmp	.+184    	; 0x10a2 <xTaskResumeAll+0xd8>
     fea:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
     fee:	81 11       	cpse	r24, r1
     ff0:	33 c0       	rjmp	.+102    	; 0x1058 <xTaskResumeAll+0x8e>
     ff2:	5a c0       	rjmp	.+180    	; 0x10a8 <xTaskResumeAll+0xde>
     ff4:	e0 91 8b 06 	lds	r30, 0x068B	; 0x80068b <xPendingReadyList+0x5>
     ff8:	f0 91 8c 06 	lds	r31, 0x068C	; 0x80068c <xPendingReadyList+0x6>
     ffc:	c6 81       	ldd	r28, Z+6	; 0x06
     ffe:	d7 81       	ldd	r29, Z+7	; 0x07
    1000:	ce 01       	movw	r24, r28
    1002:	0c 96       	adiw	r24, 0x0c	; 12
    1004:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    1008:	8e 01       	movw	r16, r28
    100a:	0e 5f       	subi	r16, 0xFE	; 254
    100c:	1f 4f       	sbci	r17, 0xFF	; 255
    100e:	c8 01       	movw	r24, r16
    1010:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    1014:	8e 89       	ldd	r24, Y+22	; 0x16
    1016:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
    101a:	98 17       	cp	r25, r24
    101c:	10 f4       	brcc	.+4      	; 0x1022 <xTaskResumeAll+0x58>
    101e:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 01       	movw	r18, r24
    1026:	22 0f       	add	r18, r18
    1028:	33 1f       	adc	r19, r19
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	82 0f       	add	r24, r18
    1034:	93 1f       	adc	r25, r19
    1036:	b8 01       	movw	r22, r16
    1038:	8b 55       	subi	r24, 0x5B	; 91
    103a:	99 4f       	sbci	r25, 0xF9	; 249
    103c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    1040:	9e 89       	ldd	r25, Y+22	; 0x16
    1042:	e0 91 c9 06 	lds	r30, 0x06C9	; 0x8006c9 <pxCurrentTCB>
    1046:	f0 91 ca 06 	lds	r31, 0x06CA	; 0x8006ca <pxCurrentTCB+0x1>
    104a:	86 89       	ldd	r24, Z+22	; 0x16
    104c:	98 17       	cp	r25, r24
    104e:	30 f0       	brcs	.+12     	; 0x105c <xTaskResumeAll+0x92>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <xYieldPending>
    1056:	02 c0       	rjmp	.+4      	; 0x105c <xTaskResumeAll+0x92>
    1058:	c0 e0       	ldi	r28, 0x00	; 0
    105a:	d0 e0       	ldi	r29, 0x00	; 0
    105c:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <xPendingReadyList>
    1060:	81 11       	cpse	r24, r1
    1062:	c8 cf       	rjmp	.-112    	; 0xff4 <xTaskResumeAll+0x2a>
    1064:	cd 2b       	or	r28, r29
    1066:	11 f0       	breq	.+4      	; 0x106c <xTaskResumeAll+0xa2>
    1068:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <prvResetNextTaskUnblockTime>
    106c:	c0 91 75 06 	lds	r28, 0x0675	; 0x800675 <xPendedTicks>
    1070:	d0 91 76 06 	lds	r29, 0x0676	; 0x800676 <xPendedTicks+0x1>
    1074:	20 97       	sbiw	r28, 0x00	; 0
    1076:	69 f0       	breq	.+26     	; 0x1092 <xTaskResumeAll+0xc8>
    1078:	0e 94 27 07 	call	0xe4e	; 0xe4e <xTaskIncrementTick>
    107c:	88 23       	and	r24, r24
    107e:	19 f0       	breq	.+6      	; 0x1086 <xTaskResumeAll+0xbc>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <xYieldPending>
    1086:	21 97       	sbiw	r28, 0x01	; 1
    1088:	b9 f7       	brne	.-18     	; 0x1078 <xTaskResumeAll+0xae>
    108a:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <xPendedTicks+0x1>
    108e:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <xPendedTicks>
    1092:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xYieldPending>
    1096:	88 23       	and	r24, r24
    1098:	31 f0       	breq	.+12     	; 0x10a6 <xTaskResumeAll+0xdc>
    109a:	0e 94 40 04 	call	0x880	; 0x880 <vPortYield>
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <xTaskResumeAll+0xde>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <xTaskResumeAll+0xde>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <vTaskDelay>:
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
    10bc:	89 2b       	or	r24, r25
    10be:	49 f0       	breq	.+18     	; 0x10d2 <vTaskDelay+0x1c>
    10c0:	0e 94 21 07 	call	0xe42	; 0xe42 <vTaskSuspendAll>
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	ce 01       	movw	r24, r28
    10c8:	0e 94 5d 06 	call	0xcba	; 0xcba <prvAddCurrentTaskToDelayedList>
    10cc:	0e 94 e5 07 	call	0xfca	; 0xfca <xTaskResumeAll>
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <vTaskDelay+0x1e>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	81 11       	cpse	r24, r1
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vTaskDelay+0x26>
    10d8:	0e 94 40 04 	call	0x880	; 0x880 <vPortYield>
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    10e2:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <uxSchedulerSuspended>
    10e6:	88 23       	and	r24, r24
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <xYieldPending>
    10f0:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
    10f2:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    10f6:	20 91 78 06 	lds	r18, 0x0678	; 0x800678 <uxTopReadyPriority>
    10fa:	01 c0       	rjmp	.+2      	; 0x10fe <vTaskSwitchContext+0x1c>
    10fc:	21 50       	subi	r18, 0x01	; 1
    10fe:	82 2f       	mov	r24, r18
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	fc 01       	movw	r30, r24
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	ee 0f       	add	r30, r30
    110a:	ff 1f       	adc	r31, r31
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	e8 0f       	add	r30, r24
    1112:	f9 1f       	adc	r31, r25
    1114:	eb 55       	subi	r30, 0x5B	; 91
    1116:	f9 4f       	sbci	r31, 0xF9	; 249
    1118:	30 81       	ld	r19, Z
    111a:	33 23       	and	r19, r19
    111c:	79 f3       	breq	.-34     	; 0x10fc <vTaskSwitchContext+0x1a>
    111e:	ac 01       	movw	r20, r24
    1120:	44 0f       	add	r20, r20
    1122:	55 1f       	adc	r21, r21
    1124:	44 0f       	add	r20, r20
    1126:	55 1f       	adc	r21, r21
    1128:	44 0f       	add	r20, r20
    112a:	55 1f       	adc	r21, r21
    112c:	48 0f       	add	r20, r24
    112e:	59 1f       	adc	r21, r25
    1130:	df 01       	movw	r26, r30
    1132:	01 80       	ldd	r0, Z+1	; 0x01
    1134:	f2 81       	ldd	r31, Z+2	; 0x02
    1136:	e0 2d       	mov	r30, r0
    1138:	02 80       	ldd	r0, Z+2	; 0x02
    113a:	f3 81       	ldd	r31, Z+3	; 0x03
    113c:	e0 2d       	mov	r30, r0
    113e:	12 96       	adiw	r26, 0x02	; 2
    1140:	fc 93       	st	X, r31
    1142:	ee 93       	st	-X, r30
    1144:	11 97       	sbiw	r26, 0x01	; 1
    1146:	48 55       	subi	r20, 0x58	; 88
    1148:	59 4f       	sbci	r21, 0xF9	; 249
    114a:	e4 17       	cp	r30, r20
    114c:	f5 07       	cpc	r31, r21
    114e:	29 f4       	brne	.+10     	; 0x115a <vTaskSwitchContext+0x78>
    1150:	42 81       	ldd	r20, Z+2	; 0x02
    1152:	53 81       	ldd	r21, Z+3	; 0x03
    1154:	fd 01       	movw	r30, r26
    1156:	52 83       	std	Z+2, r21	; 0x02
    1158:	41 83       	std	Z+1, r20	; 0x01
    115a:	fc 01       	movw	r30, r24
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31
    1160:	ee 0f       	add	r30, r30
    1162:	ff 1f       	adc	r31, r31
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	8e 0f       	add	r24, r30
    116a:	9f 1f       	adc	r25, r31
    116c:	fc 01       	movw	r30, r24
    116e:	eb 55       	subi	r30, 0x5B	; 91
    1170:	f9 4f       	sbci	r31, 0xF9	; 249
    1172:	01 80       	ldd	r0, Z+1	; 0x01
    1174:	f2 81       	ldd	r31, Z+2	; 0x02
    1176:	e0 2d       	mov	r30, r0
    1178:	86 81       	ldd	r24, Z+6	; 0x06
    117a:	97 81       	ldd	r25, Z+7	; 0x07
    117c:	90 93 ca 06 	sts	0x06CA, r25	; 0x8006ca <pxCurrentTCB+0x1>
    1180:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <pxCurrentTCB>
    1184:	20 93 78 06 	sts	0x0678, r18	; 0x800678 <uxTopReadyPriority>
    1188:	08 95       	ret

0000118a <_exit>:
    118a:	f8 94       	cli

0000118c <__stop_program>:
    118c:	ff cf       	rjmp	.-2      	; 0x118c <__stop_program>
