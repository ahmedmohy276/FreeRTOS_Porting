
FreeRTOS LAB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000196e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000196e  00001a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064f  00800090  00800090  00001a32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005424  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001287  00000000  00000000  000072f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eb0  00000000  00000000  0000857b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d5c  00000000  00000000  0000b42c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016db  00000000  00000000  0000c188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005aec  00000000  00000000  0000d863  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  0001334f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3d       	cpi	r26, 0xDF	; 223
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 60 04 	call	0x8c0	; 0x8c0 <main>
      8a:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VoidSetPinDirection>:
			pinvalue =PIND_REG;
			break;
	}
	
	return (pinvalue) ;
}
      92:	63 30       	cpi	r22, 0x03	; 3
      94:	51 f1       	breq	.+84     	; 0xea <DIO_VoidSetPinDirection+0x58>
      96:	18 f4       	brcc	.+6      	; 0x9e <DIO_VoidSetPinDirection+0xc>
      98:	62 30       	cpi	r22, 0x02	; 2
      9a:	41 f0       	breq	.+16     	; 0xac <DIO_VoidSetPinDirection+0x1a>
      9c:	08 95       	ret
      9e:	64 30       	cpi	r22, 0x04	; 4
      a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_VoidSetPinDirection+0x12>
      a2:	42 c0       	rjmp	.+132    	; 0x128 <DIO_VoidSetPinDirection+0x96>
      a4:	65 30       	cpi	r22, 0x05	; 5
      a6:	09 f4       	brne	.+2      	; 0xaa <DIO_VoidSetPinDirection+0x18>
      a8:	5e c0       	rjmp	.+188    	; 0x166 <DIO_VoidSetPinDirection+0xd4>
      aa:	08 95       	ret
      ac:	41 30       	cpi	r20, 0x01	; 1
      ae:	69 f4       	brne	.+26     	; 0xca <DIO_VoidSetPinDirection+0x38>
      b0:	4a b3       	in	r20, 0x1a	; 26
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	b9 01       	movw	r22, r18
      b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_VoidSetPinDirection+0x2c>
      ba:	66 0f       	add	r22, r22
      bc:	77 1f       	adc	r23, r23
      be:	8a 95       	dec	r24
      c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_VoidSetPinDirection+0x28>
      c2:	cb 01       	movw	r24, r22
      c4:	84 2b       	or	r24, r20
      c6:	8a bb       	out	0x1a, r24	; 26
      c8:	08 95       	ret
      ca:	41 11       	cpse	r20, r1
      cc:	6a c0       	rjmp	.+212    	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
      ce:	4a b3       	in	r20, 0x1a	; 26
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_VoidSetPinDirection+0x4a>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_VoidSetPinDirection+0x46>
      e0:	cb 01       	movw	r24, r22
      e2:	80 95       	com	r24
      e4:	84 23       	and	r24, r20
      e6:	8a bb       	out	0x1a, r24	; 26
      e8:	08 95       	ret
      ea:	41 30       	cpi	r20, 0x01	; 1
      ec:	69 f4       	brne	.+26     	; 0x108 <DIO_VoidSetPinDirection+0x76>
      ee:	47 b3       	in	r20, 0x17	; 23
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_VoidSetPinDirection+0x6a>
      f8:	66 0f       	add	r22, r22
      fa:	77 1f       	adc	r23, r23
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_VoidSetPinDirection+0x66>
     100:	cb 01       	movw	r24, r22
     102:	84 2b       	or	r24, r20
     104:	87 bb       	out	0x17, r24	; 23
     106:	08 95       	ret
     108:	41 11       	cpse	r20, r1
     10a:	4b c0       	rjmp	.+150    	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     10c:	47 b3       	in	r20, 0x17	; 23
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	b9 01       	movw	r22, r18
     114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_VoidSetPinDirection+0x88>
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	8a 95       	dec	r24
     11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_VoidSetPinDirection+0x84>
     11e:	cb 01       	movw	r24, r22
     120:	80 95       	com	r24
     122:	84 23       	and	r24, r20
     124:	87 bb       	out	0x17, r24	; 23
     126:	08 95       	ret
     128:	41 30       	cpi	r20, 0x01	; 1
     12a:	69 f4       	brne	.+26     	; 0x146 <DIO_VoidSetPinDirection+0xb4>
     12c:	44 b3       	in	r20, 0x14	; 20
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	b9 01       	movw	r22, r18
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_VoidSetPinDirection+0xa8>
     136:	66 0f       	add	r22, r22
     138:	77 1f       	adc	r23, r23
     13a:	8a 95       	dec	r24
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_VoidSetPinDirection+0xa4>
     13e:	cb 01       	movw	r24, r22
     140:	84 2b       	or	r24, r20
     142:	84 bb       	out	0x14, r24	; 20
     144:	08 95       	ret
     146:	41 11       	cpse	r20, r1
     148:	2c c0       	rjmp	.+88     	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     14a:	44 b3       	in	r20, 0x14	; 20
     14c:	21 e0       	ldi	r18, 0x01	; 1
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	b9 01       	movw	r22, r18
     152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_VoidSetPinDirection+0xc6>
     154:	66 0f       	add	r22, r22
     156:	77 1f       	adc	r23, r23
     158:	8a 95       	dec	r24
     15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_VoidSetPinDirection+0xc2>
     15c:	cb 01       	movw	r24, r22
     15e:	80 95       	com	r24
     160:	84 23       	and	r24, r20
     162:	84 bb       	out	0x14, r24	; 20
     164:	08 95       	ret
     166:	41 30       	cpi	r20, 0x01	; 1
     168:	69 f4       	brne	.+26     	; 0x184 <DIO_VoidSetPinDirection+0xf2>
     16a:	41 b3       	in	r20, 0x11	; 17
     16c:	21 e0       	ldi	r18, 0x01	; 1
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	b9 01       	movw	r22, r18
     172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_VoidSetPinDirection+0xe6>
     174:	66 0f       	add	r22, r22
     176:	77 1f       	adc	r23, r23
     178:	8a 95       	dec	r24
     17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_VoidSetPinDirection+0xe2>
     17c:	cb 01       	movw	r24, r22
     17e:	84 2b       	or	r24, r20
     180:	81 bb       	out	0x11, r24	; 17
     182:	08 95       	ret
     184:	41 11       	cpse	r20, r1
     186:	0d c0       	rjmp	.+26     	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     188:	41 b3       	in	r20, 0x11	; 17
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	b9 01       	movw	r22, r18
     190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_VoidSetPinDirection+0x104>
     192:	66 0f       	add	r22, r22
     194:	77 1f       	adc	r23, r23
     196:	8a 95       	dec	r24
     198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_VoidSetPinDirection+0x100>
     19a:	cb 01       	movw	r24, r22
     19c:	80 95       	com	r24
     19e:	84 23       	and	r24, r20
     1a0:	81 bb       	out	0x11, r24	; 17
     1a2:	08 95       	ret

000001a4 <DIO_VoidSetPinValue>:
     1a4:	63 30       	cpi	r22, 0x03	; 3
     1a6:	51 f1       	breq	.+84     	; 0x1fc <DIO_VoidSetPinValue+0x58>
     1a8:	18 f4       	brcc	.+6      	; 0x1b0 <DIO_VoidSetPinValue+0xc>
     1aa:	62 30       	cpi	r22, 0x02	; 2
     1ac:	41 f0       	breq	.+16     	; 0x1be <DIO_VoidSetPinValue+0x1a>
     1ae:	08 95       	ret
     1b0:	64 30       	cpi	r22, 0x04	; 4
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <DIO_VoidSetPinValue+0x12>
     1b4:	42 c0       	rjmp	.+132    	; 0x23a <DIO_VoidSetPinValue+0x96>
     1b6:	65 30       	cpi	r22, 0x05	; 5
     1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_VoidSetPinValue+0x18>
     1ba:	5e c0       	rjmp	.+188    	; 0x278 <DIO_VoidSetPinValue+0xd4>
     1bc:	08 95       	ret
     1be:	41 30       	cpi	r20, 0x01	; 1
     1c0:	69 f4       	brne	.+26     	; 0x1dc <DIO_VoidSetPinValue+0x38>
     1c2:	4b b3       	in	r20, 0x1b	; 27
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	b9 01       	movw	r22, r18
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_VoidSetPinValue+0x2c>
     1cc:	66 0f       	add	r22, r22
     1ce:	77 1f       	adc	r23, r23
     1d0:	8a 95       	dec	r24
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_VoidSetPinValue+0x28>
     1d4:	cb 01       	movw	r24, r22
     1d6:	84 2b       	or	r24, r20
     1d8:	8b bb       	out	0x1b, r24	; 27
     1da:	08 95       	ret
     1dc:	41 11       	cpse	r20, r1
     1de:	6a c0       	rjmp	.+212    	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     1e0:	4b b3       	in	r20, 0x1b	; 27
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	b9 01       	movw	r22, r18
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_VoidSetPinValue+0x4a>
     1ea:	66 0f       	add	r22, r22
     1ec:	77 1f       	adc	r23, r23
     1ee:	8a 95       	dec	r24
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_VoidSetPinValue+0x46>
     1f2:	cb 01       	movw	r24, r22
     1f4:	80 95       	com	r24
     1f6:	84 23       	and	r24, r20
     1f8:	8b bb       	out	0x1b, r24	; 27
     1fa:	08 95       	ret
     1fc:	41 30       	cpi	r20, 0x01	; 1
     1fe:	69 f4       	brne	.+26     	; 0x21a <DIO_VoidSetPinValue+0x76>
     200:	48 b3       	in	r20, 0x18	; 24
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	b9 01       	movw	r22, r18
     208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_VoidSetPinValue+0x6a>
     20a:	66 0f       	add	r22, r22
     20c:	77 1f       	adc	r23, r23
     20e:	8a 95       	dec	r24
     210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_VoidSetPinValue+0x66>
     212:	cb 01       	movw	r24, r22
     214:	84 2b       	or	r24, r20
     216:	88 bb       	out	0x18, r24	; 24
     218:	08 95       	ret
     21a:	41 11       	cpse	r20, r1
     21c:	4b c0       	rjmp	.+150    	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     21e:	48 b3       	in	r20, 0x18	; 24
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	b9 01       	movw	r22, r18
     226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_VoidSetPinValue+0x88>
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	8a 95       	dec	r24
     22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_VoidSetPinValue+0x84>
     230:	cb 01       	movw	r24, r22
     232:	80 95       	com	r24
     234:	84 23       	and	r24, r20
     236:	88 bb       	out	0x18, r24	; 24
     238:	08 95       	ret
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	69 f4       	brne	.+26     	; 0x258 <DIO_VoidSetPinValue+0xb4>
     23e:	45 b3       	in	r20, 0x15	; 21
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	b9 01       	movw	r22, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_VoidSetPinValue+0xa8>
     248:	66 0f       	add	r22, r22
     24a:	77 1f       	adc	r23, r23
     24c:	8a 95       	dec	r24
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_VoidSetPinValue+0xa4>
     250:	cb 01       	movw	r24, r22
     252:	84 2b       	or	r24, r20
     254:	85 bb       	out	0x15, r24	; 21
     256:	08 95       	ret
     258:	41 11       	cpse	r20, r1
     25a:	2c c0       	rjmp	.+88     	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     25c:	45 b3       	in	r20, 0x15	; 21
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	b9 01       	movw	r22, r18
     264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_VoidSetPinValue+0xc6>
     266:	66 0f       	add	r22, r22
     268:	77 1f       	adc	r23, r23
     26a:	8a 95       	dec	r24
     26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_VoidSetPinValue+0xc2>
     26e:	cb 01       	movw	r24, r22
     270:	80 95       	com	r24
     272:	84 23       	and	r24, r20
     274:	85 bb       	out	0x15, r24	; 21
     276:	08 95       	ret
     278:	41 30       	cpi	r20, 0x01	; 1
     27a:	69 f4       	brne	.+26     	; 0x296 <DIO_VoidSetPinValue+0xf2>
     27c:	42 b3       	in	r20, 0x12	; 18
     27e:	21 e0       	ldi	r18, 0x01	; 1
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	b9 01       	movw	r22, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_VoidSetPinValue+0xe6>
     286:	66 0f       	add	r22, r22
     288:	77 1f       	adc	r23, r23
     28a:	8a 95       	dec	r24
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_VoidSetPinValue+0xe2>
     28e:	cb 01       	movw	r24, r22
     290:	84 2b       	or	r24, r20
     292:	82 bb       	out	0x12, r24	; 18
     294:	08 95       	ret
     296:	41 11       	cpse	r20, r1
     298:	0d c0       	rjmp	.+26     	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     29a:	42 b3       	in	r20, 0x12	; 18
     29c:	21 e0       	ldi	r18, 0x01	; 1
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	b9 01       	movw	r22, r18
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_VoidSetPinValue+0x104>
     2a4:	66 0f       	add	r22, r22
     2a6:	77 1f       	adc	r23, r23
     2a8:	8a 95       	dec	r24
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_VoidSetPinValue+0x100>
     2ac:	cb 01       	movw	r24, r22
     2ae:	80 95       	com	r24
     2b0:	84 23       	and	r24, r20
     2b2:	82 bb       	out	0x12, r24	; 18
     2b4:	08 95       	ret

000002b6 <DIO_VoidSetPortValue>:
     2b6:	83 30       	cpi	r24, 0x03	; 3
     2b8:	59 f0       	breq	.+22     	; 0x2d0 <DIO_VoidSetPortValue+0x1a>
     2ba:	18 f4       	brcc	.+6      	; 0x2c2 <DIO_VoidSetPortValue+0xc>
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	31 f0       	breq	.+12     	; 0x2cc <DIO_VoidSetPortValue+0x16>
     2c0:	08 95       	ret
     2c2:	84 30       	cpi	r24, 0x04	; 4
     2c4:	39 f0       	breq	.+14     	; 0x2d4 <DIO_VoidSetPortValue+0x1e>
     2c6:	85 30       	cpi	r24, 0x05	; 5
     2c8:	39 f0       	breq	.+14     	; 0x2d8 <DIO_VoidSetPortValue+0x22>
     2ca:	08 95       	ret
     2cc:	6b bb       	out	0x1b, r22	; 27
     2ce:	08 95       	ret
     2d0:	68 bb       	out	0x18, r22	; 24
     2d2:	08 95       	ret
     2d4:	65 bb       	out	0x15, r22	; 21
     2d6:	08 95       	ret
     2d8:	62 bb       	out	0x12, r22	; 18
     2da:	08 95       	ret

000002dc <DIO_U8GetPinValue>:
     2dc:	63 30       	cpi	r22, 0x03	; 3
     2de:	a1 f0       	breq	.+40     	; 0x308 <DIO_U8GetPinValue+0x2c>
     2e0:	18 f4       	brcc	.+6      	; 0x2e8 <DIO_U8GetPinValue+0xc>
     2e2:	62 30       	cpi	r22, 0x02	; 2
     2e4:	31 f0       	breq	.+12     	; 0x2f2 <DIO_U8GetPinValue+0x16>
     2e6:	31 c0       	rjmp	.+98     	; 0x34a <DIO_U8GetPinValue+0x6e>
     2e8:	64 30       	cpi	r22, 0x04	; 4
     2ea:	c9 f0       	breq	.+50     	; 0x31e <DIO_U8GetPinValue+0x42>
     2ec:	65 30       	cpi	r22, 0x05	; 5
     2ee:	11 f1       	breq	.+68     	; 0x334 <DIO_U8GetPinValue+0x58>
     2f0:	2c c0       	rjmp	.+88     	; 0x34a <DIO_U8GetPinValue+0x6e>
     2f2:	29 b3       	in	r18, 0x19	; 25
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	a9 01       	movw	r20, r18
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_U8GetPinValue+0x22>
     2fa:	55 95       	asr	r21
     2fc:	47 95       	ror	r20
     2fe:	8a 95       	dec	r24
     300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_U8GetPinValue+0x1e>
     302:	ca 01       	movw	r24, r20
     304:	81 70       	andi	r24, 0x01	; 1
     306:	08 95       	ret
     308:	26 b3       	in	r18, 0x16	; 22
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	a9 01       	movw	r20, r18
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_U8GetPinValue+0x38>
     310:	55 95       	asr	r21
     312:	47 95       	ror	r20
     314:	8a 95       	dec	r24
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_U8GetPinValue+0x34>
     318:	ca 01       	movw	r24, r20
     31a:	81 70       	andi	r24, 0x01	; 1
     31c:	08 95       	ret
     31e:	23 b3       	in	r18, 0x13	; 19
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	a9 01       	movw	r20, r18
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_U8GetPinValue+0x4e>
     326:	55 95       	asr	r21
     328:	47 95       	ror	r20
     32a:	8a 95       	dec	r24
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_U8GetPinValue+0x4a>
     32e:	ca 01       	movw	r24, r20
     330:	81 70       	andi	r24, 0x01	; 1
     332:	08 95       	ret
     334:	20 b3       	in	r18, 0x10	; 16
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	a9 01       	movw	r20, r18
     33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_U8GetPinValue+0x64>
     33c:	55 95       	asr	r21
     33e:	47 95       	ror	r20
     340:	8a 95       	dec	r24
     342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_U8GetPinValue+0x60>
     344:	ca 01       	movw	r24, r20
     346:	81 70       	andi	r24, 0x01	; 1
     348:	08 95       	ret
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	08 95       	ret

0000034e <DIO_VoidSetHigh4BitDirection>:


void DIO_VoidSetHigh4BitDirection(u8 port_number,u8 Direction)
{
	switch(port_number)
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	81 f0       	breq	.+32     	; 0x372 <DIO_VoidSetHigh4BitDirection+0x24>
     352:	18 f4       	brcc	.+6      	; 0x35a <DIO_VoidSetHigh4BitDirection+0xc>
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	31 f0       	breq	.+12     	; 0x364 <DIO_VoidSetHigh4BitDirection+0x16>
     358:	08 95       	ret
     35a:	84 30       	cpi	r24, 0x04	; 4
     35c:	89 f0       	breq	.+34     	; 0x380 <DIO_VoidSetHigh4BitDirection+0x32>
     35e:	85 30       	cpi	r24, 0x05	; 5
     360:	b1 f0       	breq	.+44     	; 0x38e <DIO_VoidSetHigh4BitDirection+0x40>
     362:	08 95       	ret
	{
		case portA:
			DDRA_REG &=0X0F;
     364:	8a b3       	in	r24, 0x1a	; 26
     366:	8f 70       	andi	r24, 0x0F	; 15
     368:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     36a:	8a b3       	in	r24, 0x1a	; 26
     36c:	68 2b       	or	r22, r24
     36e:	6a bb       	out	0x1a, r22	; 26
			break;
     370:	08 95       	ret
			
		case portB:
			DDRA_REG &=0X0F;
     372:	8a b3       	in	r24, 0x1a	; 26
     374:	8f 70       	andi	r24, 0x0F	; 15
     376:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     378:	8a b3       	in	r24, 0x1a	; 26
     37a:	68 2b       	or	r22, r24
     37c:	6a bb       	out	0x1a, r22	; 26
			break;
     37e:	08 95       	ret
			
		case portC:
			DDRA_REG &=0X0F;
     380:	8a b3       	in	r24, 0x1a	; 26
     382:	8f 70       	andi	r24, 0x0F	; 15
     384:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     386:	8a b3       	in	r24, 0x1a	; 26
     388:	68 2b       	or	r22, r24
     38a:	6a bb       	out	0x1a, r22	; 26
			break;
     38c:	08 95       	ret
			
		case portD:
			DDRA_REG &=0X0F;
     38e:	8a b3       	in	r24, 0x1a	; 26
     390:	8f 70       	andi	r24, 0x0F	; 15
     392:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     394:	8a b3       	in	r24, 0x1a	; 26
     396:	68 2b       	or	r22, r24
     398:	6a bb       	out	0x1a, r22	; 26
     39a:	08 95       	ret

0000039c <DIO_VoidSetHigh4BitValue>:
	}
}

void DIO_VoidSetHigh4BitValue(u8 port_number,u8 value)
{
	switch(port_number)
     39c:	83 30       	cpi	r24, 0x03	; 3
     39e:	81 f0       	breq	.+32     	; 0x3c0 <DIO_VoidSetHigh4BitValue+0x24>
     3a0:	18 f4       	brcc	.+6      	; 0x3a8 <DIO_VoidSetHigh4BitValue+0xc>
     3a2:	82 30       	cpi	r24, 0x02	; 2
     3a4:	31 f0       	breq	.+12     	; 0x3b2 <DIO_VoidSetHigh4BitValue+0x16>
     3a6:	08 95       	ret
     3a8:	84 30       	cpi	r24, 0x04	; 4
     3aa:	89 f0       	breq	.+34     	; 0x3ce <DIO_VoidSetHigh4BitValue+0x32>
     3ac:	85 30       	cpi	r24, 0x05	; 5
     3ae:	b1 f0       	breq	.+44     	; 0x3dc <DIO_VoidSetHigh4BitValue+0x40>
     3b0:	08 95       	ret
	{
		case portA:
			PORTA_REG &=0X0F;
     3b2:	8b b3       	in	r24, 0x1b	; 27
     3b4:	8f 70       	andi	r24, 0x0F	; 15
     3b6:	8b bb       	out	0x1b, r24	; 27
			PORTA_REG |=value;
     3b8:	8b b3       	in	r24, 0x1b	; 27
     3ba:	68 2b       	or	r22, r24
     3bc:	6b bb       	out	0x1b, r22	; 27
			break;
     3be:	08 95       	ret
			
		case portB:
			PORTB_REG &=0X0F;
     3c0:	88 b3       	in	r24, 0x18	; 24
     3c2:	8f 70       	andi	r24, 0x0F	; 15
     3c4:	88 bb       	out	0x18, r24	; 24
			PORTB_REG |=value;
     3c6:	88 b3       	in	r24, 0x18	; 24
     3c8:	68 2b       	or	r22, r24
     3ca:	68 bb       	out	0x18, r22	; 24
			break;
     3cc:	08 95       	ret
			
		case portC:
			PORTC_REG &=0X0F;
     3ce:	85 b3       	in	r24, 0x15	; 21
     3d0:	8f 70       	andi	r24, 0x0F	; 15
     3d2:	85 bb       	out	0x15, r24	; 21
			PORTC_REG |=value;
     3d4:	85 b3       	in	r24, 0x15	; 21
     3d6:	68 2b       	or	r22, r24
     3d8:	65 bb       	out	0x15, r22	; 21
			break;
     3da:	08 95       	ret
			
		case portD:
			PORTD_REG &=0X0F;
     3dc:	82 b3       	in	r24, 0x12	; 18
     3de:	8f 70       	andi	r24, 0x0F	; 15
     3e0:	82 bb       	out	0x12, r24	; 18
			PORTD_REG |=value;
     3e2:	82 b3       	in	r24, 0x12	; 18
     3e4:	68 2b       	or	r22, r24
     3e6:	62 bb       	out	0x12, r22	; 18
     3e8:	08 95       	ret

000003ea <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
     3f0:	0e 94 6d 0a 	call	0x14da	; 0x14da <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     3f4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
     3f8:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__data_end+0x1>
     3fc:	89 2b       	or	r24, r25
     3fe:	31 f4       	brne	.+12     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     400:	85 e9       	ldi	r24, 0x95	; 149
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__data_end+0x1>
     408:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     40c:	20 97       	sbiw	r28, 0x00	; 0
     40e:	c9 f0       	breq	.+50     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     410:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <xNextFreeByte>
     414:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <xNextFreeByte+0x1>
     418:	9e 01       	movw	r18, r28
     41a:	28 0f       	add	r18, r24
     41c:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     41e:	2b 3d       	cpi	r18, 0xDB	; 219
     420:	45 e0       	ldi	r20, 0x05	; 5
     422:	34 07       	cpc	r19, r20
     424:	88 f4       	brcc	.+34     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     426:	82 17       	cp	r24, r18
     428:	93 07       	cpc	r25, r19
     42a:	88 f4       	brcc	.+34     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     42c:	c0 91 90 00 	lds	r28, 0x0090	; 0x800090 <__data_end>
     430:	d0 91 91 00 	lds	r29, 0x0091	; 0x800091 <__data_end+0x1>
     434:	c8 0f       	add	r28, r24
     436:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     438:	30 93 93 00 	sts	0x0093, r19	; 0x800093 <xNextFreeByte+0x1>
     43c:	20 93 92 00 	sts	0x0092, r18	; 0x800092 <xNextFreeByte>
     440:	08 c0       	rjmp	.+16     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     442:	c0 e0       	ldi	r28, 0x00	; 0
     444:	d0 e0       	ldi	r29, 0x00	; 0
     446:	05 c0       	rjmp	.+10     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     448:	c0 e0       	ldi	r28, 0x00	; 0
     44a:	d0 e0       	ldi	r29, 0x00	; 0
     44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     44e:	c0 e0       	ldi	r28, 0x00	; 0
     450:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     452:	0e 94 31 0b 	call	0x1662	; 0x1662 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     456:	ce 01       	movw	r24, r28
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     45e:	08 95       	ret

00000460 <Keypad_VoidInit>:
										{'1','2','3','-'},
										{' ','0','=','+'}	};

void Keypad_VoidInit(void)
{
	DIO_VoidSetPinDirection(R0,KEYPADPORT,INPUT);
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	62 e0       	ldi	r22, 0x02	; 2
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(R1,KEYPADPORT,INPUT);
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	62 e0       	ldi	r22, 0x02	; 2
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(R2,KEYPADPORT,INPUT);
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	62 e0       	ldi	r22, 0x02	; 2
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(R3,KEYPADPORT,INPUT);
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	62 e0       	ldi	r22, 0x02	; 2
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	
	DIO_VoidSetPinDirection(C0,KEYPADPORT,OUTPUT);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	62 e0       	ldi	r22, 0x02	; 2
     48c:	84 e0       	ldi	r24, 0x04	; 4
     48e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(C1,KEYPADPORT,OUTPUT);
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	62 e0       	ldi	r22, 0x02	; 2
     496:	85 e0       	ldi	r24, 0x05	; 5
     498:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(C2,KEYPADPORT,OUTPUT);
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	62 e0       	ldi	r22, 0x02	; 2
     4a0:	86 e0       	ldi	r24, 0x06	; 6
     4a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(C3,KEYPADPORT,OUTPUT);
     4a6:	41 e0       	ldi	r20, 0x01	; 1
     4a8:	62 e0       	ldi	r22, 0x02	; 2
     4aa:	87 e0       	ldi	r24, 0x07	; 7
     4ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	
	DIO_VoidSetPortValue(KEYPADPORT,0xFF);
     4b0:	6f ef       	ldi	r22, 0xFF	; 255
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_VoidSetPortValue>
     4b8:	08 95       	ret

000004ba <Keypad_U8_GetPressed>:
}

u8 Keypad_U8_GetPressed(void)
{
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <Keypad_U8_GetPressed+0xa>
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
	u8 keypad_pressed_flag=0;
	volatile u8 row_count=ROW_INIT;
     4c8:	19 82       	std	Y+1, r1	; 0x01
	volatile u8 col_count=COL_INIT;
     4ca:	84 e0       	ldi	r24, 0x04	; 4
     4cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 result=0;

	for (col_count=COL_INIT; col_count<COL_END; col_count++)
     4ce:	8a 83       	std	Y+2, r24	; 0x02
u8 Keypad_U8_GetPressed(void)
{
	u8 keypad_pressed_flag=0;
	volatile u8 row_count=ROW_INIT;
	volatile u8 col_count=COL_INIT;
	u8 result=0;
     4d0:	10 e0       	ldi	r17, 0x00	; 0
	DIO_VoidSetPortValue(KEYPADPORT,0xFF);
}

u8 Keypad_U8_GetPressed(void)
{
	u8 keypad_pressed_flag=0;
     4d2:	00 e0       	ldi	r16, 0x00	; 0
	volatile u8 row_count=ROW_INIT;
	volatile u8 col_count=COL_INIT;
	u8 result=0;

	for (col_count=COL_INIT; col_count<COL_END; col_count++)
     4d4:	3a c0       	rjmp	.+116    	; 0x54a <Keypad_U8_GetPressed+0x90>
	{
		/*************Activate column*****************/
		DIO_VoidSetPinValue(col_count,KEYPADPORT,LOW);
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	62 e0       	ldi	r22, 0x02	; 2
     4dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
			
		for (row_count=ROW_INIT; row_count<ROW_END; row_count++)
     4e0:	19 82       	std	Y+1, r1	; 0x01
     4e2:	28 c0       	rjmp	.+80     	; 0x534 <Keypad_U8_GetPressed+0x7a>
		{
			if (DIO_U8GetPinValue(row_count,KEYPADPORT) == LOW)
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	62 e0       	ldi	r22, 0x02	; 2
     4e8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_U8GetPinValue>
     4ec:	81 11       	cpse	r24, r1
     4ee:	1f c0       	rjmp	.+62     	; 0x52e <Keypad_U8_GetPressed+0x74>
			{
				result=arrkeypadvalue[row_count-ROW_INIT][col_count-COL_INIT];
     4f0:	e9 81       	ldd	r30, Y+1	; 0x01
     4f2:	2e 2f       	mov	r18, r30
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	8a 81       	ldd	r24, Y+2	; 0x02
     4f8:	e8 2f       	mov	r30, r24
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	cf 01       	movw	r24, r30
     4fe:	04 97       	sbiw	r24, 0x04	; 4
     500:	f9 01       	movw	r30, r18
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	ee 0f       	add	r30, r30
     508:	ff 1f       	adc	r31, r31
     50a:	ef 59       	subi	r30, 0x9F	; 159
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	e8 0f       	add	r30, r24
     510:	f9 1f       	adc	r31, r25
     512:	10 81       	ld	r17, Z
					
				while(DIO_U8GetPinValue(row_count,KEYPADPORT) == LOW);  //stuck till button is not pressed (single press)
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	62 e0       	ldi	r22, 0x02	; 2
     518:	0e 94 6e 01 	call	0x2dc	; 0x2dc <DIO_U8GetPinValue>
     51c:	88 23       	and	r24, r24
     51e:	d1 f3       	breq	.-12     	; 0x514 <Keypad_U8_GetPressed+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     520:	8f e1       	ldi	r24, 0x1F	; 31
     522:	9e e4       	ldi	r25, 0x4E	; 78
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <Keypad_U8_GetPressed+0x6a>
     528:	00 c0       	rjmp	.+0      	; 0x52a <Keypad_U8_GetPressed+0x70>
     52a:	00 00       	nop
					
				_delay_ms(10); //delay to avoid bouncing
					
				keypad_pressed_flag=1;
     52c:	01 e0       	ldi	r16, 0x01	; 1
	for (col_count=COL_INIT; col_count<COL_END; col_count++)
	{
		/*************Activate column*****************/
		DIO_VoidSetPinValue(col_count,KEYPADPORT,LOW);
			
		for (row_count=ROW_INIT; row_count<ROW_END; row_count++)
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	8f 5f       	subi	r24, 0xFF	; 255
     532:	89 83       	std	Y+1, r24	; 0x01
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	84 30       	cpi	r24, 0x04	; 4
     538:	a8 f2       	brcs	.-86     	; 0x4e4 <Keypad_U8_GetPressed+0x2a>
					
			}
		}
			
		/*************Deactivate column*****************/
		DIO_VoidSetPinValue(col_count,KEYPADPORT,HIGH);
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	62 e0       	ldi	r22, 0x02	; 2
     540:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	u8 keypad_pressed_flag=0;
	volatile u8 row_count=ROW_INIT;
	volatile u8 col_count=COL_INIT;
	u8 result=0;

	for (col_count=COL_INIT; col_count<COL_END; col_count++)
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	8a 83       	std	Y+2, r24	; 0x02
     54a:	8a 81       	ldd	r24, Y+2	; 0x02
     54c:	88 30       	cpi	r24, 0x08	; 8
     54e:	18 f2       	brcs	.-122    	; 0x4d6 <Keypad_U8_GetPressed+0x1c>
			
		/*************Deactivate column*****************/
		DIO_VoidSetPinValue(col_count,KEYPADPORT,HIGH);
	}
		
	if (keypad_pressed_flag !=1)
     550:	01 30       	cpi	r16, 0x01	; 1
     552:	09 f0       	breq	.+2      	; 0x556 <Keypad_U8_GetPressed+0x9c>
	{
		result = 255;
     554:	1f ef       	ldi	r17, 0xFF	; 255
	}
	
	return result;
}
     556:	81 2f       	mov	r24, r17
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <LCD_Void_4BitSendCommand>:
/************************************************************************/

static u8 INIT_step_finished=0;

void LCD_Void_4BitSendCommand(u8 command)
{
     566:	cf 93       	push	r28
     568:	c8 2f       	mov	r28, r24
	u8 COMMAND=command;
	DIO_VoidSetPinValue(RS,CONTROLPORT,LOW);
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	65 e0       	ldi	r22, 0x05	; 5
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW,CONTROLPORT,LOW);
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	65 e0       	ldi	r22, 0x05	; 5
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	COMMAND =(command) & (0XF0);
     57e:	6c 2f       	mov	r22, r28
     580:	60 7f       	andi	r22, 0xF0	; 240
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,COMMAND);
     582:	85 e0       	ldi	r24, 0x05	; 5
     584:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,COMMAND);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     588:	41 e0       	ldi	r20, 0x01	; 1
     58a:	65 e0       	ldi	r22, 0x05	; 5
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     592:	8f e9       	ldi	r24, 0x9F	; 159
     594:	9f e0       	ldi	r25, 0x0F	; 15
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	f1 f7       	brne	.-4      	; 0x596 <LCD_Void_4BitSendCommand+0x30>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <LCD_Void_4BitSendCommand+0x36>
     59c:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	65 e0       	ldi	r22, 0x05	; 5
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	if (INIT_step_finished==1)
     5a8:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <INIT_step_finished>
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	b9 f4       	brne	.+46     	; 0x5de <LCD_Void_4BitSendCommand+0x78>
	{
		COMMAND =(command<<4) & (0XF0);
     5b0:	90 e1       	ldi	r25, 0x10	; 16
     5b2:	c9 9f       	mul	r28, r25
     5b4:	b0 01       	movw	r22, r0
     5b6:	11 24       	eor	r1, r1
		
		if (UPPER_PINS_4BIT ==1)
		{
			DIO_VoidSetHigh4BitValue(DATAPORT,COMMAND);
     5b8:	85 e0       	ldi	r24, 0x05	; 5
     5ba:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_VoidSetHigh4BitValue>
		else
		{
			DIO_VoidSetLow4BitValue(DATAPORT,COMMAND);
		}
		
		DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	65 e0       	ldi	r22, 0x05	; 5
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     5c8:	8f e9       	ldi	r24, 0x9F	; 159
     5ca:	9f e0       	ldi	r25, 0x0F	; 15
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <LCD_Void_4BitSendCommand+0x66>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <LCD_Void_4BitSendCommand+0x6c>
     5d2:	00 00       	nop
		_delay_ms(2);
		DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	65 e0       	ldi	r22, 0x05	; 5
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     5de:	8f e9       	ldi	r24, 0x9F	; 159
     5e0:	9f e0       	ldi	r25, 0x0F	; 15
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LCD_Void_4BitSendCommand+0x7c>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <LCD_Void_4BitSendCommand+0x82>
     5e8:	00 00       	nop
	}
	_delay_ms(2);
}
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <LCD_Void_4BitInit>:

void LCD_Void_4BitInit(void)
{
	INIT_step_finished=0;
     5ee:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <INIT_step_finished>
	DIO_VoidSetPinDirection(RS,CONTROLPORT,OUTPUT);
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	65 e0       	ldi	r22, 0x05	; 5
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(RW,CONTROLPORT,OUTPUT);
     5fc:	41 e0       	ldi	r20, 0x01	; 1
     5fe:	65 e0       	ldi	r22, 0x05	; 5
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(EN,CONTROLPORT,OUTPUT);
     606:	41 e0       	ldi	r20, 0x01	; 1
     608:	65 e0       	ldi	r22, 0x05	; 5
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitDirection(DATAPORT,0XF0);
     610:	60 ef       	ldi	r22, 0xF0	; 240
     612:	85 e0       	ldi	r24, 0x05	; 5
     614:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_VoidSetHigh4BitDirection>
     618:	8f e5       	ldi	r24, 0x5F	; 95
     61a:	9a ee       	ldi	r25, 0xEA	; 234
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <LCD_Void_4BitInit+0x2e>
     620:	00 c0       	rjmp	.+0      	; 0x622 <LCD_Void_4BitInit+0x34>
     622:	00 00       	nop
		DIO_VoidSetLow4BitDirection(DATAPORT,0X0F);
	}
	
	
	_delay_ms(30);
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT>>4) & (0XF0));
     624:	80 e2       	ldi	r24, 0x20	; 32
     626:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT) & (0X0F0));
     62a:	80 e2       	ldi	r24, 0x20	; 32
     62c:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT<<4) & (0XF0));
     630:	80 e8       	ldi	r24, 0x80	; 128
     632:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
     636:	8f e9       	ldi	r24, 0x9F	; 159
     638:	9f e0       	ldi	r25, 0x0F	; 15
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <LCD_Void_4BitInit+0x4c>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <LCD_Void_4BitInit+0x52>
     640:	00 00       	nop
	_delay_ms(2);
	LCD_Void_4BitSendCommand((DISPLAYON) & (0XF0));
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((DISPLAYON<<4) & (0XF0));
     648:	80 ee       	ldi	r24, 0xE0	; 224
     64a:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
     64e:	8f e9       	ldi	r24, 0x9F	; 159
     650:	9f e0       	ldi	r25, 0x0F	; 15
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <LCD_Void_4BitInit+0x64>
     656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_Void_4BitInit+0x6a>
     658:	00 00       	nop
	_delay_ms(2);
	LCD_Void_4BitSendCommand((DISPLAYCLEAR) & (0XF0));
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((DISPLAYCLEAR<<4) & (0XF0));
     660:	80 e1       	ldi	r24, 0x10	; 16
     662:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
     666:	8f e2       	ldi	r24, 0x2F	; 47
     668:	95 e7       	ldi	r25, 0x75	; 117
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <LCD_Void_4BitInit+0x7c>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <LCD_Void_4BitInit+0x82>
     670:	00 00       	nop
	_delay_ms(15);
	LCD_Void_4BitSendCommand((ENTRYMODESET) & (0XF0));
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((ENTRYMODESET<<4) & (0XF0));
     678:	80 e2       	ldi	r24, 0x20	; 32
     67a:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
	
	INIT_step_finished=1;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <INIT_step_finished>
     684:	08 95       	ret

00000686 <LCD_Void_4BitSendChar>:
}


/* LCD_VoidSendChar('0')  */
void LCD_Void_4BitSendChar(u8 data)
{
     686:	cf 93       	push	r28
     688:	c8 2f       	mov	r28, r24
	u8 DATA =data;
	DIO_VoidSetPinValue(RS,CONTROLPORT,HIGH);
     68a:	41 e0       	ldi	r20, 0x01	; 1
     68c:	65 e0       	ldi	r22, 0x05	; 5
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW,CONTROLPORT,LOW);
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	65 e0       	ldi	r22, 0x05	; 5
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	
	DATA =(data) & (0XF0);
     69e:	6c 2f       	mov	r22, r28
     6a0:	60 7f       	andi	r22, 0xF0	; 240
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,DATA);
     6a2:	85 e0       	ldi	r24, 0x05	; 5
     6a4:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,DATA);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	65 e0       	ldi	r22, 0x05	; 5
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     6b2:	8f e9       	ldi	r24, 0x9F	; 159
     6b4:	9f e0       	ldi	r25, 0x0F	; 15
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_Void_4BitSendChar+0x30>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_Void_4BitSendChar+0x36>
     6bc:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	65 e0       	ldi	r22, 0x05	; 5
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	DATA =(data<<4) & (0XF0);
     6c8:	90 e1       	ldi	r25, 0x10	; 16
     6ca:	c9 9f       	mul	r28, r25
     6cc:	b0 01       	movw	r22, r0
     6ce:	11 24       	eor	r1, r1
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,DATA);
     6d0:	85 e0       	ldi	r24, 0x05	; 5
     6d2:	0e 94 ce 01 	call	0x39c	; 0x39c <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,DATA);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     6d6:	41 e0       	ldi	r20, 0x01	; 1
     6d8:	65 e0       	ldi	r22, 0x05	; 5
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     6e0:	8f e9       	ldi	r24, 0x9F	; 159
     6e2:	9f e0       	ldi	r25, 0x0F	; 15
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	f1 f7       	brne	.-4      	; 0x6e4 <LCD_Void_4BitSendChar+0x5e>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <LCD_Void_4BitSendChar+0x64>
     6ea:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	65 e0       	ldi	r22, 0x05	; 5
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
}
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <LCD_Void_4BitSendString>:

void LCD_Void_4BitSendString(u8* PtrToString)
{
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	8c 01       	movw	r16, r24
	u8 i=0;
     702:	c0 e0       	ldi	r28, 0x00	; 0
	while(PtrToString[i] !='\0')
     704:	03 c0       	rjmp	.+6      	; 0x70c <LCD_Void_4BitSendString+0x12>
	{
		LCD_Void_4BitSendChar(PtrToString[i]);
     706:	0e 94 43 03 	call	0x686	; 0x686 <LCD_Void_4BitSendChar>
		i++;
     70a:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_Void_4BitSendString(u8* PtrToString)
{
	u8 i=0;
	while(PtrToString[i] !='\0')
     70c:	f8 01       	movw	r30, r16
     70e:	ec 0f       	add	r30, r28
     710:	f1 1d       	adc	r31, r1
     712:	80 81       	ld	r24, Z
     714:	81 11       	cpse	r24, r1
     716:	f7 cf       	rjmp	.-18     	; 0x706 <LCD_Void_4BitSendString+0xc>
	{
		LCD_Void_4BitSendChar(PtrToString[i]);
		i++;
	}
}
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	08 95       	ret

00000720 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     720:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     722:	03 96       	adiw	r24, 0x03	; 3
     724:	92 83       	std	Z+2, r25	; 0x02
     726:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     728:	2f ef       	ldi	r18, 0xFF	; 255
     72a:	3f ef       	ldi	r19, 0xFF	; 255
     72c:	34 83       	std	Z+4, r19	; 0x04
     72e:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     730:	96 83       	std	Z+6, r25	; 0x06
     732:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     734:	90 87       	std	Z+8, r25	; 0x08
     736:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     738:	10 82       	st	Z, r1
     73a:	08 95       	ret

0000073c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     73c:	fc 01       	movw	r30, r24
     73e:	11 86       	std	Z+9, r1	; 0x09
     740:	10 86       	std	Z+8, r1	; 0x08
     742:	08 95       	ret

00000744 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	9c 01       	movw	r18, r24
     74a:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     74c:	dc 01       	movw	r26, r24
     74e:	11 96       	adiw	r26, 0x01	; 1
     750:	cd 91       	ld	r28, X+
     752:	dc 91       	ld	r29, X
     754:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     756:	d3 83       	std	Z+3, r29	; 0x03
     758:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     75a:	8c 81       	ldd	r24, Y+4	; 0x04
     75c:	9d 81       	ldd	r25, Y+5	; 0x05
     75e:	95 83       	std	Z+5, r25	; 0x05
     760:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     762:	8c 81       	ldd	r24, Y+4	; 0x04
     764:	9d 81       	ldd	r25, Y+5	; 0x05
     766:	dc 01       	movw	r26, r24
     768:	13 96       	adiw	r26, 0x03	; 3
     76a:	7c 93       	st	X, r23
     76c:	6e 93       	st	-X, r22
     76e:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     770:	7d 83       	std	Y+5, r23	; 0x05
     772:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     774:	31 87       	std	Z+9, r19	; 0x09
     776:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     778:	f9 01       	movw	r30, r18
     77a:	80 81       	ld	r24, Z
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	80 83       	st	Z, r24
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     78c:	48 81       	ld	r20, Y
     78e:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     790:	4f 3f       	cpi	r20, 0xFF	; 255
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	52 07       	cpc	r21, r18
     796:	21 f4       	brne	.+8      	; 0x7a0 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     798:	fc 01       	movw	r30, r24
     79a:	a7 81       	ldd	r26, Z+7	; 0x07
     79c:	b0 85       	ldd	r27, Z+8	; 0x08
     79e:	0d c0       	rjmp	.+26     	; 0x7ba <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7a0:	dc 01       	movw	r26, r24
     7a2:	13 96       	adiw	r26, 0x03	; 3
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <vListInsert+0x22>
     7a6:	df 01       	movw	r26, r30
     7a8:	12 96       	adiw	r26, 0x02	; 2
     7aa:	ed 91       	ld	r30, X+
     7ac:	fc 91       	ld	r31, X
     7ae:	13 97       	sbiw	r26, 0x03	; 3
     7b0:	20 81       	ld	r18, Z
     7b2:	31 81       	ldd	r19, Z+1	; 0x01
     7b4:	42 17       	cp	r20, r18
     7b6:	53 07       	cpc	r21, r19
     7b8:	b0 f7       	brcc	.-20     	; 0x7a6 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7ba:	12 96       	adiw	r26, 0x02	; 2
     7bc:	ed 91       	ld	r30, X+
     7be:	fc 91       	ld	r31, X
     7c0:	13 97       	sbiw	r26, 0x03	; 3
     7c2:	fb 83       	std	Y+3, r31	; 0x03
     7c4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7c6:	d5 83       	std	Z+5, r29	; 0x05
     7c8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     7ca:	bd 83       	std	Y+5, r27	; 0x05
     7cc:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     7ce:	13 96       	adiw	r26, 0x03	; 3
     7d0:	dc 93       	st	X, r29
     7d2:	ce 93       	st	-X, r28
     7d4:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     7d6:	99 87       	std	Y+9, r25	; 0x09
     7d8:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     7da:	fc 01       	movw	r30, r24
     7dc:	20 81       	ld	r18, Z
     7de:	2f 5f       	subi	r18, 0xFF	; 255
     7e0:	20 83       	st	Z, r18
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     7ee:	a0 85       	ldd	r26, Z+8	; 0x08
     7f0:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7f2:	c2 81       	ldd	r28, Z+2	; 0x02
     7f4:	d3 81       	ldd	r29, Z+3	; 0x03
     7f6:	84 81       	ldd	r24, Z+4	; 0x04
     7f8:	95 81       	ldd	r25, Z+5	; 0x05
     7fa:	9d 83       	std	Y+5, r25	; 0x05
     7fc:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7fe:	c4 81       	ldd	r28, Z+4	; 0x04
     800:	d5 81       	ldd	r29, Z+5	; 0x05
     802:	82 81       	ldd	r24, Z+2	; 0x02
     804:	93 81       	ldd	r25, Z+3	; 0x03
     806:	9b 83       	std	Y+3, r25	; 0x03
     808:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     80a:	11 96       	adiw	r26, 0x01	; 1
     80c:	8d 91       	ld	r24, X+
     80e:	9c 91       	ld	r25, X
     810:	12 97       	sbiw	r26, 0x02	; 2
     812:	e8 17       	cp	r30, r24
     814:	f9 07       	cpc	r31, r25
     816:	31 f4       	brne	.+12     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     818:	84 81       	ldd	r24, Z+4	; 0x04
     81a:	95 81       	ldd	r25, Z+5	; 0x05
     81c:	12 96       	adiw	r26, 0x02	; 2
     81e:	9c 93       	st	X, r25
     820:	8e 93       	st	-X, r24
     822:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     824:	11 86       	std	Z+9, r1	; 0x09
     826:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     828:	8c 91       	ld	r24, X
     82a:	81 50       	subi	r24, 0x01	; 1
     82c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     82e:	8c 91       	ld	r24, X
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <Keypad_task>:
	return 0;
}


void Keypad_task(void *pvParameter)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	1f 92       	push	r1
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
	unsigned char val;
	BaseType_t check = pdFALSE;
	for (;;)
	{
		val = Keypad_U8_GetPressed();
     840:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Keypad_U8_GetPressed>
     844:	89 83       	std	Y+1, r24	; 0x01
		if (val != 255)
     846:	8f 3f       	cpi	r24, 0xFF	; 255
     848:	61 f0       	breq	.+24     	; 0x862 <__stack+0x3>
		{
			check = xQueueSend(Queue1,&val,portMAX_DELAY);
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	4f ef       	ldi	r20, 0xFF	; 255
     84e:	5f ef       	ldi	r21, 0xFF	; 255
     850:	be 01       	movw	r22, r28
     852:	6f 5f       	subi	r22, 0xFF	; 255
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <Queue1>
     85a:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <Queue1+0x1>
     85e:	0e 94 24 07 	call	0xe48	; 0xe48 <xQueueGenericSend>
			{
				/* Failed to post the message, even after portMAX_DELAY ticks. */
			}
		}
		
		vTaskDelay(100);			// During this delay the task in the waiting state
     862:	84 e6       	ldi	r24, 0x64	; 100
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 a7 0b 	call	0x174e	; 0x174e <vTaskDelay>
	}
     86a:	ea cf       	rjmp	.-44     	; 0x840 <Keypad_task+0xa>

0000086c <LCD_task>:
}


void LCD_task(void *pvParameter)
{
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	1f 92       	push	r1
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
	BaseType_t ret = pdFALSE;
	unsigned char val;
	static unsigned char count = 0;
	for (;;)
	{
		ret = xQueueReceive(Queue1,&val,portMAX_DELAY);
     876:	4f ef       	ldi	r20, 0xFF	; 255
     878:	5f ef       	ldi	r21, 0xFF	; 255
     87a:	be 01       	movw	r22, r28
     87c:	6f 5f       	subi	r22, 0xFF	; 255
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <Queue1>
     884:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <Queue1+0x1>
     888:	0e 94 b6 07 	call	0xf6c	; 0xf6c <xQueueReceive>
		if (ret == pdTRUE)
     88c:	81 30       	cpi	r24, 0x01	; 1
     88e:	99 f7       	brne	.-26     	; 0x876 <LCD_task+0xa>
		{
			count++ ;
     890:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <count.2657>
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <count.2657>
			if (count > 10)
     89a:	8b 30       	cpi	r24, 0x0B	; 11
     89c:	40 f0       	brcs	.+16     	; 0x8ae <LCD_task+0x42>
			{
				LCD_Void_4BitSendCommand(DISPLAYCLEAR);
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_Void_4BitSendCommand>
				LCD_Void_4BitSendString((u8*)"wait");
     8a4:	81 e7       	ldi	r24, 0x71	; 113
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_Void_4BitSendString>
     8ac:	e4 cf       	rjmp	.-56     	; 0x876 <LCD_task+0xa>
			} 
			else
			{
				LCD_Void_4BitSendChar(val);
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	0e 94 43 03 	call	0x686	; 0x686 <LCD_Void_4BitSendChar>
     8b4:	e0 cf       	rjmp	.-64     	; 0x876 <LCD_task+0xa>

000008b6 <system_init>:

void LCD_task(void *pvParameter);

void system_init(void)
{
	Keypad_VoidInit();
     8b6:	0e 94 30 02 	call	0x460	; 0x460 <Keypad_VoidInit>
	LCD_Void_4BitInit();
     8ba:	0e 94 f7 02 	call	0x5ee	; 0x5ee <LCD_Void_4BitInit>
     8be:	08 95       	ret

000008c0 <main>:
}


int main()
{
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
	
	system_init();
     8c6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <system_init>
	
	Queue1 = xQueueCreate(10,sizeof(unsigned char));
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	8a e0       	ldi	r24, 0x0A	; 10
     8d0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <xQueueGenericCreate>
     8d4:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <Queue1+0x1>
     8d8:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <Queue1>
		/* Queue was not created and must not be used. */
	}

	BaseType_t task1_return = pdFALSE, task2_return = pdFALSE ;
	/* Create the Tasks */
	task1_return = xTaskCreate((pdTASK_CODE)Keypad_task, (signed char *)"Keypad_task", configMINIMAL_STACK_SIZE, NULL, TASK1_PRIORITY, &Keypad_handle);
     8dc:	0f 2e       	mov	r0, r31
     8de:	f6 e7       	ldi	r31, 0x76	; 118
     8e0:	ef 2e       	mov	r14, r31
     8e2:	f6 e0       	ldi	r31, 0x06	; 6
     8e4:	ff 2e       	mov	r15, r31
     8e6:	f0 2d       	mov	r31, r0
     8e8:	03 e0       	ldi	r16, 0x03	; 3
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	45 e5       	ldi	r20, 0x55	; 85
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	66 e7       	ldi	r22, 0x76	; 118
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	8b e1       	ldi	r24, 0x1B	; 27
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	0e 94 ed 09 	call	0x13da	; 0x13da <xTaskCreate>
	task2_return = xTaskCreate((pdTASK_CODE)LCD_task, (signed char *)"LCD_task", configMINIMAL_STACK_SIZE, NULL, TASK2_PRIORITY, &LCD_handle);
     8fe:	0f 2e       	mov	r0, r31
     900:	f4 e7       	ldi	r31, 0x74	; 116
     902:	ef 2e       	mov	r14, r31
     904:	f6 e0       	ldi	r31, 0x06	; 6
     906:	ff 2e       	mov	r15, r31
     908:	f0 2d       	mov	r31, r0
     90a:	02 e0       	ldi	r16, 0x02	; 2
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	45 e5       	ldi	r20, 0x55	; 85
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	62 e8       	ldi	r22, 0x82	; 130
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	86 e3       	ldi	r24, 0x36	; 54
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	0e 94 ed 09 	call	0x13da	; 0x13da <xTaskCreate>
	if (task2_return == pdTRUE)
	{
		/* task2 created successfully */
	}
	
	vTaskStartScheduler();
     920:	0e 94 41 0a 	call	0x1482	; 0x1482 <vTaskStartScheduler>
	return 0;
}
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	08 95       	ret

00000930 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     930:	1b bc       	out	0x2b, r1	; 43
     932:	8c e7       	ldi	r24, 0x7C	; 124
     934:	8a bd       	out	0x2a, r24	; 42
     936:	8b e0       	ldi	r24, 0x0B	; 11
     938:	8e bd       	out	0x2e, r24	; 46
     93a:	89 b7       	in	r24, 0x39	; 57
     93c:	80 61       	ori	r24, 0x10	; 16
     93e:	89 bf       	out	0x39, r24	; 57
     940:	08 95       	ret

00000942 <pxPortInitialiseStack>:
     942:	31 e1       	ldi	r19, 0x11	; 17
     944:	fc 01       	movw	r30, r24
     946:	30 83       	st	Z, r19
     948:	31 97       	sbiw	r30, 0x01	; 1
     94a:	22 e2       	ldi	r18, 0x22	; 34
     94c:	20 83       	st	Z, r18
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	a3 e3       	ldi	r26, 0x33	; 51
     952:	a0 83       	st	Z, r26
     954:	31 97       	sbiw	r30, 0x01	; 1
     956:	60 83       	st	Z, r22
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	70 83       	st	Z, r23
     95c:	31 97       	sbiw	r30, 0x01	; 1
     95e:	10 82       	st	Z, r1
     960:	31 97       	sbiw	r30, 0x01	; 1
     962:	60 e8       	ldi	r22, 0x80	; 128
     964:	60 83       	st	Z, r22
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	10 82       	st	Z, r1
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	62 e0       	ldi	r22, 0x02	; 2
     96e:	60 83       	st	Z, r22
     970:	31 97       	sbiw	r30, 0x01	; 1
     972:	63 e0       	ldi	r22, 0x03	; 3
     974:	60 83       	st	Z, r22
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	64 e0       	ldi	r22, 0x04	; 4
     97a:	60 83       	st	Z, r22
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	65 e0       	ldi	r22, 0x05	; 5
     980:	60 83       	st	Z, r22
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	66 e0       	ldi	r22, 0x06	; 6
     986:	60 83       	st	Z, r22
     988:	31 97       	sbiw	r30, 0x01	; 1
     98a:	67 e0       	ldi	r22, 0x07	; 7
     98c:	60 83       	st	Z, r22
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	68 e0       	ldi	r22, 0x08	; 8
     992:	60 83       	st	Z, r22
     994:	31 97       	sbiw	r30, 0x01	; 1
     996:	69 e0       	ldi	r22, 0x09	; 9
     998:	60 83       	st	Z, r22
     99a:	31 97       	sbiw	r30, 0x01	; 1
     99c:	60 e1       	ldi	r22, 0x10	; 16
     99e:	60 83       	st	Z, r22
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	30 83       	st	Z, r19
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	32 e1       	ldi	r19, 0x12	; 18
     9a8:	30 83       	st	Z, r19
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	33 e1       	ldi	r19, 0x13	; 19
     9ae:	30 83       	st	Z, r19
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	34 e1       	ldi	r19, 0x14	; 20
     9b4:	30 83       	st	Z, r19
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	35 e1       	ldi	r19, 0x15	; 21
     9ba:	30 83       	st	Z, r19
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	36 e1       	ldi	r19, 0x16	; 22
     9c0:	30 83       	st	Z, r19
     9c2:	31 97       	sbiw	r30, 0x01	; 1
     9c4:	37 e1       	ldi	r19, 0x17	; 23
     9c6:	30 83       	st	Z, r19
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	38 e1       	ldi	r19, 0x18	; 24
     9cc:	30 83       	st	Z, r19
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	39 e1       	ldi	r19, 0x19	; 25
     9d2:	30 83       	st	Z, r19
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	30 e2       	ldi	r19, 0x20	; 32
     9d8:	30 83       	st	Z, r19
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	31 e2       	ldi	r19, 0x21	; 33
     9de:	30 83       	st	Z, r19
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	20 83       	st	Z, r18
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	23 e2       	ldi	r18, 0x23	; 35
     9e8:	20 83       	st	Z, r18
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	40 83       	st	Z, r20
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	50 83       	st	Z, r21
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	26 e2       	ldi	r18, 0x26	; 38
     9f6:	20 83       	st	Z, r18
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	27 e2       	ldi	r18, 0x27	; 39
     9fc:	20 83       	st	Z, r18
     9fe:	31 97       	sbiw	r30, 0x01	; 1
     a00:	28 e2       	ldi	r18, 0x28	; 40
     a02:	20 83       	st	Z, r18
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	29 e2       	ldi	r18, 0x29	; 41
     a08:	20 83       	st	Z, r18
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	20 e3       	ldi	r18, 0x30	; 48
     a0e:	20 83       	st	Z, r18
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	21 e3       	ldi	r18, 0x31	; 49
     a14:	20 83       	st	Z, r18
     a16:	86 97       	sbiw	r24, 0x26	; 38
     a18:	08 95       	ret

00000a1a <xPortStartScheduler>:
     a1a:	0e 94 98 04 	call	0x930	; 0x930 <prvSetupTimerInterrupt>
     a1e:	a0 91 dd 06 	lds	r26, 0x06DD	; 0x8006dd <pxCurrentTCB>
     a22:	b0 91 de 06 	lds	r27, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
     a26:	cd 91       	ld	r28, X+
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	dd 91       	ld	r29, X+
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	bf 91       	pop	r27
     a38:	af 91       	pop	r26
     a3a:	9f 91       	pop	r25
     a3c:	8f 91       	pop	r24
     a3e:	7f 91       	pop	r23
     a40:	6f 91       	pop	r22
     a42:	5f 91       	pop	r21
     a44:	4f 91       	pop	r20
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	7f 90       	pop	r7
     a60:	6f 90       	pop	r6
     a62:	5f 90       	pop	r5
     a64:	4f 90       	pop	r4
     a66:	3f 90       	pop	r3
     a68:	2f 90       	pop	r2
     a6a:	1f 90       	pop	r1
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	08 95       	ret
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret

00000a78 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	0f 92       	push	r0
     a80:	1f 92       	push	r1
     a82:	11 24       	eor	r1, r1
     a84:	2f 92       	push	r2
     a86:	3f 92       	push	r3
     a88:	4f 92       	push	r4
     a8a:	5f 92       	push	r5
     a8c:	6f 92       	push	r6
     a8e:	7f 92       	push	r7
     a90:	8f 92       	push	r8
     a92:	9f 92       	push	r9
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	2f 93       	push	r18
     aa6:	3f 93       	push	r19
     aa8:	4f 93       	push	r20
     aaa:	5f 93       	push	r21
     aac:	6f 93       	push	r22
     aae:	7f 93       	push	r23
     ab0:	8f 93       	push	r24
     ab2:	9f 93       	push	r25
     ab4:	af 93       	push	r26
     ab6:	bf 93       	push	r27
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
     ac0:	a0 91 dd 06 	lds	r26, 0x06DD	; 0x8006dd <pxCurrentTCB>
     ac4:	b0 91 de 06 	lds	r27, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
     ac8:	0d b6       	in	r0, 0x3d	; 61
     aca:	0d 92       	st	X+, r0
     acc:	0e b6       	in	r0, 0x3e	; 62
     ace:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     ad0:	0e 94 bd 0b 	call	0x177a	; 0x177a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     ad4:	a0 91 dd 06 	lds	r26, 0x06DD	; 0x8006dd <pxCurrentTCB>
     ad8:	b0 91 de 06 	lds	r27, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
     adc:	cd 91       	ld	r28, X+
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	dd 91       	ld	r29, X+
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	bf 91       	pop	r27
     aee:	af 91       	pop	r26
     af0:	9f 91       	pop	r25
     af2:	8f 91       	pop	r24
     af4:	7f 91       	pop	r23
     af6:	6f 91       	pop	r22
     af8:	5f 91       	pop	r21
     afa:	4f 91       	pop	r20
     afc:	3f 91       	pop	r19
     afe:	2f 91       	pop	r18
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	9f 90       	pop	r9
     b12:	8f 90       	pop	r8
     b14:	7f 90       	pop	r7
     b16:	6f 90       	pop	r6
     b18:	5f 90       	pop	r5
     b1a:	4f 90       	pop	r4
     b1c:	3f 90       	pop	r3
     b1e:	2f 90       	pop	r2
     b20:	1f 90       	pop	r1
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b28:	08 95       	ret

00000b2a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	0f 92       	push	r0
     b32:	1f 92       	push	r1
     b34:	11 24       	eor	r1, r1
     b36:	2f 92       	push	r2
     b38:	3f 92       	push	r3
     b3a:	4f 92       	push	r4
     b3c:	5f 92       	push	r5
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
     b72:	a0 91 dd 06 	lds	r26, 0x06DD	; 0x8006dd <pxCurrentTCB>
     b76:	b0 91 de 06 	lds	r27, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
     b7a:	0d b6       	in	r0, 0x3d	; 61
     b7c:	0d 92       	st	X+, r0
     b7e:	0e b6       	in	r0, 0x3e	; 62
     b80:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     b82:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <xTaskIncrementTick>
     b86:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     b88:	0e 94 bd 0b 	call	0x177a	; 0x177a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     b8c:	a0 91 dd 06 	lds	r26, 0x06DD	; 0x8006dd <pxCurrentTCB>
     b90:	b0 91 de 06 	lds	r27, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
     b94:	cd 91       	ld	r28, X+
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	dd 91       	ld	r29, X+
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	ff 91       	pop	r31
     b9e:	ef 91       	pop	r30
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	bf 91       	pop	r27
     ba6:	af 91       	pop	r26
     ba8:	9f 91       	pop	r25
     baa:	8f 91       	pop	r24
     bac:	7f 91       	pop	r23
     bae:	6f 91       	pop	r22
     bb0:	5f 91       	pop	r21
     bb2:	4f 91       	pop	r20
     bb4:	3f 91       	pop	r19
     bb6:	2f 91       	pop	r18
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	9f 90       	pop	r9
     bca:	8f 90       	pop	r8
     bcc:	7f 90       	pop	r7
     bce:	6f 90       	pop	r6
     bd0:	5f 90       	pop	r5
     bd2:	4f 90       	pop	r4
     bd4:	3f 90       	pop	r3
     bd6:	2f 90       	pop	r2
     bd8:	1f 90       	pop	r1
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	0f 90       	pop	r0

	asm volatile ( "ret" );
     be0:	08 95       	ret

00000be2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     be2:	0e 94 95 05 	call	0xb2a	; 0xb2a <vPortYieldFromTick>
		asm volatile ( "reti" );
     be6:	18 95       	reti

00000be8 <prvIsQueueEmpty>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	0f 92       	push	r0
     bee:	fc 01       	movw	r30, r24
     bf0:	82 8d       	ldd	r24, Z+26	; 0x1a
     bf2:	81 11       	cpse	r24, r1
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <prvIsQueueEmpty+0x12>
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <prvIsQueueEmpty+0x14>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	08 95       	ret

00000c02 <prvIsQueueFull>:
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	0f 92       	push	r0
     c08:	fc 01       	movw	r30, r24
     c0a:	22 8d       	ldd	r18, Z+26	; 0x1a
     c0c:	83 8d       	ldd	r24, Z+27	; 0x1b
     c0e:	28 13       	cpse	r18, r24
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <prvIsQueueFull+0x14>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <prvIsQueueFull+0x16>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	08 95       	ret

00000c1e <prvCopyDataToQueue>:
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
     c28:	04 2f       	mov	r16, r20
     c2a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     c2c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     c2e:	44 23       	and	r20, r20
     c30:	b9 f1       	breq	.+110    	; 0xca0 <prvCopyDataToQueue+0x82>
     c32:	01 11       	cpse	r16, r1
     c34:	16 c0       	rjmp	.+44     	; 0xc62 <prvCopyDataToQueue+0x44>
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <memcpy>
     c40:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	9b 81       	ldd	r25, Y+3	; 0x03
     c46:	82 0f       	add	r24, r18
     c48:	91 1d       	adc	r25, r1
     c4a:	9b 83       	std	Y+3, r25	; 0x03
     c4c:	8a 83       	std	Y+2, r24	; 0x02
     c4e:	2c 81       	ldd	r18, Y+4	; 0x04
     c50:	3d 81       	ldd	r19, Y+5	; 0x05
     c52:	82 17       	cp	r24, r18
     c54:	93 07       	cpc	r25, r19
     c56:	20 f1       	brcs	.+72     	; 0xca0 <prvCopyDataToQueue+0x82>
     c58:	88 81       	ld	r24, Y
     c5a:	99 81       	ldd	r25, Y+1	; 0x01
     c5c:	9b 83       	std	Y+3, r25	; 0x03
     c5e:	8a 83       	std	Y+2, r24	; 0x02
     c60:	1f c0       	rjmp	.+62     	; 0xca0 <prvCopyDataToQueue+0x82>
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	8e 81       	ldd	r24, Y+6	; 0x06
     c66:	9f 81       	ldd	r25, Y+7	; 0x07
     c68:	0e 94 ac 0c 	call	0x1958	; 0x1958 <memcpy>
     c6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	91 95       	neg	r25
     c72:	81 95       	neg	r24
     c74:	91 09       	sbc	r25, r1
     c76:	2e 81       	ldd	r18, Y+6	; 0x06
     c78:	3f 81       	ldd	r19, Y+7	; 0x07
     c7a:	28 0f       	add	r18, r24
     c7c:	39 1f       	adc	r19, r25
     c7e:	3f 83       	std	Y+7, r19	; 0x07
     c80:	2e 83       	std	Y+6, r18	; 0x06
     c82:	48 81       	ld	r20, Y
     c84:	59 81       	ldd	r21, Y+1	; 0x01
     c86:	24 17       	cp	r18, r20
     c88:	35 07       	cpc	r19, r21
     c8a:	30 f4       	brcc	.+12     	; 0xc98 <prvCopyDataToQueue+0x7a>
     c8c:	2c 81       	ldd	r18, Y+4	; 0x04
     c8e:	3d 81       	ldd	r19, Y+5	; 0x05
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	9f 83       	std	Y+7, r25	; 0x07
     c96:	8e 83       	std	Y+6, r24	; 0x06
     c98:	02 30       	cpi	r16, 0x02	; 2
     c9a:	11 f4       	brne	.+4      	; 0xca0 <prvCopyDataToQueue+0x82>
     c9c:	11 11       	cpse	r17, r1
     c9e:	11 50       	subi	r17, 0x01	; 1
     ca0:	1f 5f       	subi	r17, 0xFF	; 255
     ca2:	1a 8f       	std	Y+26, r17	; 0x1a
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <prvCopyDataFromQueue>:
     cb0:	fc 01       	movw	r30, r24
     cb2:	44 8d       	ldd	r20, Z+28	; 0x1c
     cb4:	44 23       	and	r20, r20
     cb6:	a9 f0       	breq	.+42     	; 0xce2 <prvCopyDataFromQueue+0x32>
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	26 81       	ldd	r18, Z+6	; 0x06
     cbc:	37 81       	ldd	r19, Z+7	; 0x07
     cbe:	24 0f       	add	r18, r20
     cc0:	35 1f       	adc	r19, r21
     cc2:	37 83       	std	Z+7, r19	; 0x07
     cc4:	26 83       	std	Z+6, r18	; 0x06
     cc6:	84 81       	ldd	r24, Z+4	; 0x04
     cc8:	95 81       	ldd	r25, Z+5	; 0x05
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	20 f0       	brcs	.+8      	; 0xcd8 <prvCopyDataFromQueue+0x28>
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	97 83       	std	Z+7, r25	; 0x07
     cd6:	86 83       	std	Z+6, r24	; 0x06
     cd8:	cb 01       	movw	r24, r22
     cda:	66 81       	ldd	r22, Z+6	; 0x06
     cdc:	77 81       	ldd	r23, Z+7	; 0x07
     cde:	0e 94 ac 0c 	call	0x1958	; 0x1958 <memcpy>
     ce2:	08 95       	ret

00000ce4 <prvUnlockQueue>:
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ec 01       	movw	r28, r24
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	0f 92       	push	r0
     cf2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     cf4:	0b c0       	rjmp	.+22     	; 0xd0c <prvUnlockQueue+0x28>
     cf6:	89 89       	ldd	r24, Y+17	; 0x11
     cf8:	88 23       	and	r24, r24
     cfa:	51 f0       	breq	.+20     	; 0xd10 <prvUnlockQueue+0x2c>
     cfc:	ce 01       	movw	r24, r28
     cfe:	41 96       	adiw	r24, 0x11	; 17
     d00:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskRemoveFromEventList>
     d04:	81 11       	cpse	r24, r1
     d06:	0e 94 a8 0c 	call	0x1950	; 0x1950 <vTaskMissedYield>
     d0a:	11 50       	subi	r17, 0x01	; 1
     d0c:	11 16       	cp	r1, r17
     d0e:	9c f3       	brlt	.-26     	; 0xcf6 <prvUnlockQueue+0x12>
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	8e 8f       	std	Y+30, r24	; 0x1e
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	0f 92       	push	r0
     d1e:	1d 8d       	ldd	r17, Y+29	; 0x1d
     d20:	0b c0       	rjmp	.+22     	; 0xd38 <prvUnlockQueue+0x54>
     d22:	88 85       	ldd	r24, Y+8	; 0x08
     d24:	88 23       	and	r24, r24
     d26:	51 f0       	breq	.+20     	; 0xd3c <prvUnlockQueue+0x58>
     d28:	ce 01       	movw	r24, r28
     d2a:	08 96       	adiw	r24, 0x08	; 8
     d2c:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskRemoveFromEventList>
     d30:	81 11       	cpse	r24, r1
     d32:	0e 94 a8 0c 	call	0x1950	; 0x1950 <vTaskMissedYield>
     d36:	11 50       	subi	r17, 0x01	; 1
     d38:	11 16       	cp	r1, r17
     d3a:	9c f3       	brlt	.-26     	; 0xd22 <prvUnlockQueue+0x3e>
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	8d 8f       	std	Y+29, r24	; 0x1d
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	08 95       	ret

00000d4c <xQueueGenericReset>:
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	0f 92       	push	r0
     d58:	e8 81       	ld	r30, Y
     d5a:	f9 81       	ldd	r31, Y+1	; 0x01
     d5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d5e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	82 9f       	mul	r24, r18
     d66:	a0 01       	movw	r20, r0
     d68:	83 9f       	mul	r24, r19
     d6a:	50 0d       	add	r21, r0
     d6c:	92 9f       	mul	r25, r18
     d6e:	50 0d       	add	r21, r0
     d70:	11 24       	eor	r1, r1
     d72:	4e 0f       	add	r20, r30
     d74:	5f 1f       	adc	r21, r31
     d76:	5d 83       	std	Y+5, r21	; 0x05
     d78:	4c 83       	std	Y+4, r20	; 0x04
     d7a:	1a 8e       	std	Y+26, r1	; 0x1a
     d7c:	fb 83       	std	Y+3, r31	; 0x03
     d7e:	ea 83       	std	Y+2, r30	; 0x02
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	28 9f       	mul	r18, r24
     d84:	a0 01       	movw	r20, r0
     d86:	29 9f       	mul	r18, r25
     d88:	50 0d       	add	r21, r0
     d8a:	38 9f       	mul	r19, r24
     d8c:	50 0d       	add	r21, r0
     d8e:	11 24       	eor	r1, r1
     d90:	cf 01       	movw	r24, r30
     d92:	84 0f       	add	r24, r20
     d94:	95 1f       	adc	r25, r21
     d96:	9f 83       	std	Y+7, r25	; 0x07
     d98:	8e 83       	std	Y+6, r24	; 0x06
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	8d 8f       	std	Y+29, r24	; 0x1d
     d9e:	8e 8f       	std	Y+30, r24	; 0x1e
     da0:	61 11       	cpse	r22, r1
     da2:	0c c0       	rjmp	.+24     	; 0xdbc <xQueueGenericReset+0x70>
     da4:	88 85       	ldd	r24, Y+8	; 0x08
     da6:	88 23       	and	r24, r24
     da8:	89 f0       	breq	.+34     	; 0xdcc <xQueueGenericReset+0x80>
     daa:	ce 01       	movw	r24, r28
     dac:	08 96       	adiw	r24, 0x08	; 8
     dae:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskRemoveFromEventList>
     db2:	88 23       	and	r24, r24
     db4:	59 f0       	breq	.+22     	; 0xdcc <xQueueGenericReset+0x80>
     db6:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
     dba:	08 c0       	rjmp	.+16     	; 0xdcc <xQueueGenericReset+0x80>
     dbc:	ce 01       	movw	r24, r28
     dbe:	08 96       	adiw	r24, 0x08	; 8
     dc0:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialise>
     dc4:	ce 01       	movw	r24, r28
     dc6:	41 96       	adiw	r24, 0x11	; 17
     dc8:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialise>
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <prvInitialiseNewQueue>:
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	f8 01       	movw	r30, r16
     dde:	61 11       	cpse	r22, r1
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <prvInitialiseNewQueue+0x10>
     de2:	11 83       	std	Z+1, r17	; 0x01
     de4:	00 83       	st	Z, r16
     de6:	02 c0       	rjmp	.+4      	; 0xdec <prvInitialiseNewQueue+0x14>
     de8:	51 83       	std	Z+1, r21	; 0x01
     dea:	40 83       	st	Z, r20
     dec:	83 8f       	std	Z+27, r24	; 0x1b
     dee:	64 8f       	std	Z+28, r22	; 0x1c
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	cf 01       	movw	r24, r30
     df4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <xQueueGenericReset>
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <xQueueGenericCreate>:
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	f8 2e       	mov	r15, r24
     e0e:	e6 2e       	mov	r14, r22
     e10:	d4 2e       	mov	r13, r20
     e12:	86 9f       	mul	r24, r22
     e14:	c0 01       	movw	r24, r0
     e16:	11 24       	eor	r1, r1
     e18:	4f 96       	adiw	r24, 0x1f	; 31
     e1a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <pvPortMalloc>
     e1e:	ec 01       	movw	r28, r24
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	49 f0       	breq	.+18     	; 0xe36 <xQueueGenericCreate+0x38>
     e24:	8c 01       	movw	r16, r24
     e26:	2d 2d       	mov	r18, r13
     e28:	ac 01       	movw	r20, r24
     e2a:	41 5e       	subi	r20, 0xE1	; 225
     e2c:	5f 4f       	sbci	r21, 0xFF	; 255
     e2e:	6e 2d       	mov	r22, r14
     e30:	8f 2d       	mov	r24, r15
     e32:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <prvInitialiseNewQueue>
     e36:	ce 01       	movw	r24, r28
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	08 95       	ret

00000e48 <xQueueGenericSend>:
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	00 d0       	rcall	.+0      	; 0xe5a <xQueueGenericSend+0x12>
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <xQueueGenericSend+0x14>
     e5c:	1f 92       	push	r1
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	8c 01       	movw	r16, r24
     e64:	7b 01       	movw	r14, r22
     e66:	5d 83       	std	Y+5, r21	; 0x05
     e68:	4c 83       	std	Y+4, r20	; 0x04
     e6a:	c2 2e       	mov	r12, r18
     e6c:	d1 2c       	mov	r13, r1
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	0f 92       	push	r0
     e74:	f8 01       	movw	r30, r16
     e76:	92 8d       	ldd	r25, Z+26	; 0x1a
     e78:	83 8d       	ldd	r24, Z+27	; 0x1b
     e7a:	98 17       	cp	r25, r24
     e7c:	18 f0       	brcs	.+6      	; 0xe84 <xQueueGenericSend+0x3c>
     e7e:	f2 e0       	ldi	r31, 0x02	; 2
     e80:	cf 12       	cpse	r12, r31
     e82:	19 c0       	rjmp	.+50     	; 0xeb6 <xQueueGenericSend+0x6e>
     e84:	4c 2d       	mov	r20, r12
     e86:	b7 01       	movw	r22, r14
     e88:	c8 01       	movw	r24, r16
     e8a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <prvCopyDataToQueue>
     e8e:	f8 01       	movw	r30, r16
     e90:	91 89       	ldd	r25, Z+17	; 0x11
     e92:	99 23       	and	r25, r25
     e94:	49 f0       	breq	.+18     	; 0xea8 <xQueueGenericSend+0x60>
     e96:	c8 01       	movw	r24, r16
     e98:	41 96       	adiw	r24, 0x11	; 17
     e9a:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskRemoveFromEventList>
     e9e:	88 23       	and	r24, r24
     ea0:	31 f0       	breq	.+12     	; 0xeae <xQueueGenericSend+0x66>
     ea2:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <xQueueGenericSend+0x66>
     ea8:	81 11       	cpse	r24, r1
     eaa:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	4d c0       	rjmp	.+154    	; 0xf50 <xQueueGenericSend+0x108>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	89 2b       	or	r24, r25
     ebc:	21 f4       	brne	.+8      	; 0xec6 <xQueueGenericSend+0x7e>
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	45 c0       	rjmp	.+138    	; 0xf50 <xQueueGenericSend+0x108>
     ec6:	d1 10       	cpse	r13, r1
     ec8:	06 c0       	rjmp	.+12     	; 0xed6 <xQueueGenericSend+0x8e>
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vTaskInternalSetTimeOutState>
     ed2:	dd 24       	eor	r13, r13
     ed4:	d3 94       	inc	r13
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0e 94 6d 0a 	call	0x14da	; 0x14da <vTaskSuspendAll>
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	0f 92       	push	r0
     ee4:	f8 01       	movw	r30, r16
     ee6:	85 8d       	ldd	r24, Z+29	; 0x1d
     ee8:	8f 3f       	cpi	r24, 0xFF	; 255
     eea:	09 f4       	brne	.+2      	; 0xeee <xQueueGenericSend+0xa6>
     eec:	15 8e       	std	Z+29, r1	; 0x1d
     eee:	f8 01       	movw	r30, r16
     ef0:	86 8d       	ldd	r24, Z+30	; 0x1e
     ef2:	8f 3f       	cpi	r24, 0xFF	; 255
     ef4:	09 f4       	brne	.+2      	; 0xef8 <xQueueGenericSend+0xb0>
     ef6:	16 8e       	std	Z+30, r1	; 0x1e
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	be 01       	movw	r22, r28
     efe:	6c 5f       	subi	r22, 0xFC	; 252
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	ce 01       	movw	r24, r28
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xTaskCheckForTimeOut>
     f0a:	81 11       	cpse	r24, r1
     f0c:	1b c0       	rjmp	.+54     	; 0xf44 <xQueueGenericSend+0xfc>
     f0e:	c8 01       	movw	r24, r16
     f10:	0e 94 01 06 	call	0xc02	; 0xc02 <prvIsQueueFull>
     f14:	88 23       	and	r24, r24
     f16:	81 f0       	breq	.+32     	; 0xf38 <xQueueGenericSend+0xf0>
     f18:	6c 81       	ldd	r22, Y+4	; 0x04
     f1a:	7d 81       	ldd	r23, Y+5	; 0x05
     f1c:	c8 01       	movw	r24, r16
     f1e:	08 96       	adiw	r24, 0x08	; 8
     f20:	0e 94 11 0c 	call	0x1822	; 0x1822 <vTaskPlaceOnEventList>
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 72 06 	call	0xce4	; 0xce4 <prvUnlockQueue>
     f2a:	0e 94 31 0b 	call	0x1662	; 0x1662 <xTaskResumeAll>
     f2e:	81 11       	cpse	r24, r1
     f30:	9e cf       	rjmp	.-196    	; 0xe6e <xQueueGenericSend+0x26>
     f32:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
     f36:	9b cf       	rjmp	.-202    	; 0xe6e <xQueueGenericSend+0x26>
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 72 06 	call	0xce4	; 0xce4 <prvUnlockQueue>
     f3e:	0e 94 31 0b 	call	0x1662	; 0x1662 <xTaskResumeAll>
     f42:	95 cf       	rjmp	.-214    	; 0xe6e <xQueueGenericSend+0x26>
     f44:	c8 01       	movw	r24, r16
     f46:	0e 94 72 06 	call	0xce4	; 0xce4 <prvUnlockQueue>
     f4a:	0e 94 31 0b 	call	0x1662	; 0x1662 <xTaskResumeAll>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	08 95       	ret

00000f6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
     f6c:	cf 92       	push	r12
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <xQueueReceive+0x12>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <xQueueReceive+0x14>
     f80:	1f 92       	push	r1
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	8c 01       	movw	r16, r24
     f88:	6b 01       	movw	r12, r22
     f8a:	5d 83       	std	Y+5, r21	; 0x05
     f8c:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     f8e:	e1 2c       	mov	r14, r1
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     f96:	f8 01       	movw	r30, r16
     f98:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     f9a:	ff 20       	and	r15, r15
     f9c:	a9 f0       	breq	.+42     	; 0xfc8 <xQueueReceive+0x5c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
     f9e:	b6 01       	movw	r22, r12
     fa0:	c8 01       	movw	r24, r16
     fa2:	0e 94 58 06 	call	0xcb0	; 0xcb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     fa6:	fa 94       	dec	r15
     fa8:	f8 01       	movw	r30, r16
     faa:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     fac:	80 85       	ldd	r24, Z+8	; 0x08
     fae:	88 23       	and	r24, r24
     fb0:	39 f0       	breq	.+14     	; 0xfc0 <xQueueReceive+0x54>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     fb2:	c8 01       	movw	r24, r16
     fb4:	08 96       	adiw	r24, 0x08	; 8
     fb6:	0e 94 23 0c 	call	0x1846	; 0x1846 <xTaskRemoveFromEventList>
     fba:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     fbc:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	53 c0       	rjmp	.+166    	; 0x106e <xQueueReceive+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	89 2b       	or	r24, r25
     fce:	21 f4       	brne	.+8      	; 0xfd8 <xQueueReceive+0x6c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	4b c0       	rjmp	.+150    	; 0x106e <xQueueReceive+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
     fd8:	e1 10       	cpse	r14, r1
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <xQueueReceive+0x7c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     fe4:	ee 24       	eor	r14, r14
     fe6:	e3 94       	inc	r14
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
     fec:	0e 94 6d 0a 	call	0x14da	; 0x14da <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	0f 92       	push	r0
     ff6:	f8 01       	movw	r30, r16
     ff8:	85 8d       	ldd	r24, Z+29	; 0x1d
     ffa:	8f 3f       	cpi	r24, 0xFF	; 255
     ffc:	09 f4       	brne	.+2      	; 0x1000 <xQueueReceive+0x94>
     ffe:	15 8e       	std	Z+29, r1	; 0x1d
    1000:	f8 01       	movw	r30, r16
    1002:	86 8d       	ldd	r24, Z+30	; 0x1e
    1004:	8f 3f       	cpi	r24, 0xFF	; 255
    1006:	09 f4       	brne	.+2      	; 0x100a <xQueueReceive+0x9e>
    1008:	16 8e       	std	Z+30, r1	; 0x1e
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    100e:	be 01       	movw	r22, r28
    1010:	6c 5f       	subi	r22, 0xFC	; 252
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xTaskCheckForTimeOut>
    101c:	81 11       	cpse	r24, r1
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <xQueueReceive+0xea>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1020:	c8 01       	movw	r24, r16
    1022:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <prvIsQueueEmpty>
    1026:	88 23       	and	r24, r24
    1028:	81 f0       	breq	.+32     	; 0x104a <xQueueReceive+0xde>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    102a:	6c 81       	ldd	r22, Y+4	; 0x04
    102c:	7d 81       	ldd	r23, Y+5	; 0x05
    102e:	c8 01       	movw	r24, r16
    1030:	41 96       	adiw	r24, 0x11	; 17
    1032:	0e 94 11 0c 	call	0x1822	; 0x1822 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    1036:	c8 01       	movw	r24, r16
    1038:	0e 94 72 06 	call	0xce4	; 0xce4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    103c:	0e 94 31 0b 	call	0x1662	; 0x1662 <xTaskResumeAll>
    1040:	81 11       	cpse	r24, r1
    1042:	a6 cf       	rjmp	.-180    	; 0xf90 <xQueueReceive+0x24>
                {
                    portYIELD_WITHIN_API();
    1044:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
    1048:	a3 cf       	rjmp	.-186    	; 0xf90 <xQueueReceive+0x24>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    104a:	c8 01       	movw	r24, r16
    104c:	0e 94 72 06 	call	0xce4	; 0xce4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    1050:	0e 94 31 0b 	call	0x1662	; 0x1662 <xTaskResumeAll>
    1054:	9d cf       	rjmp	.-198    	; 0xf90 <xQueueReceive+0x24>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    1056:	c8 01       	movw	r24, r16
    1058:	0e 94 72 06 	call	0xce4	; 0xce4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    105c:	0e 94 31 0b 	call	0x1662	; 0x1662 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1060:	c8 01       	movw	r24, r16
    1062:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <prvIsQueueEmpty>
    1066:	88 23       	and	r24, r24
    1068:	09 f4       	brne	.+2      	; 0x106c <xQueueReceive+0x100>
    106a:	92 cf       	rjmp	.-220    	; 0xf90 <xQueueReceive+0x24>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    106c:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	08 95       	ret

0000108a <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
    108a:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxDelayedTaskList>
    108e:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxDelayedTaskList+0x1>
    1092:	80 81       	ld	r24, Z
    1094:	81 11       	cpse	r24, r1
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <prvResetNextTaskUnblockTime+0x1c>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	90 93 7c 06 	sts	0x067C, r25	; 0x80067c <xNextTaskUnblockTime+0x1>
    10a0:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <xNextTaskUnblockTime>
    10a4:	08 95       	ret
    10a6:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxDelayedTaskList>
    10aa:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxDelayedTaskList+0x1>
    10ae:	05 80       	ldd	r0, Z+5	; 0x05
    10b0:	f6 81       	ldd	r31, Z+6	; 0x06
    10b2:	e0 2d       	mov	r30, r0
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	90 93 7c 06 	sts	0x067C, r25	; 0x80067c <xNextTaskUnblockTime+0x1>
    10bc:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <xNextTaskUnblockTime>
    10c0:	08 95       	ret

000010c2 <prvDeleteTCB>:
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
    10c8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ca:	98 8d       	ldd	r25, Y+24	; 0x18
    10cc:	0e 94 2f 02 	call	0x45e	; 0x45e <vPortFree>
    10d0:	ce 01       	movw	r24, r28
    10d2:	0e 94 2f 02 	call	0x45e	; 0x45e <vPortFree>
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <prvInitialiseNewTask>:
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ef 92       	push	r14
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	4c 01       	movw	r8, r24
    10fc:	d5 01       	movw	r26, r10
    10fe:	57 96       	adiw	r26, 0x17	; 23
    1100:	8d 91       	ld	r24, X+
    1102:	9c 91       	ld	r25, X
    1104:	58 97       	sbiw	r26, 0x18	; 24
    1106:	21 50       	subi	r18, 0x01	; 1
    1108:	31 09       	sbc	r19, r1
    110a:	3c 01       	movw	r6, r24
    110c:	62 0e       	add	r6, r18
    110e:	73 1e       	adc	r7, r19
    1110:	61 15       	cp	r22, r1
    1112:	71 05       	cpc	r23, r1
    1114:	89 f4       	brne	.+34     	; 0x1138 <prvInitialiseNewTask+0x5c>
    1116:	16 c0       	rjmp	.+44     	; 0x1144 <prvInitialiseNewTask+0x68>
    1118:	82 2f       	mov	r24, r18
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	fb 01       	movw	r30, r22
    111e:	e8 0f       	add	r30, r24
    1120:	f9 1f       	adc	r31, r25
    1122:	30 81       	ld	r19, Z
    1124:	d5 01       	movw	r26, r10
    1126:	a8 0f       	add	r26, r24
    1128:	b9 1f       	adc	r27, r25
    112a:	59 96       	adiw	r26, 0x19	; 25
    112c:	3c 93       	st	X, r19
    112e:	80 81       	ld	r24, Z
    1130:	88 23       	and	r24, r24
    1132:	29 f0       	breq	.+10     	; 0x113e <prvInitialiseNewTask+0x62>
    1134:	2f 5f       	subi	r18, 0xFF	; 255
    1136:	01 c0       	rjmp	.+2      	; 0x113a <prvInitialiseNewTask+0x5e>
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	28 30       	cpi	r18, 0x08	; 8
    113c:	68 f3       	brcs	.-38     	; 0x1118 <prvInitialiseNewTask+0x3c>
    113e:	f5 01       	movw	r30, r10
    1140:	10 a2       	std	Z+32, r1	; 0x20
    1142:	03 c0       	rjmp	.+6      	; 0x114a <prvInitialiseNewTask+0x6e>
    1144:	d5 01       	movw	r26, r10
    1146:	59 96       	adiw	r26, 0x19	; 25
    1148:	1c 92       	st	X, r1
    114a:	b4 e0       	ldi	r27, 0x04	; 4
    114c:	be 15       	cp	r27, r14
    114e:	18 f4       	brcc	.+6      	; 0x1156 <prvInitialiseNewTask+0x7a>
    1150:	68 94       	set
    1152:	ee 24       	eor	r14, r14
    1154:	e2 f8       	bld	r14, 2
    1156:	f5 01       	movw	r30, r10
    1158:	e6 8a       	std	Z+22, r14	; 0x16
    115a:	c5 01       	movw	r24, r10
    115c:	02 96       	adiw	r24, 0x02	; 2
    115e:	0e 94 9e 03 	call	0x73c	; 0x73c <vListInitialiseItem>
    1162:	c5 01       	movw	r24, r10
    1164:	0c 96       	adiw	r24, 0x0c	; 12
    1166:	0e 94 9e 03 	call	0x73c	; 0x73c <vListInitialiseItem>
    116a:	d5 01       	movw	r26, r10
    116c:	19 96       	adiw	r26, 0x09	; 9
    116e:	bc 92       	st	X, r11
    1170:	ae 92       	st	-X, r10
    1172:	18 97       	sbiw	r26, 0x08	; 8
    1174:	85 e0       	ldi	r24, 0x05	; 5
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	8e 19       	sub	r24, r14
    117a:	91 09       	sbc	r25, r1
    117c:	1d 96       	adiw	r26, 0x0d	; 13
    117e:	9c 93       	st	X, r25
    1180:	8e 93       	st	-X, r24
    1182:	1c 97       	sbiw	r26, 0x0c	; 12
    1184:	53 96       	adiw	r26, 0x13	; 19
    1186:	bc 92       	st	X, r11
    1188:	ae 92       	st	-X, r10
    118a:	52 97       	sbiw	r26, 0x12	; 18
    118c:	84 e0       	ldi	r24, 0x04	; 4
    118e:	f5 01       	movw	r30, r10
    1190:	b1 96       	adiw	r30, 0x21	; 33
    1192:	df 01       	movw	r26, r30
    1194:	1d 92       	st	X+, r1
    1196:	8a 95       	dec	r24
    1198:	e9 f7       	brne	.-6      	; 0x1194 <prvInitialiseNewTask+0xb8>
    119a:	f5 01       	movw	r30, r10
    119c:	15 a2       	std	Z+37, r1	; 0x25
    119e:	a8 01       	movw	r20, r16
    11a0:	b4 01       	movw	r22, r8
    11a2:	c3 01       	movw	r24, r6
    11a4:	0e 94 a1 04 	call	0x942	; 0x942 <pxPortInitialiseStack>
    11a8:	d5 01       	movw	r26, r10
    11aa:	8d 93       	st	X+, r24
    11ac:	9c 93       	st	X, r25
    11ae:	c1 14       	cp	r12, r1
    11b0:	d1 04       	cpc	r13, r1
    11b2:	19 f0       	breq	.+6      	; 0x11ba <prvInitialiseNewTask+0xde>
    11b4:	f6 01       	movw	r30, r12
    11b6:	b1 82       	std	Z+1, r11	; 0x01
    11b8:	a0 82       	st	Z, r10
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	8f 90       	pop	r8
    11d0:	7f 90       	pop	r7
    11d2:	6f 90       	pop	r6
    11d4:	08 95       	ret

000011d6 <prvInitialiseTaskLists>:
    11d6:	cf 93       	push	r28
    11d8:	c0 e0       	ldi	r28, 0x00	; 0
    11da:	10 c0       	rjmp	.+32     	; 0x11fc <prvInitialiseTaskLists+0x26>
    11dc:	8c 2f       	mov	r24, r28
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9c 01       	movw	r18, r24
    11e2:	22 0f       	add	r18, r18
    11e4:	33 1f       	adc	r19, r19
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	22 0f       	add	r18, r18
    11ec:	33 1f       	adc	r19, r19
    11ee:	82 0f       	add	r24, r18
    11f0:	93 1f       	adc	r25, r19
    11f2:	80 55       	subi	r24, 0x50	; 80
    11f4:	99 4f       	sbci	r25, 0xF9	; 249
    11f6:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialise>
    11fa:	cf 5f       	subi	r28, 0xFF	; 255
    11fc:	c5 30       	cpi	r28, 0x05	; 5
    11fe:	70 f3       	brcs	.-36     	; 0x11dc <prvInitialiseTaskLists+0x6>
    1200:	87 ea       	ldi	r24, 0xA7	; 167
    1202:	96 e0       	ldi	r25, 0x06	; 6
    1204:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialise>
    1208:	8e e9       	ldi	r24, 0x9E	; 158
    120a:	96 e0       	ldi	r25, 0x06	; 6
    120c:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialise>
    1210:	81 e9       	ldi	r24, 0x91	; 145
    1212:	96 e0       	ldi	r25, 0x06	; 6
    1214:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialise>
    1218:	88 e8       	ldi	r24, 0x88	; 136
    121a:	96 e0       	ldi	r25, 0x06	; 6
    121c:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialise>
    1220:	87 ea       	ldi	r24, 0xA7	; 167
    1222:	96 e0       	ldi	r25, 0x06	; 6
    1224:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <pxDelayedTaskList+0x1>
    1228:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <pxDelayedTaskList>
    122c:	8e e9       	ldi	r24, 0x9E	; 158
    122e:	96 e0       	ldi	r25, 0x06	; 6
    1230:	90 93 9b 06 	sts	0x069B, r25	; 0x80069b <pxOverflowDelayedTaskList+0x1>
    1234:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <pxOverflowDelayedTaskList>
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <prvAddNewTaskToReadyList>:
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	ec 01       	movw	r28, r24
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	0f 92       	push	r0
    1248:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxCurrentNumberOfTasks>
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <uxCurrentNumberOfTasks>
    1252:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <pxCurrentTCB>
    1256:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    125a:	89 2b       	or	r24, r25
    125c:	59 f4       	brne	.+22     	; 0x1274 <prvAddNewTaskToReadyList+0x38>
    125e:	d0 93 de 06 	sts	0x06DE, r29	; 0x8006de <pxCurrentTCB+0x1>
    1262:	c0 93 dd 06 	sts	0x06DD, r28	; 0x8006dd <pxCurrentTCB>
    1266:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxCurrentNumberOfTasks>
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	99 f4       	brne	.+38     	; 0x1294 <prvAddNewTaskToReadyList+0x58>
    126e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <prvInitialiseTaskLists>
    1272:	10 c0       	rjmp	.+32     	; 0x1294 <prvAddNewTaskToReadyList+0x58>
    1274:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <xSchedulerRunning>
    1278:	81 11       	cpse	r24, r1
    127a:	0c c0       	rjmp	.+24     	; 0x1294 <prvAddNewTaskToReadyList+0x58>
    127c:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <pxCurrentTCB>
    1280:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    1284:	96 89       	ldd	r25, Z+22	; 0x16
    1286:	8e 89       	ldd	r24, Y+22	; 0x16
    1288:	89 17       	cp	r24, r25
    128a:	20 f0       	brcs	.+8      	; 0x1294 <prvAddNewTaskToReadyList+0x58>
    128c:	d0 93 de 06 	sts	0x06DE, r29	; 0x8006de <pxCurrentTCB+0x1>
    1290:	c0 93 dd 06 	sts	0x06DD, r28	; 0x8006dd <pxCurrentTCB>
    1294:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxTaskNumber>
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <uxTaskNumber>
    129e:	8e 89       	ldd	r24, Y+22	; 0x16
    12a0:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <uxTopReadyPriority>
    12a4:	98 17       	cp	r25, r24
    12a6:	10 f4       	brcc	.+4      	; 0x12ac <prvAddNewTaskToReadyList+0x70>
    12a8:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <uxTopReadyPriority>
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	22 0f       	add	r18, r18
    12ba:	33 1f       	adc	r19, r19
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	be 01       	movw	r22, r28
    12c2:	6e 5f       	subi	r22, 0xFE	; 254
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	80 55       	subi	r24, 0x50	; 80
    12c8:	99 4f       	sbci	r25, 0xF9	; 249
    12ca:	0e 94 a2 03 	call	0x744	; 0x744 <vListInsertEnd>
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <xSchedulerRunning>
    12d6:	88 23       	and	r24, r24
    12d8:	51 f0       	breq	.+20     	; 0x12ee <prvAddNewTaskToReadyList+0xb2>
    12da:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <pxCurrentTCB>
    12de:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    12e2:	96 89       	ldd	r25, Z+22	; 0x16
    12e4:	8e 89       	ldd	r24, Y+22	; 0x16
    12e6:	98 17       	cp	r25, r24
    12e8:	10 f4       	brcc	.+4      	; 0x12ee <prvAddNewTaskToReadyList+0xb2>
    12ea:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	08 95       	ret

000012f4 <prvCheckTasksWaitingTermination>:
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	1c c0       	rjmp	.+56     	; 0x1332 <prvCheckTasksWaitingTermination+0x3e>
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	0f 92       	push	r0
    1300:	e0 91 8d 06 	lds	r30, 0x068D	; 0x80068d <xTasksWaitingTermination+0x5>
    1304:	f0 91 8e 06 	lds	r31, 0x068E	; 0x80068e <xTasksWaitingTermination+0x6>
    1308:	c6 81       	ldd	r28, Z+6	; 0x06
    130a:	d7 81       	ldd	r29, Z+7	; 0x07
    130c:	ce 01       	movw	r24, r28
    130e:	02 96       	adiw	r24, 0x02	; 2
    1310:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uxListRemove>
    1314:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxCurrentNumberOfTasks>
    1318:	81 50       	subi	r24, 0x01	; 1
    131a:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <uxCurrentNumberOfTasks>
    131e:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <uxDeletedTasksWaitingCleanUp>
    1322:	81 50       	subi	r24, 0x01	; 1
    1324:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <uxDeletedTasksWaitingCleanUp>
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	ce 01       	movw	r24, r28
    132e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <prvDeleteTCB>
    1332:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <uxDeletedTasksWaitingCleanUp>
    1336:	81 11       	cpse	r24, r1
    1338:	e0 cf       	rjmp	.-64     	; 0x12fa <prvCheckTasksWaitingTermination+0x6>
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <prvIdleTask>:
    1340:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <prvCheckTasksWaitingTermination>
    1344:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <pxReadyTasksLists>
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	d0 f3       	brcs	.-12     	; 0x1340 <prvIdleTask>
    134c:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
    1350:	f7 cf       	rjmp	.-18     	; 0x1340 <prvIdleTask>

00001352 <prvAddCurrentTaskToDelayedList>:
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
    135c:	00 91 84 06 	lds	r16, 0x0684	; 0x800684 <xTickCount>
    1360:	10 91 85 06 	lds	r17, 0x0685	; 0x800685 <xTickCount+0x1>
    1364:	80 91 dd 06 	lds	r24, 0x06DD	; 0x8006dd <pxCurrentTCB>
    1368:	90 91 de 06 	lds	r25, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    136c:	02 96       	adiw	r24, 0x02	; 2
    136e:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uxListRemove>
    1372:	c0 0f       	add	r28, r16
    1374:	d1 1f       	adc	r29, r17
    1376:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <pxCurrentTCB>
    137a:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    137e:	d3 83       	std	Z+3, r29	; 0x03
    1380:	c2 83       	std	Z+2, r28	; 0x02
    1382:	c0 17       	cp	r28, r16
    1384:	d1 07       	cpc	r29, r17
    1386:	68 f4       	brcc	.+26     	; 0x13a2 <prvAddCurrentTaskToDelayedList+0x50>
    1388:	60 91 dd 06 	lds	r22, 0x06DD	; 0x8006dd <pxCurrentTCB>
    138c:	70 91 de 06 	lds	r23, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    1390:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <pxOverflowDelayedTaskList>
    1394:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <pxOverflowDelayedTaskList+0x1>
    1398:	6e 5f       	subi	r22, 0xFE	; 254
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	0e 94 c3 03 	call	0x786	; 0x786 <vListInsert>
    13a0:	17 c0       	rjmp	.+46     	; 0x13d0 <prvAddCurrentTaskToDelayedList+0x7e>
    13a2:	60 91 dd 06 	lds	r22, 0x06DD	; 0x8006dd <pxCurrentTCB>
    13a6:	70 91 de 06 	lds	r23, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    13aa:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <pxDelayedTaskList>
    13ae:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <pxDelayedTaskList+0x1>
    13b2:	6e 5f       	subi	r22, 0xFE	; 254
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	0e 94 c3 03 	call	0x786	; 0x786 <vListInsert>
    13ba:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <xNextTaskUnblockTime>
    13be:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <xNextTaskUnblockTime+0x1>
    13c2:	c8 17       	cp	r28, r24
    13c4:	d9 07       	cpc	r29, r25
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <prvAddCurrentTaskToDelayedList+0x7e>
    13c8:	d0 93 7c 06 	sts	0x067C, r29	; 0x80067c <xNextTaskUnblockTime+0x1>
    13cc:	c0 93 7b 06 	sts	0x067B, r28	; 0x80067b <xNextTaskUnblockTime>
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	08 95       	ret

000013da <xTaskCreate>:
    13da:	2f 92       	push	r2
    13dc:	3f 92       	push	r3
    13de:	4f 92       	push	r4
    13e0:	5f 92       	push	r5
    13e2:	6f 92       	push	r6
    13e4:	7f 92       	push	r7
    13e6:	8f 92       	push	r8
    13e8:	9f 92       	push	r9
    13ea:	af 92       	push	r10
    13ec:	bf 92       	push	r11
    13ee:	cf 92       	push	r12
    13f0:	df 92       	push	r13
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	3c 01       	movw	r6, r24
    1400:	1b 01       	movw	r2, r22
    1402:	5a 01       	movw	r10, r20
    1404:	29 01       	movw	r4, r18
    1406:	ca 01       	movw	r24, r20
    1408:	0e 94 f5 01 	call	0x3ea	; 0x3ea <pvPortMalloc>
    140c:	6c 01       	movw	r12, r24
    140e:	89 2b       	or	r24, r25
    1410:	71 f0       	breq	.+28     	; 0x142e <xTaskCreate+0x54>
    1412:	86 e2       	ldi	r24, 0x26	; 38
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 f5 01 	call	0x3ea	; 0x3ea <pvPortMalloc>
    141a:	ec 01       	movw	r28, r24
    141c:	89 2b       	or	r24, r25
    141e:	19 f0       	breq	.+6      	; 0x1426 <xTaskCreate+0x4c>
    1420:	d8 8e       	std	Y+24, r13	; 0x18
    1422:	cf 8a       	std	Y+23, r12	; 0x17
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <xTaskCreate+0x58>
    1426:	c6 01       	movw	r24, r12
    1428:	0e 94 2f 02 	call	0x45e	; 0x45e <vPortFree>
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <xTaskCreate+0x58>
    142e:	c0 e0       	ldi	r28, 0x00	; 0
    1430:	d0 e0       	ldi	r29, 0x00	; 0
    1432:	20 97       	sbiw	r28, 0x00	; 0
    1434:	91 f0       	breq	.+36     	; 0x145a <xTaskCreate+0x80>
    1436:	95 01       	movw	r18, r10
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	81 2c       	mov	r8, r1
    143e:	91 2c       	mov	r9, r1
    1440:	5e 01       	movw	r10, r28
    1442:	67 01       	movw	r12, r14
    1444:	e0 2e       	mov	r14, r16
    1446:	82 01       	movw	r16, r4
    1448:	b1 01       	movw	r22, r2
    144a:	c3 01       	movw	r24, r6
    144c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <prvInitialiseNewTask>
    1450:	ce 01       	movw	r24, r28
    1452:	0e 94 1e 09 	call	0x123c	; 0x123c <prvAddNewTaskToReadyList>
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	01 c0       	rjmp	.+2      	; 0x145c <xTaskCreate+0x82>
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	df 90       	pop	r13
    146a:	cf 90       	pop	r12
    146c:	bf 90       	pop	r11
    146e:	af 90       	pop	r10
    1470:	9f 90       	pop	r9
    1472:	8f 90       	pop	r8
    1474:	7f 90       	pop	r7
    1476:	6f 90       	pop	r6
    1478:	5f 90       	pop	r5
    147a:	4f 90       	pop	r4
    147c:	3f 90       	pop	r3
    147e:	2f 90       	pop	r2
    1480:	08 95       	ret

00001482 <vTaskStartScheduler>:
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	0f 2e       	mov	r0, r31
    148a:	f9 e7       	ldi	r31, 0x79	; 121
    148c:	ef 2e       	mov	r14, r31
    148e:	f6 e0       	ldi	r31, 0x06	; 6
    1490:	ff 2e       	mov	r15, r31
    1492:	f0 2d       	mov	r31, r0
    1494:	00 e0       	ldi	r16, 0x00	; 0
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	45 e5       	ldi	r20, 0x55	; 85
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	6b e8       	ldi	r22, 0x8B	; 139
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	80 ea       	ldi	r24, 0xA0	; 160
    14a4:	99 e0       	ldi	r25, 0x09	; 9
    14a6:	0e 94 ed 09 	call	0x13da	; 0x13da <xTaskCreate>
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	81 f4       	brne	.+32     	; 0x14ce <vTaskStartScheduler+0x4c>
    14ae:	f8 94       	cli
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	90 93 7c 06 	sts	0x067C, r25	; 0x80067c <xNextTaskUnblockTime+0x1>
    14b8:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <xNextTaskUnblockTime>
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <xSchedulerRunning>
    14c2:	10 92 85 06 	sts	0x0685, r1	; 0x800685 <xTickCount+0x1>
    14c6:	10 92 84 06 	sts	0x0684, r1	; 0x800684 <xTickCount>
    14ca:	0e 94 0d 05 	call	0xa1a	; 0xa1a <xPortStartScheduler>
    14ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	08 95       	ret

000014da <vTaskSuspendAll>:
    14da:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxSchedulerSuspended>
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxSchedulerSuspended>
    14e4:	08 95       	ret

000014e6 <xTaskIncrementTick>:
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxSchedulerSuspended>
    14f8:	81 11       	cpse	r24, r1
    14fa:	9d c0       	rjmp	.+314    	; 0x1636 <xTaskIncrementTick+0x150>
    14fc:	e0 90 84 06 	lds	r14, 0x0684	; 0x800684 <xTickCount>
    1500:	f0 90 85 06 	lds	r15, 0x0685	; 0x800685 <xTickCount+0x1>
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	e8 1a       	sub	r14, r24
    1508:	f8 0a       	sbc	r15, r24
    150a:	f0 92 85 06 	sts	0x0685, r15	; 0x800685 <xTickCount+0x1>
    150e:	e0 92 84 06 	sts	0x0684, r14	; 0x800684 <xTickCount>
    1512:	e1 14       	cp	r14, r1
    1514:	f1 04       	cpc	r15, r1
    1516:	b9 f4       	brne	.+46     	; 0x1546 <xTaskIncrementTick+0x60>
    1518:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <pxDelayedTaskList>
    151c:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <pxDelayedTaskList+0x1>
    1520:	20 91 9a 06 	lds	r18, 0x069A	; 0x80069a <pxOverflowDelayedTaskList>
    1524:	30 91 9b 06 	lds	r19, 0x069B	; 0x80069b <pxOverflowDelayedTaskList+0x1>
    1528:	30 93 9d 06 	sts	0x069D, r19	; 0x80069d <pxDelayedTaskList+0x1>
    152c:	20 93 9c 06 	sts	0x069C, r18	; 0x80069c <pxDelayedTaskList>
    1530:	90 93 9b 06 	sts	0x069B, r25	; 0x80069b <pxOverflowDelayedTaskList+0x1>
    1534:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <pxOverflowDelayedTaskList>
    1538:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <xNumOfOverflows>
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <xNumOfOverflows>
    1542:	0e 94 45 08 	call	0x108a	; 0x108a <prvResetNextTaskUnblockTime>
    1546:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <xNextTaskUnblockTime>
    154a:	90 91 7c 06 	lds	r25, 0x067C	; 0x80067c <xNextTaskUnblockTime+0x1>
    154e:	e8 16       	cp	r14, r24
    1550:	f9 06       	cpc	r15, r25
    1552:	28 f4       	brcc	.+10     	; 0x155e <xTaskIncrementTick+0x78>
    1554:	d1 2c       	mov	r13, r1
    1556:	53 c0       	rjmp	.+166    	; 0x15fe <xTaskIncrementTick+0x118>
    1558:	dd 24       	eor	r13, r13
    155a:	d3 94       	inc	r13
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <xTaskIncrementTick+0x7a>
    155e:	d1 2c       	mov	r13, r1
    1560:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxDelayedTaskList>
    1564:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxDelayedTaskList+0x1>
    1568:	80 81       	ld	r24, Z
    156a:	81 11       	cpse	r24, r1
    156c:	07 c0       	rjmp	.+14     	; 0x157c <xTaskIncrementTick+0x96>
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	9f ef       	ldi	r25, 0xFF	; 255
    1572:	90 93 7c 06 	sts	0x067C, r25	; 0x80067c <xNextTaskUnblockTime+0x1>
    1576:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <xNextTaskUnblockTime>
    157a:	41 c0       	rjmp	.+130    	; 0x15fe <xTaskIncrementTick+0x118>
    157c:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <pxDelayedTaskList>
    1580:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <pxDelayedTaskList+0x1>
    1584:	05 80       	ldd	r0, Z+5	; 0x05
    1586:	f6 81       	ldd	r31, Z+6	; 0x06
    1588:	e0 2d       	mov	r30, r0
    158a:	c6 81       	ldd	r28, Z+6	; 0x06
    158c:	d7 81       	ldd	r29, Z+7	; 0x07
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	9b 81       	ldd	r25, Y+3	; 0x03
    1592:	e8 16       	cp	r14, r24
    1594:	f9 06       	cpc	r15, r25
    1596:	28 f4       	brcc	.+10     	; 0x15a2 <xTaskIncrementTick+0xbc>
    1598:	90 93 7c 06 	sts	0x067C, r25	; 0x80067c <xNextTaskUnblockTime+0x1>
    159c:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <xNextTaskUnblockTime>
    15a0:	2e c0       	rjmp	.+92     	; 0x15fe <xTaskIncrementTick+0x118>
    15a2:	8e 01       	movw	r16, r28
    15a4:	0e 5f       	subi	r16, 0xFE	; 254
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	c8 01       	movw	r24, r16
    15aa:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uxListRemove>
    15ae:	8c 89       	ldd	r24, Y+20	; 0x14
    15b0:	9d 89       	ldd	r25, Y+21	; 0x15
    15b2:	89 2b       	or	r24, r25
    15b4:	21 f0       	breq	.+8      	; 0x15be <xTaskIncrementTick+0xd8>
    15b6:	ce 01       	movw	r24, r28
    15b8:	0c 96       	adiw	r24, 0x0c	; 12
    15ba:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uxListRemove>
    15be:	8e 89       	ldd	r24, Y+22	; 0x16
    15c0:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <uxTopReadyPriority>
    15c4:	98 17       	cp	r25, r24
    15c6:	10 f4       	brcc	.+4      	; 0x15cc <xTaskIncrementTick+0xe6>
    15c8:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <uxTopReadyPriority>
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c 01       	movw	r18, r24
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	82 0f       	add	r24, r18
    15de:	93 1f       	adc	r25, r19
    15e0:	b8 01       	movw	r22, r16
    15e2:	80 55       	subi	r24, 0x50	; 80
    15e4:	99 4f       	sbci	r25, 0xF9	; 249
    15e6:	0e 94 a2 03 	call	0x744	; 0x744 <vListInsertEnd>
    15ea:	9e 89       	ldd	r25, Y+22	; 0x16
    15ec:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <pxCurrentTCB>
    15f0:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    15f4:	86 89       	ldd	r24, Z+22	; 0x16
    15f6:	98 17       	cp	r25, r24
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <xTaskIncrementTick+0x116>
    15fa:	ae cf       	rjmp	.-164    	; 0x1558 <xTaskIncrementTick+0x72>
    15fc:	b1 cf       	rjmp	.-158    	; 0x1560 <xTaskIncrementTick+0x7a>
    15fe:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <pxCurrentTCB>
    1602:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    1606:	86 89       	ldd	r24, Z+22	; 0x16
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	fc 01       	movw	r30, r24
    160c:	ee 0f       	add	r30, r30
    160e:	ff 1f       	adc	r31, r31
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	8e 0f       	add	r24, r30
    161a:	9f 1f       	adc	r25, r31
    161c:	fc 01       	movw	r30, r24
    161e:	e0 55       	subi	r30, 0x50	; 80
    1620:	f9 4f       	sbci	r31, 0xF9	; 249
    1622:	80 81       	ld	r24, Z
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	10 f0       	brcs	.+4      	; 0x162c <xTaskIncrementTick+0x146>
    1628:	dd 24       	eor	r13, r13
    162a:	d3 94       	inc	r13
    162c:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <xYieldPending>
    1630:	81 11       	cpse	r24, r1
    1632:	0c c0       	rjmp	.+24     	; 0x164c <xTaskIncrementTick+0x166>
    1634:	0d c0       	rjmp	.+26     	; 0x1650 <xTaskIncrementTick+0x16a>
    1636:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <xPendedTicks>
    163a:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <xPendedTicks+0x1>
    163e:	01 96       	adiw	r24, 0x01	; 1
    1640:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <xPendedTicks+0x1>
    1644:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <xPendedTicks>
    1648:	d1 2c       	mov	r13, r1
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <xTaskIncrementTick+0x16a>
    164c:	dd 24       	eor	r13, r13
    164e:	d3 94       	inc	r13
    1650:	8d 2d       	mov	r24, r13
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	08 95       	ret

00001662 <xTaskResumeAll>:
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	0f 92       	push	r0
    1670:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxSchedulerSuspended>
    1674:	81 50       	subi	r24, 0x01	; 1
    1676:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxSchedulerSuspended>
    167a:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxSchedulerSuspended>
    167e:	81 11       	cpse	r24, r1
    1680:	5c c0       	rjmp	.+184    	; 0x173a <xTaskResumeAll+0xd8>
    1682:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxCurrentNumberOfTasks>
    1686:	81 11       	cpse	r24, r1
    1688:	33 c0       	rjmp	.+102    	; 0x16f0 <xTaskResumeAll+0x8e>
    168a:	5a c0       	rjmp	.+180    	; 0x1740 <xTaskResumeAll+0xde>
    168c:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <xPendingReadyList+0x5>
    1690:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <xPendingReadyList+0x6>
    1694:	c6 81       	ldd	r28, Z+6	; 0x06
    1696:	d7 81       	ldd	r29, Z+7	; 0x07
    1698:	ce 01       	movw	r24, r28
    169a:	0c 96       	adiw	r24, 0x0c	; 12
    169c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uxListRemove>
    16a0:	8e 01       	movw	r16, r28
    16a2:	0e 5f       	subi	r16, 0xFE	; 254
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uxListRemove>
    16ac:	8e 89       	ldd	r24, Y+22	; 0x16
    16ae:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <uxTopReadyPriority>
    16b2:	98 17       	cp	r25, r24
    16b4:	10 f4       	brcc	.+4      	; 0x16ba <xTaskResumeAll+0x58>
    16b6:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <uxTopReadyPriority>
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9c 01       	movw	r18, r24
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	22 0f       	add	r18, r18
    16c4:	33 1f       	adc	r19, r19
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	82 0f       	add	r24, r18
    16cc:	93 1f       	adc	r25, r19
    16ce:	b8 01       	movw	r22, r16
    16d0:	80 55       	subi	r24, 0x50	; 80
    16d2:	99 4f       	sbci	r25, 0xF9	; 249
    16d4:	0e 94 a2 03 	call	0x744	; 0x744 <vListInsertEnd>
    16d8:	9e 89       	ldd	r25, Y+22	; 0x16
    16da:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <pxCurrentTCB>
    16de:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    16e2:	86 89       	ldd	r24, Z+22	; 0x16
    16e4:	98 17       	cp	r25, r24
    16e6:	30 f0       	brcs	.+12     	; 0x16f4 <xTaskResumeAll+0x92>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <xYieldPending>
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <xTaskResumeAll+0x92>
    16f0:	c0 e0       	ldi	r28, 0x00	; 0
    16f2:	d0 e0       	ldi	r29, 0x00	; 0
    16f4:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <xPendingReadyList>
    16f8:	81 11       	cpse	r24, r1
    16fa:	c8 cf       	rjmp	.-112    	; 0x168c <xTaskResumeAll+0x2a>
    16fc:	cd 2b       	or	r28, r29
    16fe:	11 f0       	breq	.+4      	; 0x1704 <xTaskResumeAll+0xa2>
    1700:	0e 94 45 08 	call	0x108a	; 0x108a <prvResetNextTaskUnblockTime>
    1704:	c0 91 80 06 	lds	r28, 0x0680	; 0x800680 <xPendedTicks>
    1708:	d0 91 81 06 	lds	r29, 0x0681	; 0x800681 <xPendedTicks+0x1>
    170c:	20 97       	sbiw	r28, 0x00	; 0
    170e:	69 f0       	breq	.+26     	; 0x172a <xTaskResumeAll+0xc8>
    1710:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <xTaskIncrementTick>
    1714:	88 23       	and	r24, r24
    1716:	19 f0       	breq	.+6      	; 0x171e <xTaskResumeAll+0xbc>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <xYieldPending>
    171e:	21 97       	sbiw	r28, 0x01	; 1
    1720:	b9 f7       	brne	.-18     	; 0x1710 <xTaskResumeAll+0xae>
    1722:	10 92 81 06 	sts	0x0681, r1	; 0x800681 <xPendedTicks+0x1>
    1726:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <xPendedTicks>
    172a:	80 91 7f 06 	lds	r24, 0x067F	; 0x80067f <xYieldPending>
    172e:	88 23       	and	r24, r24
    1730:	31 f0       	breq	.+12     	; 0x173e <xTaskResumeAll+0xdc>
    1732:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <xTaskResumeAll+0xde>
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <xTaskResumeAll+0xde>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	0f 90       	pop	r0
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <vTaskDelay>:
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	89 2b       	or	r24, r25
    1756:	49 f0       	breq	.+18     	; 0x176a <vTaskDelay+0x1c>
    1758:	0e 94 6d 0a 	call	0x14da	; 0x14da <vTaskSuspendAll>
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	ce 01       	movw	r24, r28
    1760:	0e 94 a9 09 	call	0x1352	; 0x1352 <prvAddCurrentTaskToDelayedList>
    1764:	0e 94 31 0b 	call	0x1662	; 0x1662 <xTaskResumeAll>
    1768:	01 c0       	rjmp	.+2      	; 0x176c <vTaskDelay+0x1e>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	81 11       	cpse	r24, r1
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vTaskDelay+0x26>
    1770:	0e 94 3c 05 	call	0xa78	; 0xa78 <vPortYield>
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <vTaskSwitchContext>:
    177a:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxSchedulerSuspended>
    177e:	88 23       	and	r24, r24
    1780:	21 f0       	breq	.+8      	; 0x178a <vTaskSwitchContext+0x10>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <xYieldPending>
    1788:	08 95       	ret
    178a:	10 92 7f 06 	sts	0x067F, r1	; 0x80067f <xYieldPending>
    178e:	20 91 83 06 	lds	r18, 0x0683	; 0x800683 <uxTopReadyPriority>
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <vTaskSwitchContext+0x1c>
    1794:	21 50       	subi	r18, 0x01	; 1
    1796:	82 2f       	mov	r24, r18
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	e8 0f       	add	r30, r24
    17aa:	f9 1f       	adc	r31, r25
    17ac:	e0 55       	subi	r30, 0x50	; 80
    17ae:	f9 4f       	sbci	r31, 0xF9	; 249
    17b0:	30 81       	ld	r19, Z
    17b2:	33 23       	and	r19, r19
    17b4:	79 f3       	breq	.-34     	; 0x1794 <vTaskSwitchContext+0x1a>
    17b6:	ac 01       	movw	r20, r24
    17b8:	44 0f       	add	r20, r20
    17ba:	55 1f       	adc	r21, r21
    17bc:	44 0f       	add	r20, r20
    17be:	55 1f       	adc	r21, r21
    17c0:	44 0f       	add	r20, r20
    17c2:	55 1f       	adc	r21, r21
    17c4:	48 0f       	add	r20, r24
    17c6:	59 1f       	adc	r21, r25
    17c8:	df 01       	movw	r26, r30
    17ca:	01 80       	ldd	r0, Z+1	; 0x01
    17cc:	f2 81       	ldd	r31, Z+2	; 0x02
    17ce:	e0 2d       	mov	r30, r0
    17d0:	02 80       	ldd	r0, Z+2	; 0x02
    17d2:	f3 81       	ldd	r31, Z+3	; 0x03
    17d4:	e0 2d       	mov	r30, r0
    17d6:	12 96       	adiw	r26, 0x02	; 2
    17d8:	fc 93       	st	X, r31
    17da:	ee 93       	st	-X, r30
    17dc:	11 97       	sbiw	r26, 0x01	; 1
    17de:	4d 54       	subi	r20, 0x4D	; 77
    17e0:	59 4f       	sbci	r21, 0xF9	; 249
    17e2:	e4 17       	cp	r30, r20
    17e4:	f5 07       	cpc	r31, r21
    17e6:	29 f4       	brne	.+10     	; 0x17f2 <vTaskSwitchContext+0x78>
    17e8:	42 81       	ldd	r20, Z+2	; 0x02
    17ea:	53 81       	ldd	r21, Z+3	; 0x03
    17ec:	fd 01       	movw	r30, r26
    17ee:	52 83       	std	Z+2, r21	; 0x02
    17f0:	41 83       	std	Z+1, r20	; 0x01
    17f2:	fc 01       	movw	r30, r24
    17f4:	ee 0f       	add	r30, r30
    17f6:	ff 1f       	adc	r31, r31
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	ee 0f       	add	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	8e 0f       	add	r24, r30
    1802:	9f 1f       	adc	r25, r31
    1804:	fc 01       	movw	r30, r24
    1806:	e0 55       	subi	r30, 0x50	; 80
    1808:	f9 4f       	sbci	r31, 0xF9	; 249
    180a:	01 80       	ldd	r0, Z+1	; 0x01
    180c:	f2 81       	ldd	r31, Z+2	; 0x02
    180e:	e0 2d       	mov	r30, r0
    1810:	86 81       	ldd	r24, Z+6	; 0x06
    1812:	97 81       	ldd	r25, Z+7	; 0x07
    1814:	90 93 de 06 	sts	0x06DE, r25	; 0x8006de <pxCurrentTCB+0x1>
    1818:	80 93 dd 06 	sts	0x06DD, r24	; 0x8006dd <pxCurrentTCB>
    181c:	20 93 83 06 	sts	0x0683, r18	; 0x800683 <uxTopReadyPriority>
    1820:	08 95       	ret

00001822 <vTaskPlaceOnEventList>:
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	eb 01       	movw	r28, r22
    1828:	60 91 dd 06 	lds	r22, 0x06DD	; 0x8006dd <pxCurrentTCB>
    182c:	70 91 de 06 	lds	r23, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    1830:	64 5f       	subi	r22, 0xF4	; 244
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	0e 94 c3 03 	call	0x786	; 0x786 <vListInsert>
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	ce 01       	movw	r24, r28
    183c:	0e 94 a9 09 	call	0x1352	; 0x1352 <prvAddCurrentTaskToDelayedList>
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <xTaskRemoveFromEventList>:
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	dc 01       	movw	r26, r24
    1850:	15 96       	adiw	r26, 0x05	; 5
    1852:	ed 91       	ld	r30, X+
    1854:	fc 91       	ld	r31, X
    1856:	16 97       	sbiw	r26, 0x06	; 6
    1858:	c6 81       	ldd	r28, Z+6	; 0x06
    185a:	d7 81       	ldd	r29, Z+7	; 0x07
    185c:	8e 01       	movw	r16, r28
    185e:	04 5f       	subi	r16, 0xF4	; 244
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	c8 01       	movw	r24, r16
    1864:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uxListRemove>
    1868:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <uxSchedulerSuspended>
    186c:	81 11       	cpse	r24, r1
    186e:	1c c0       	rjmp	.+56     	; 0x18a8 <xTaskRemoveFromEventList+0x62>
    1870:	0a 50       	subi	r16, 0x0A	; 10
    1872:	11 09       	sbc	r17, r1
    1874:	c8 01       	movw	r24, r16
    1876:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uxListRemove>
    187a:	8e 89       	ldd	r24, Y+22	; 0x16
    187c:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <uxTopReadyPriority>
    1880:	98 17       	cp	r25, r24
    1882:	10 f4       	brcc	.+4      	; 0x1888 <xTaskRemoveFromEventList+0x42>
    1884:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <uxTopReadyPriority>
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 01       	movw	r18, r24
    188c:	22 0f       	add	r18, r18
    188e:	33 1f       	adc	r19, r19
    1890:	22 0f       	add	r18, r18
    1892:	33 1f       	adc	r19, r19
    1894:	22 0f       	add	r18, r18
    1896:	33 1f       	adc	r19, r19
    1898:	82 0f       	add	r24, r18
    189a:	93 1f       	adc	r25, r19
    189c:	b8 01       	movw	r22, r16
    189e:	80 55       	subi	r24, 0x50	; 80
    18a0:	99 4f       	sbci	r25, 0xF9	; 249
    18a2:	0e 94 a2 03 	call	0x744	; 0x744 <vListInsertEnd>
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <xTaskRemoveFromEventList+0x6c>
    18a8:	b8 01       	movw	r22, r16
    18aa:	81 e9       	ldi	r24, 0x91	; 145
    18ac:	96 e0       	ldi	r25, 0x06	; 6
    18ae:	0e 94 a2 03 	call	0x744	; 0x744 <vListInsertEnd>
    18b2:	9e 89       	ldd	r25, Y+22	; 0x16
    18b4:	e0 91 dd 06 	lds	r30, 0x06DD	; 0x8006dd <pxCurrentTCB>
    18b8:	f0 91 de 06 	lds	r31, 0x06DE	; 0x8006de <pxCurrentTCB+0x1>
    18bc:	86 89       	ldd	r24, Z+22	; 0x16
    18be:	89 17       	cp	r24, r25
    18c0:	20 f4       	brcc	.+8      	; 0x18ca <xTaskRemoveFromEventList+0x84>
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <xYieldPending>
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <xTaskRemoveFromEventList+0x86>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    18d6:	20 91 7e 06 	lds	r18, 0x067E	; 0x80067e <xNumOfOverflows>
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    18de:	20 91 84 06 	lds	r18, 0x0684	; 0x800684 <xTickCount>
    18e2:	30 91 85 06 	lds	r19, 0x0685	; 0x800685 <xTickCount+0x1>
    18e6:	32 83       	std	Z+2, r19	; 0x02
    18e8:	21 83       	std	Z+1, r18	; 0x01
    18ea:	08 95       	ret

000018ec <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    18f6:	40 91 84 06 	lds	r20, 0x0684	; 0x800684 <xTickCount>
    18fa:	50 91 85 06 	lds	r21, 0x0685	; 0x800685 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    18fe:	ec 01       	movw	r28, r24
    1900:	29 81       	ldd	r18, Y+1	; 0x01
    1902:	3a 81       	ldd	r19, Y+2	; 0x02
    1904:	da 01       	movw	r26, r20
    1906:	a2 1b       	sub	r26, r18
    1908:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    190a:	f8 81       	ld	r31, Y
    190c:	e0 91 7e 06 	lds	r30, 0x067E	; 0x80067e <xNumOfOverflows>
    1910:	fe 17       	cp	r31, r30
    1912:	41 f0       	breq	.+16     	; 0x1924 <xTaskCheckForTimeOut+0x38>
    1914:	42 17       	cp	r20, r18
    1916:	53 07       	cpc	r21, r19
    1918:	28 f0       	brcs	.+10     	; 0x1924 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    191a:	fb 01       	movw	r30, r22
    191c:	11 82       	std	Z+1, r1	; 0x01
    191e:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1920:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1922:	11 c0       	rjmp	.+34     	; 0x1946 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1924:	eb 01       	movw	r28, r22
    1926:	28 81       	ld	r18, Y
    1928:	39 81       	ldd	r19, Y+1	; 0x01
    192a:	a2 17       	cp	r26, r18
    192c:	b3 07       	cpc	r27, r19
    192e:	40 f4       	brcc	.+16     	; 0x1940 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1930:	2a 1b       	sub	r18, r26
    1932:	3b 0b       	sbc	r19, r27
    1934:	39 83       	std	Y+1, r19	; 0x01
    1936:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1938:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1940:	19 82       	std	Y+1, r1	; 0x01
    1942:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1944:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 93 7f 06 	sts	0x067F, r24	; 0x80067f <xYieldPending>
    1956:	08 95       	ret

00001958 <memcpy>:
    1958:	fb 01       	movw	r30, r22
    195a:	dc 01       	movw	r26, r24
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <memcpy+0xa>
    195e:	01 90       	ld	r0, Z+
    1960:	0d 92       	st	X+, r0
    1962:	41 50       	subi	r20, 0x01	; 1
    1964:	50 40       	sbci	r21, 0x00	; 0
    1966:	d8 f7       	brcc	.-10     	; 0x195e <memcpy+0x6>
    1968:	08 95       	ret

0000196a <_exit>:
    196a:	f8 94       	cli

0000196c <__stop_program>:
    196c:	ff cf       	rjmp	.-2      	; 0x196c <__stop_program>
