
FreeRTOS  LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001aa8  00001b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064e  00800088  00800088  00001b64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005550  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001131  00000000  00000000  00007568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002fdc  00000000  00000000  00008699  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db8  00000000  00000000  0000b678  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001838  00000000  00000000  0000c430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000606d  00000000  00000000  0000dc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00013cd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 03 	call	0x73c	; 0x73c <main>
      8a:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VoidSetPinDirection>:
			pinvalue =PIND_REG;
			break;
	}
	
	return (pinvalue) ;
}
      92:	63 30       	cpi	r22, 0x03	; 3
      94:	51 f1       	breq	.+84     	; 0xea <DIO_VoidSetPinDirection+0x58>
      96:	18 f4       	brcc	.+6      	; 0x9e <DIO_VoidSetPinDirection+0xc>
      98:	62 30       	cpi	r22, 0x02	; 2
      9a:	41 f0       	breq	.+16     	; 0xac <DIO_VoidSetPinDirection+0x1a>
      9c:	08 95       	ret
      9e:	64 30       	cpi	r22, 0x04	; 4
      a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_VoidSetPinDirection+0x12>
      a2:	42 c0       	rjmp	.+132    	; 0x128 <DIO_VoidSetPinDirection+0x96>
      a4:	65 30       	cpi	r22, 0x05	; 5
      a6:	09 f4       	brne	.+2      	; 0xaa <DIO_VoidSetPinDirection+0x18>
      a8:	5e c0       	rjmp	.+188    	; 0x166 <DIO_VoidSetPinDirection+0xd4>
      aa:	08 95       	ret
      ac:	41 30       	cpi	r20, 0x01	; 1
      ae:	69 f4       	brne	.+26     	; 0xca <DIO_VoidSetPinDirection+0x38>
      b0:	4a b3       	in	r20, 0x1a	; 26
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	b9 01       	movw	r22, r18
      b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_VoidSetPinDirection+0x2c>
      ba:	66 0f       	add	r22, r22
      bc:	77 1f       	adc	r23, r23
      be:	8a 95       	dec	r24
      c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_VoidSetPinDirection+0x28>
      c2:	cb 01       	movw	r24, r22
      c4:	84 2b       	or	r24, r20
      c6:	8a bb       	out	0x1a, r24	; 26
      c8:	08 95       	ret
      ca:	41 11       	cpse	r20, r1
      cc:	6a c0       	rjmp	.+212    	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
      ce:	4a b3       	in	r20, 0x1a	; 26
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	b9 01       	movw	r22, r18
      d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_VoidSetPinDirection+0x4a>
      d8:	66 0f       	add	r22, r22
      da:	77 1f       	adc	r23, r23
      dc:	8a 95       	dec	r24
      de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_VoidSetPinDirection+0x46>
      e0:	cb 01       	movw	r24, r22
      e2:	80 95       	com	r24
      e4:	84 23       	and	r24, r20
      e6:	8a bb       	out	0x1a, r24	; 26
      e8:	08 95       	ret
      ea:	41 30       	cpi	r20, 0x01	; 1
      ec:	69 f4       	brne	.+26     	; 0x108 <DIO_VoidSetPinDirection+0x76>
      ee:	47 b3       	in	r20, 0x17	; 23
      f0:	21 e0       	ldi	r18, 0x01	; 1
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	b9 01       	movw	r22, r18
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_VoidSetPinDirection+0x6a>
      f8:	66 0f       	add	r22, r22
      fa:	77 1f       	adc	r23, r23
      fc:	8a 95       	dec	r24
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_VoidSetPinDirection+0x66>
     100:	cb 01       	movw	r24, r22
     102:	84 2b       	or	r24, r20
     104:	87 bb       	out	0x17, r24	; 23
     106:	08 95       	ret
     108:	41 11       	cpse	r20, r1
     10a:	4b c0       	rjmp	.+150    	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     10c:	47 b3       	in	r20, 0x17	; 23
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	b9 01       	movw	r22, r18
     114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_VoidSetPinDirection+0x88>
     116:	66 0f       	add	r22, r22
     118:	77 1f       	adc	r23, r23
     11a:	8a 95       	dec	r24
     11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_VoidSetPinDirection+0x84>
     11e:	cb 01       	movw	r24, r22
     120:	80 95       	com	r24
     122:	84 23       	and	r24, r20
     124:	87 bb       	out	0x17, r24	; 23
     126:	08 95       	ret
     128:	41 30       	cpi	r20, 0x01	; 1
     12a:	69 f4       	brne	.+26     	; 0x146 <DIO_VoidSetPinDirection+0xb4>
     12c:	44 b3       	in	r20, 0x14	; 20
     12e:	21 e0       	ldi	r18, 0x01	; 1
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	b9 01       	movw	r22, r18
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_VoidSetPinDirection+0xa8>
     136:	66 0f       	add	r22, r22
     138:	77 1f       	adc	r23, r23
     13a:	8a 95       	dec	r24
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_VoidSetPinDirection+0xa4>
     13e:	cb 01       	movw	r24, r22
     140:	84 2b       	or	r24, r20
     142:	84 bb       	out	0x14, r24	; 20
     144:	08 95       	ret
     146:	41 11       	cpse	r20, r1
     148:	2c c0       	rjmp	.+88     	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     14a:	44 b3       	in	r20, 0x14	; 20
     14c:	21 e0       	ldi	r18, 0x01	; 1
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	b9 01       	movw	r22, r18
     152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_VoidSetPinDirection+0xc6>
     154:	66 0f       	add	r22, r22
     156:	77 1f       	adc	r23, r23
     158:	8a 95       	dec	r24
     15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_VoidSetPinDirection+0xc2>
     15c:	cb 01       	movw	r24, r22
     15e:	80 95       	com	r24
     160:	84 23       	and	r24, r20
     162:	84 bb       	out	0x14, r24	; 20
     164:	08 95       	ret
     166:	41 30       	cpi	r20, 0x01	; 1
     168:	69 f4       	brne	.+26     	; 0x184 <DIO_VoidSetPinDirection+0xf2>
     16a:	41 b3       	in	r20, 0x11	; 17
     16c:	21 e0       	ldi	r18, 0x01	; 1
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	b9 01       	movw	r22, r18
     172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_VoidSetPinDirection+0xe6>
     174:	66 0f       	add	r22, r22
     176:	77 1f       	adc	r23, r23
     178:	8a 95       	dec	r24
     17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_VoidSetPinDirection+0xe2>
     17c:	cb 01       	movw	r24, r22
     17e:	84 2b       	or	r24, r20
     180:	81 bb       	out	0x11, r24	; 17
     182:	08 95       	ret
     184:	41 11       	cpse	r20, r1
     186:	0d c0       	rjmp	.+26     	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
     188:	41 b3       	in	r20, 0x11	; 17
     18a:	21 e0       	ldi	r18, 0x01	; 1
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	b9 01       	movw	r22, r18
     190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_VoidSetPinDirection+0x104>
     192:	66 0f       	add	r22, r22
     194:	77 1f       	adc	r23, r23
     196:	8a 95       	dec	r24
     198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_VoidSetPinDirection+0x100>
     19a:	cb 01       	movw	r24, r22
     19c:	80 95       	com	r24
     19e:	84 23       	and	r24, r20
     1a0:	81 bb       	out	0x11, r24	; 17
     1a2:	08 95       	ret

000001a4 <DIO_VoidSetPinValue>:
     1a4:	63 30       	cpi	r22, 0x03	; 3
     1a6:	51 f1       	breq	.+84     	; 0x1fc <DIO_VoidSetPinValue+0x58>
     1a8:	18 f4       	brcc	.+6      	; 0x1b0 <DIO_VoidSetPinValue+0xc>
     1aa:	62 30       	cpi	r22, 0x02	; 2
     1ac:	41 f0       	breq	.+16     	; 0x1be <DIO_VoidSetPinValue+0x1a>
     1ae:	08 95       	ret
     1b0:	64 30       	cpi	r22, 0x04	; 4
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <DIO_VoidSetPinValue+0x12>
     1b4:	42 c0       	rjmp	.+132    	; 0x23a <DIO_VoidSetPinValue+0x96>
     1b6:	65 30       	cpi	r22, 0x05	; 5
     1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_VoidSetPinValue+0x18>
     1ba:	5e c0       	rjmp	.+188    	; 0x278 <DIO_VoidSetPinValue+0xd4>
     1bc:	08 95       	ret
     1be:	41 30       	cpi	r20, 0x01	; 1
     1c0:	69 f4       	brne	.+26     	; 0x1dc <DIO_VoidSetPinValue+0x38>
     1c2:	4b b3       	in	r20, 0x1b	; 27
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	b9 01       	movw	r22, r18
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_VoidSetPinValue+0x2c>
     1cc:	66 0f       	add	r22, r22
     1ce:	77 1f       	adc	r23, r23
     1d0:	8a 95       	dec	r24
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_VoidSetPinValue+0x28>
     1d4:	cb 01       	movw	r24, r22
     1d6:	84 2b       	or	r24, r20
     1d8:	8b bb       	out	0x1b, r24	; 27
     1da:	08 95       	ret
     1dc:	41 11       	cpse	r20, r1
     1de:	6a c0       	rjmp	.+212    	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     1e0:	4b b3       	in	r20, 0x1b	; 27
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	b9 01       	movw	r22, r18
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_VoidSetPinValue+0x4a>
     1ea:	66 0f       	add	r22, r22
     1ec:	77 1f       	adc	r23, r23
     1ee:	8a 95       	dec	r24
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_VoidSetPinValue+0x46>
     1f2:	cb 01       	movw	r24, r22
     1f4:	80 95       	com	r24
     1f6:	84 23       	and	r24, r20
     1f8:	8b bb       	out	0x1b, r24	; 27
     1fa:	08 95       	ret
     1fc:	41 30       	cpi	r20, 0x01	; 1
     1fe:	69 f4       	brne	.+26     	; 0x21a <DIO_VoidSetPinValue+0x76>
     200:	48 b3       	in	r20, 0x18	; 24
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	b9 01       	movw	r22, r18
     208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_VoidSetPinValue+0x6a>
     20a:	66 0f       	add	r22, r22
     20c:	77 1f       	adc	r23, r23
     20e:	8a 95       	dec	r24
     210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_VoidSetPinValue+0x66>
     212:	cb 01       	movw	r24, r22
     214:	84 2b       	or	r24, r20
     216:	88 bb       	out	0x18, r24	; 24
     218:	08 95       	ret
     21a:	41 11       	cpse	r20, r1
     21c:	4b c0       	rjmp	.+150    	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     21e:	48 b3       	in	r20, 0x18	; 24
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	b9 01       	movw	r22, r18
     226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_VoidSetPinValue+0x88>
     228:	66 0f       	add	r22, r22
     22a:	77 1f       	adc	r23, r23
     22c:	8a 95       	dec	r24
     22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_VoidSetPinValue+0x84>
     230:	cb 01       	movw	r24, r22
     232:	80 95       	com	r24
     234:	84 23       	and	r24, r20
     236:	88 bb       	out	0x18, r24	; 24
     238:	08 95       	ret
     23a:	41 30       	cpi	r20, 0x01	; 1
     23c:	69 f4       	brne	.+26     	; 0x258 <DIO_VoidSetPinValue+0xb4>
     23e:	45 b3       	in	r20, 0x15	; 21
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	b9 01       	movw	r22, r18
     246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_VoidSetPinValue+0xa8>
     248:	66 0f       	add	r22, r22
     24a:	77 1f       	adc	r23, r23
     24c:	8a 95       	dec	r24
     24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_VoidSetPinValue+0xa4>
     250:	cb 01       	movw	r24, r22
     252:	84 2b       	or	r24, r20
     254:	85 bb       	out	0x15, r24	; 21
     256:	08 95       	ret
     258:	41 11       	cpse	r20, r1
     25a:	2c c0       	rjmp	.+88     	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     25c:	45 b3       	in	r20, 0x15	; 21
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	b9 01       	movw	r22, r18
     264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_VoidSetPinValue+0xc6>
     266:	66 0f       	add	r22, r22
     268:	77 1f       	adc	r23, r23
     26a:	8a 95       	dec	r24
     26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_VoidSetPinValue+0xc2>
     26e:	cb 01       	movw	r24, r22
     270:	80 95       	com	r24
     272:	84 23       	and	r24, r20
     274:	85 bb       	out	0x15, r24	; 21
     276:	08 95       	ret
     278:	41 30       	cpi	r20, 0x01	; 1
     27a:	69 f4       	brne	.+26     	; 0x296 <DIO_VoidSetPinValue+0xf2>
     27c:	42 b3       	in	r20, 0x12	; 18
     27e:	21 e0       	ldi	r18, 0x01	; 1
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	b9 01       	movw	r22, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_VoidSetPinValue+0xe6>
     286:	66 0f       	add	r22, r22
     288:	77 1f       	adc	r23, r23
     28a:	8a 95       	dec	r24
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_VoidSetPinValue+0xe2>
     28e:	cb 01       	movw	r24, r22
     290:	84 2b       	or	r24, r20
     292:	82 bb       	out	0x12, r24	; 18
     294:	08 95       	ret
     296:	41 11       	cpse	r20, r1
     298:	0d c0       	rjmp	.+26     	; 0x2b4 <DIO_VoidSetPinValue+0x110>
     29a:	42 b3       	in	r20, 0x12	; 18
     29c:	21 e0       	ldi	r18, 0x01	; 1
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	b9 01       	movw	r22, r18
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_VoidSetPinValue+0x104>
     2a4:	66 0f       	add	r22, r22
     2a6:	77 1f       	adc	r23, r23
     2a8:	8a 95       	dec	r24
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_VoidSetPinValue+0x100>
     2ac:	cb 01       	movw	r24, r22
     2ae:	80 95       	com	r24
     2b0:	84 23       	and	r24, r20
     2b2:	82 bb       	out	0x12, r24	; 18
     2b4:	08 95       	ret

000002b6 <DIO_VoidSetHigh4BitDirection>:


void DIO_VoidSetHigh4BitDirection(u8 port_number,u8 Direction)
{
	switch(port_number)
     2b6:	83 30       	cpi	r24, 0x03	; 3
     2b8:	81 f0       	breq	.+32     	; 0x2da <DIO_VoidSetHigh4BitDirection+0x24>
     2ba:	18 f4       	brcc	.+6      	; 0x2c2 <DIO_VoidSetHigh4BitDirection+0xc>
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	31 f0       	breq	.+12     	; 0x2cc <DIO_VoidSetHigh4BitDirection+0x16>
     2c0:	08 95       	ret
     2c2:	84 30       	cpi	r24, 0x04	; 4
     2c4:	89 f0       	breq	.+34     	; 0x2e8 <DIO_VoidSetHigh4BitDirection+0x32>
     2c6:	85 30       	cpi	r24, 0x05	; 5
     2c8:	b1 f0       	breq	.+44     	; 0x2f6 <DIO_VoidSetHigh4BitDirection+0x40>
     2ca:	08 95       	ret
	{
		case portA:
			DDRA_REG &=0X0F;
     2cc:	8a b3       	in	r24, 0x1a	; 26
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     2d2:	8a b3       	in	r24, 0x1a	; 26
     2d4:	68 2b       	or	r22, r24
     2d6:	6a bb       	out	0x1a, r22	; 26
			break;
     2d8:	08 95       	ret
			
		case portB:
			DDRA_REG &=0X0F;
     2da:	8a b3       	in	r24, 0x1a	; 26
     2dc:	8f 70       	andi	r24, 0x0F	; 15
     2de:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     2e0:	8a b3       	in	r24, 0x1a	; 26
     2e2:	68 2b       	or	r22, r24
     2e4:	6a bb       	out	0x1a, r22	; 26
			break;
     2e6:	08 95       	ret
			
		case portC:
			DDRA_REG &=0X0F;
     2e8:	8a b3       	in	r24, 0x1a	; 26
     2ea:	8f 70       	andi	r24, 0x0F	; 15
     2ec:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     2ee:	8a b3       	in	r24, 0x1a	; 26
     2f0:	68 2b       	or	r22, r24
     2f2:	6a bb       	out	0x1a, r22	; 26
			break;
     2f4:	08 95       	ret
			
		case portD:
			DDRA_REG &=0X0F;
     2f6:	8a b3       	in	r24, 0x1a	; 26
     2f8:	8f 70       	andi	r24, 0x0F	; 15
     2fa:	8a bb       	out	0x1a, r24	; 26
			DDRA_REG |=Direction;
     2fc:	8a b3       	in	r24, 0x1a	; 26
     2fe:	68 2b       	or	r22, r24
     300:	6a bb       	out	0x1a, r22	; 26
     302:	08 95       	ret

00000304 <DIO_VoidSetHigh4BitValue>:
	}
}

void DIO_VoidSetHigh4BitValue(u8 port_number,u8 value)
{
	switch(port_number)
     304:	83 30       	cpi	r24, 0x03	; 3
     306:	81 f0       	breq	.+32     	; 0x328 <DIO_VoidSetHigh4BitValue+0x24>
     308:	18 f4       	brcc	.+6      	; 0x310 <DIO_VoidSetHigh4BitValue+0xc>
     30a:	82 30       	cpi	r24, 0x02	; 2
     30c:	31 f0       	breq	.+12     	; 0x31a <DIO_VoidSetHigh4BitValue+0x16>
     30e:	08 95       	ret
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	89 f0       	breq	.+34     	; 0x336 <DIO_VoidSetHigh4BitValue+0x32>
     314:	85 30       	cpi	r24, 0x05	; 5
     316:	b1 f0       	breq	.+44     	; 0x344 <DIO_VoidSetHigh4BitValue+0x40>
     318:	08 95       	ret
	{
		case portA:
			PORTA_REG &=0X0F;
     31a:	8b b3       	in	r24, 0x1b	; 27
     31c:	8f 70       	andi	r24, 0x0F	; 15
     31e:	8b bb       	out	0x1b, r24	; 27
			PORTA_REG |=value;
     320:	8b b3       	in	r24, 0x1b	; 27
     322:	68 2b       	or	r22, r24
     324:	6b bb       	out	0x1b, r22	; 27
			break;
     326:	08 95       	ret
			
		case portB:
			PORTB_REG &=0X0F;
     328:	88 b3       	in	r24, 0x18	; 24
     32a:	8f 70       	andi	r24, 0x0F	; 15
     32c:	88 bb       	out	0x18, r24	; 24
			PORTB_REG |=value;
     32e:	88 b3       	in	r24, 0x18	; 24
     330:	68 2b       	or	r22, r24
     332:	68 bb       	out	0x18, r22	; 24
			break;
     334:	08 95       	ret
			
		case portC:
			PORTC_REG &=0X0F;
     336:	85 b3       	in	r24, 0x15	; 21
     338:	8f 70       	andi	r24, 0x0F	; 15
     33a:	85 bb       	out	0x15, r24	; 21
			PORTC_REG |=value;
     33c:	85 b3       	in	r24, 0x15	; 21
     33e:	68 2b       	or	r22, r24
     340:	65 bb       	out	0x15, r22	; 21
			break;
     342:	08 95       	ret
			
		case portD:
			PORTD_REG &=0X0F;
     344:	82 b3       	in	r24, 0x12	; 18
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	82 bb       	out	0x12, r24	; 18
			PORTD_REG |=value;
     34a:	82 b3       	in	r24, 0x12	; 18
     34c:	68 2b       	or	r22, r24
     34e:	62 bb       	out	0x12, r22	; 18
     350:	08 95       	ret

00000352 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
     358:	0e 94 f6 09 	call	0x13ec	; 0x13ec <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     35c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     360:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
     364:	89 2b       	or	r24, r25
     366:	31 f4       	brne	.+12     	; 0x374 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     368:	8d e8       	ldi	r24, 0x8D	; 141
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
     370:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     374:	20 97       	sbiw	r28, 0x00	; 0
     376:	c9 f0       	breq	.+50     	; 0x3aa <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     378:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <xNextFreeByte>
     37c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <xNextFreeByte+0x1>
     380:	9e 01       	movw	r18, r28
     382:	28 0f       	add	r18, r24
     384:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
     386:	2b 3d       	cpi	r18, 0xDB	; 219
     388:	45 e0       	ldi	r20, 0x05	; 5
     38a:	34 07       	cpc	r19, r20
     38c:	88 f4       	brcc	.+34     	; 0x3b0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     38e:	82 17       	cp	r24, r18
     390:	93 07       	cpc	r25, r19
     392:	88 f4       	brcc	.+34     	; 0x3b6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     394:	c0 91 88 00 	lds	r28, 0x0088	; 0x800088 <__data_end>
     398:	d0 91 89 00 	lds	r29, 0x0089	; 0x800089 <__data_end+0x1>
     39c:	c8 0f       	add	r28, r24
     39e:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     3a0:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <xNextFreeByte+0x1>
     3a4:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <xNextFreeByte>
     3a8:	08 c0       	rjmp	.+16     	; 0x3ba <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     3aa:	c0 e0       	ldi	r28, 0x00	; 0
     3ac:	d0 e0       	ldi	r29, 0x00	; 0
     3ae:	05 c0       	rjmp	.+10     	; 0x3ba <pvPortMalloc+0x68>
     3b0:	c0 e0       	ldi	r28, 0x00	; 0
     3b2:	d0 e0       	ldi	r29, 0x00	; 0
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <pvPortMalloc+0x68>
     3b6:	c0 e0       	ldi	r28, 0x00	; 0
     3b8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3ba:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
     3be:	ce 01       	movw	r24, r28
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3c6:	08 95       	ret

000003c8 <LCD_Void_4BitSendCommand>:
/************************************************************************/

static u8 INIT_step_finished=0;

void LCD_Void_4BitSendCommand(u8 command)
{
     3c8:	cf 93       	push	r28
     3ca:	c8 2f       	mov	r28, r24
	u8 COMMAND=command;
	DIO_VoidSetPinValue(RS,CONTROLPORT,LOW);
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	65 e0       	ldi	r22, 0x05	; 5
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW,CONTROLPORT,LOW);
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	65 e0       	ldi	r22, 0x05	; 5
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	COMMAND =(command) & (0XF0);
     3e0:	6c 2f       	mov	r22, r28
     3e2:	60 7f       	andi	r22, 0xF0	; 240
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,COMMAND);
     3e4:	85 e0       	ldi	r24, 0x05	; 5
     3e6:	0e 94 82 01 	call	0x304	; 0x304 <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,COMMAND);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     3ea:	41 e0       	ldi	r20, 0x01	; 1
     3ec:	65 e0       	ldi	r22, 0x05	; 5
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f4:	8f e9       	ldi	r24, 0x9F	; 159
     3f6:	9f e0       	ldi	r25, 0x0F	; 15
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_Void_4BitSendCommand+0x30>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_Void_4BitSendCommand+0x36>
     3fe:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	65 e0       	ldi	r22, 0x05	; 5
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	if (INIT_step_finished==1)
     40a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <INIT_step_finished>
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	b9 f4       	brne	.+46     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	{
		COMMAND =(command<<4) & (0XF0);
     412:	90 e1       	ldi	r25, 0x10	; 16
     414:	c9 9f       	mul	r28, r25
     416:	b0 01       	movw	r22, r0
     418:	11 24       	eor	r1, r1
		
		if (UPPER_PINS_4BIT ==1)
		{
			DIO_VoidSetHigh4BitValue(DATAPORT,COMMAND);
     41a:	85 e0       	ldi	r24, 0x05	; 5
     41c:	0e 94 82 01 	call	0x304	; 0x304 <DIO_VoidSetHigh4BitValue>
		else
		{
			DIO_VoidSetLow4BitValue(DATAPORT,COMMAND);
		}
		
		DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     420:	41 e0       	ldi	r20, 0x01	; 1
     422:	65 e0       	ldi	r22, 0x05	; 5
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     42a:	8f e9       	ldi	r24, 0x9F	; 159
     42c:	9f e0       	ldi	r25, 0x0F	; 15
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     434:	00 00       	nop
		_delay_ms(2);
		DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	65 e0       	ldi	r22, 0x05	; 5
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     440:	8f e9       	ldi	r24, 0x9F	; 159
     442:	9f e0       	ldi	r25, 0x0F	; 15
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     44a:	00 00       	nop
	}
	_delay_ms(2);
}
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <LCD_Void_4BitInit>:

void LCD_Void_4BitInit(void)
{
	INIT_step_finished=0;
     450:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <INIT_step_finished>
	DIO_VoidSetPinDirection(RS,CONTROLPORT,OUTPUT);
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	65 e0       	ldi	r22, 0x05	; 5
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(RW,CONTROLPORT,OUTPUT);
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	65 e0       	ldi	r22, 0x05	; 5
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(EN,CONTROLPORT,OUTPUT);
     468:	41 e0       	ldi	r20, 0x01	; 1
     46a:	65 e0       	ldi	r22, 0x05	; 5
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitDirection(DATAPORT,0XF0);
     472:	60 ef       	ldi	r22, 0xF0	; 240
     474:	85 e0       	ldi	r24, 0x05	; 5
     476:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_VoidSetHigh4BitDirection>
     47a:	8f e5       	ldi	r24, 0x5F	; 95
     47c:	9a ee       	ldi	r25, 0xEA	; 234
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <LCD_Void_4BitInit+0x2e>
     482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_Void_4BitInit+0x34>
     484:	00 00       	nop
		DIO_VoidSetLow4BitDirection(DATAPORT,0X0F);
	}
	
	
	_delay_ms(30);
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT>>4) & (0XF0));
     486:	80 e2       	ldi	r24, 0x20	; 32
     488:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT) & (0X0F0));
     48c:	80 e2       	ldi	r24, 0x20	; 32
     48e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((FUNCTIONSET_4BIT<<4) & (0XF0));
     492:	80 e8       	ldi	r24, 0x80	; 128
     494:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
     498:	8f e9       	ldi	r24, 0x9F	; 159
     49a:	9f e0       	ldi	r25, 0x0F	; 15
     49c:	01 97       	sbiw	r24, 0x01	; 1
     49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_Void_4BitInit+0x4c>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_Void_4BitInit+0x52>
     4a2:	00 00       	nop
	_delay_ms(2);
	LCD_Void_4BitSendCommand((DISPLAYON) & (0XF0));
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((DISPLAYON<<4) & (0XF0));
     4aa:	80 ee       	ldi	r24, 0xE0	; 224
     4ac:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
     4b0:	8f e9       	ldi	r24, 0x9F	; 159
     4b2:	9f e0       	ldi	r25, 0x0F	; 15
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_Void_4BitInit+0x64>
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCD_Void_4BitInit+0x6a>
     4ba:	00 00       	nop
	_delay_ms(2);
	LCD_Void_4BitSendCommand((DISPLAYCLEAR) & (0XF0));
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((DISPLAYCLEAR<<4) & (0XF0));
     4c2:	80 e1       	ldi	r24, 0x10	; 16
     4c4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
     4c8:	8f e2       	ldi	r24, 0x2F	; 47
     4ca:	95 e7       	ldi	r25, 0x75	; 117
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_Void_4BitInit+0x7c>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCD_Void_4BitInit+0x82>
     4d2:	00 00       	nop
	_delay_ms(15);
	LCD_Void_4BitSendCommand((ENTRYMODESET) & (0XF0));
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	LCD_Void_4BitSendCommand((ENTRYMODESET<<4) & (0XF0));
     4da:	80 e2       	ldi	r24, 0x20	; 32
     4dc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
	
	INIT_step_finished=1;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <INIT_step_finished>
     4e6:	08 95       	ret

000004e8 <LCD_Void_4BitSendChar>:
}


/* LCD_VoidSendChar('0')  */
void LCD_Void_4BitSendChar(u8 data)
{
     4e8:	cf 93       	push	r28
     4ea:	c8 2f       	mov	r28, r24
	u8 DATA =data;
	DIO_VoidSetPinValue(RS,CONTROLPORT,HIGH);
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	65 e0       	ldi	r22, 0x05	; 5
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	DIO_VoidSetPinValue(RW,CONTROLPORT,LOW);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	65 e0       	ldi	r22, 0x05	; 5
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	
	DATA =(data) & (0XF0);
     500:	6c 2f       	mov	r22, r28
     502:	60 7f       	andi	r22, 0xF0	; 240
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,DATA);
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	0e 94 82 01 	call	0x304	; 0x304 <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,DATA);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	65 e0       	ldi	r22, 0x05	; 5
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     514:	8f e9       	ldi	r24, 0x9F	; 159
     516:	9f e0       	ldi	r25, 0x0F	; 15
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_Void_4BitSendChar+0x30>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_Void_4BitSendChar+0x36>
     51e:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	65 e0       	ldi	r22, 0x05	; 5
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
	
	DATA =(data<<4) & (0XF0);
     52a:	90 e1       	ldi	r25, 0x10	; 16
     52c:	c9 9f       	mul	r28, r25
     52e:	b0 01       	movw	r22, r0
     530:	11 24       	eor	r1, r1
	
	if (UPPER_PINS_4BIT ==1)
	{
		DIO_VoidSetHigh4BitValue(DATAPORT,DATA);
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	0e 94 82 01 	call	0x304	; 0x304 <DIO_VoidSetHigh4BitValue>
	else
	{
		DIO_VoidSetLow4BitValue(DATAPORT,DATA);
	}
	
	DIO_VoidSetPinValue(EN,CONTROLPORT,HIGH);
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	65 e0       	ldi	r22, 0x05	; 5
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
     542:	8f e9       	ldi	r24, 0x9F	; 159
     544:	9f e0       	ldi	r25, 0x0F	; 15
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <LCD_Void_4BitSendChar+0x5e>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <LCD_Void_4BitSendChar+0x64>
     54c:	00 00       	nop
	_delay_ms(2);
	DIO_VoidSetPinValue(EN,CONTROLPORT,LOW);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	65 e0       	ldi	r22, 0x05	; 5
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidSetPinValue>
}
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <LCD_Void_4BitSendString>:

void LCD_Void_4BitSendString(u8* PtrToString)
{
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	8c 01       	movw	r16, r24
	u8 i=0;
     564:	c0 e0       	ldi	r28, 0x00	; 0
	while(PtrToString[i] !='\0')
     566:	03 c0       	rjmp	.+6      	; 0x56e <LCD_Void_4BitSendString+0x12>
	{
		LCD_Void_4BitSendChar(PtrToString[i]);
     568:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Void_4BitSendChar>
		i++;
     56c:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_Void_4BitSendString(u8* PtrToString)
{
	u8 i=0;
	while(PtrToString[i] !='\0')
     56e:	f8 01       	movw	r30, r16
     570:	ec 0f       	add	r30, r28
     572:	f1 1d       	adc	r31, r1
     574:	80 81       	ld	r24, Z
     576:	81 11       	cpse	r24, r1
     578:	f7 cf       	rjmp	.-18     	; 0x568 <LCD_Void_4BitSendString+0xc>
	{
		LCD_Void_4BitSendChar(PtrToString[i]);
		i++;
	}
}
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     582:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     584:	03 96       	adiw	r24, 0x03	; 3
     586:	92 83       	std	Z+2, r25	; 0x02
     588:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     58a:	2f ef       	ldi	r18, 0xFF	; 255
     58c:	3f ef       	ldi	r19, 0xFF	; 255
     58e:	34 83       	std	Z+4, r19	; 0x04
     590:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     592:	96 83       	std	Z+6, r25	; 0x06
     594:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     596:	90 87       	std	Z+8, r25	; 0x08
     598:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     59a:	10 82       	st	Z, r1
     59c:	08 95       	ret

0000059e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     59e:	fc 01       	movw	r30, r24
     5a0:	11 86       	std	Z+9, r1	; 0x09
     5a2:	10 86       	std	Z+8, r1	; 0x08
     5a4:	08 95       	ret

000005a6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	9c 01       	movw	r18, r24
     5ac:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     5ae:	dc 01       	movw	r26, r24
     5b0:	11 96       	adiw	r26, 0x01	; 1
     5b2:	cd 91       	ld	r28, X+
     5b4:	dc 91       	ld	r29, X
     5b6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     5b8:	d3 83       	std	Z+3, r29	; 0x03
     5ba:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     5bc:	8c 81       	ldd	r24, Y+4	; 0x04
     5be:	9d 81       	ldd	r25, Y+5	; 0x05
     5c0:	95 83       	std	Z+5, r25	; 0x05
     5c2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     5c4:	8c 81       	ldd	r24, Y+4	; 0x04
     5c6:	9d 81       	ldd	r25, Y+5	; 0x05
     5c8:	dc 01       	movw	r26, r24
     5ca:	13 96       	adiw	r26, 0x03	; 3
     5cc:	7c 93       	st	X, r23
     5ce:	6e 93       	st	-X, r22
     5d0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     5d2:	7d 83       	std	Y+5, r23	; 0x05
     5d4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     5d6:	31 87       	std	Z+9, r19	; 0x09
     5d8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     5da:	f9 01       	movw	r30, r18
     5dc:	80 81       	ld	r24, Z
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	80 83       	st	Z, r24
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     5ee:	48 81       	ld	r20, Y
     5f0:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     5f2:	4f 3f       	cpi	r20, 0xFF	; 255
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	52 07       	cpc	r21, r18
     5f8:	21 f4       	brne	.+8      	; 0x602 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     5fa:	fc 01       	movw	r30, r24
     5fc:	a7 81       	ldd	r26, Z+7	; 0x07
     5fe:	b0 85       	ldd	r27, Z+8	; 0x08
     600:	0d c0       	rjmp	.+26     	; 0x61c <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     602:	dc 01       	movw	r26, r24
     604:	13 96       	adiw	r26, 0x03	; 3
     606:	01 c0       	rjmp	.+2      	; 0x60a <vListInsert+0x22>
     608:	df 01       	movw	r26, r30
     60a:	12 96       	adiw	r26, 0x02	; 2
     60c:	ed 91       	ld	r30, X+
     60e:	fc 91       	ld	r31, X
     610:	13 97       	sbiw	r26, 0x03	; 3
     612:	20 81       	ld	r18, Z
     614:	31 81       	ldd	r19, Z+1	; 0x01
     616:	42 17       	cp	r20, r18
     618:	53 07       	cpc	r21, r19
     61a:	b0 f7       	brcc	.-20     	; 0x608 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     61c:	12 96       	adiw	r26, 0x02	; 2
     61e:	ed 91       	ld	r30, X+
     620:	fc 91       	ld	r31, X
     622:	13 97       	sbiw	r26, 0x03	; 3
     624:	fb 83       	std	Y+3, r31	; 0x03
     626:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     628:	d5 83       	std	Z+5, r29	; 0x05
     62a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     62c:	bd 83       	std	Y+5, r27	; 0x05
     62e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     630:	13 96       	adiw	r26, 0x03	; 3
     632:	dc 93       	st	X, r29
     634:	ce 93       	st	-X, r28
     636:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     638:	99 87       	std	Y+9, r25	; 0x09
     63a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     63c:	fc 01       	movw	r30, r24
     63e:	20 81       	ld	r18, Z
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	20 83       	st	Z, r18
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     650:	a0 85       	ldd	r26, Z+8	; 0x08
     652:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     654:	c2 81       	ldd	r28, Z+2	; 0x02
     656:	d3 81       	ldd	r29, Z+3	; 0x03
     658:	84 81       	ldd	r24, Z+4	; 0x04
     65a:	95 81       	ldd	r25, Z+5	; 0x05
     65c:	9d 83       	std	Y+5, r25	; 0x05
     65e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     660:	c4 81       	ldd	r28, Z+4	; 0x04
     662:	d5 81       	ldd	r29, Z+5	; 0x05
     664:	82 81       	ldd	r24, Z+2	; 0x02
     666:	93 81       	ldd	r25, Z+3	; 0x03
     668:	9b 83       	std	Y+3, r25	; 0x03
     66a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     66c:	11 96       	adiw	r26, 0x01	; 1
     66e:	8d 91       	ld	r24, X+
     670:	9c 91       	ld	r25, X
     672:	12 97       	sbiw	r26, 0x02	; 2
     674:	e8 17       	cp	r30, r24
     676:	f9 07       	cpc	r31, r25
     678:	31 f4       	brne	.+12     	; 0x686 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     67a:	84 81       	ldd	r24, Z+4	; 0x04
     67c:	95 81       	ldd	r25, Z+5	; 0x05
     67e:	12 96       	adiw	r26, 0x02	; 2
     680:	9c 93       	st	X, r25
     682:	8e 93       	st	-X, r24
     684:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     686:	11 86       	std	Z+9, r1	; 0x09
     688:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     68a:	8c 91       	ld	r24, X
     68c:	81 50       	subi	r24, 0x01	; 1
     68e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     690:	8c 91       	ld	r24, X
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <task1>:
void task1(void *pvParameter)
{
	BaseType_t ret = pdFALSE;
	for (;;)
	{
		ret = xSemaphoreTake(LCD_SEM,2000);
     698:	60 ed       	ldi	r22, 0xD0	; 208
     69a:	77 e0       	ldi	r23, 0x07	; 7
     69c:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <LCD_SEM>
     6a0:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <LCD_SEM+0x1>
     6a4:	0e 94 1b 07 	call	0xe36	; 0xe36 <xQueueSemaphoreTake>
		if (ret == pdTRUE)
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	99 f4       	brne	.+38     	; 0x6d2 <task1+0x3a>
		{
			LCD_Void_4BitSendCommand(DISPLAYCLEAR);
     6ac:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
			LCD_Void_4BitSendString((u8*)"I'm Task 1");
     6b0:	81 e6       	ldi	r24, 0x61	; 97
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Void_4BitSendString>
     6b8:	2f e3       	ldi	r18, 0x3F	; 63
     6ba:	8d e0       	ldi	r24, 0x0D	; 13
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	21 50       	subi	r18, 0x01	; 1
     6c0:	80 40       	sbci	r24, 0x00	; 0
     6c2:	90 40       	sbci	r25, 0x00	; 0
     6c4:	e1 f7       	brne	.-8      	; 0x6be <task1+0x26>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <task1+0x30>
     6c8:	00 00       	nop
			_delay_ms(1000);			// During this delay the task in the running state
			vTaskDelay(2000);			// During this delay the task in the waiting state
     6ca:	80 ed       	ldi	r24, 0xD0	; 208
     6cc:	97 e0       	ldi	r25, 0x07	; 7
     6ce:	0e 94 30 0b 	call	0x1660	; 0x1660 <vTaskDelay>
		}
		
		xSemaphoreGive(LCD_SEM);
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <LCD_SEM>
     6e0:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <LCD_SEM+0x1>
     6e4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <xQueueGenericSend>
	}
     6e8:	d7 cf       	rjmp	.-82     	; 0x698 <task1>

000006ea <task2>:

void task2(void *pvParameter)
{BaseType_t ret = pdFALSE;
	for (;;)
	{
		ret = xSemaphoreTake(LCD_SEM,2000);
     6ea:	60 ed       	ldi	r22, 0xD0	; 208
     6ec:	77 e0       	ldi	r23, 0x07	; 7
     6ee:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <LCD_SEM>
     6f2:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <LCD_SEM+0x1>
     6f6:	0e 94 1b 07 	call	0xe36	; 0xe36 <xQueueSemaphoreTake>
		if (ret == pdTRUE)
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	99 f4       	brne	.+38     	; 0x724 <task2+0x3a>
		{
			LCD_Void_4BitSendCommand(DISPLAYCLEAR);
     6fe:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Void_4BitSendCommand>
			LCD_Void_4BitSendString((u8*)"I'm Task 2");
     702:	8c e6       	ldi	r24, 0x6C	; 108
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_Void_4BitSendString>
     70a:	2f e3       	ldi	r18, 0x3F	; 63
     70c:	8d e0       	ldi	r24, 0x0D	; 13
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	21 50       	subi	r18, 0x01	; 1
     712:	80 40       	sbci	r24, 0x00	; 0
     714:	90 40       	sbci	r25, 0x00	; 0
     716:	e1 f7       	brne	.-8      	; 0x710 <task2+0x26>
     718:	00 c0       	rjmp	.+0      	; 0x71a <task2+0x30>
     71a:	00 00       	nop
			_delay_ms(1000);			// During this delay the task in the running state
			vTaskDelay(2000);			// During this delay the task in the waiting state
     71c:	80 ed       	ldi	r24, 0xD0	; 208
     71e:	97 e0       	ldi	r25, 0x07	; 7
     720:	0e 94 30 0b 	call	0x1660	; 0x1660 <vTaskDelay>
		}
		
		xSemaphoreGive(LCD_SEM);
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <LCD_SEM>
     732:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <LCD_SEM+0x1>
     736:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <xQueueGenericSend>
	}
     73a:	d7 cf       	rjmp	.-82     	; 0x6ea <task2>

0000073c <main>:

void task2(void *pvParameter);


int main()
{
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
	
	LCD_Void_4BitInit();
     742:	0e 94 28 02 	call	0x450	; 0x450 <LCD_Void_4BitInit>
	
	/* for shared resources it is better to use mutex */
	LCD_SEM = xSemaphoreCreateMutex();
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	0e 94 0d 07 	call	0xe1a	; 0xe1a <xQueueCreateMutex>
     74c:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <LCD_SEM+0x1>
     750:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <LCD_SEM>
	{
		/* semaphore created successfully*/
	}
	BaseType_t task1_return = pdFALSE, task2_return = pdFALSE ;
	/* Create the Tasks */
	task1_return = xTaskCreate((pdTASK_CODE)task1, (signed char *)"task1", configMINIMAL_STACK_SIZE, NULL, TASK1_PRIORITY, &task1_handle);
     754:	0f 2e       	mov	r0, r31
     756:	fd e6       	ldi	r31, 0x6D	; 109
     758:	ef 2e       	mov	r14, r31
     75a:	f6 e0       	ldi	r31, 0x06	; 6
     75c:	ff 2e       	mov	r15, r31
     75e:	f0 2d       	mov	r31, r0
     760:	03 e0       	ldi	r16, 0x03	; 3
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	45 e5       	ldi	r20, 0x55	; 85
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	67 e7       	ldi	r22, 0x77	; 119
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	8c e4       	ldi	r24, 0x4C	; 76
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	0e 94 76 09 	call	0x12ec	; 0x12ec <xTaskCreate>
	task2_return = xTaskCreate((pdTASK_CODE)task2, (signed char *)"task2", configMINIMAL_STACK_SIZE, NULL, TASK2_PRIORITY, &task2_handle);
     776:	0f 2e       	mov	r0, r31
     778:	fb e6       	ldi	r31, 0x6B	; 107
     77a:	ef 2e       	mov	r14, r31
     77c:	f6 e0       	ldi	r31, 0x06	; 6
     77e:	ff 2e       	mov	r15, r31
     780:	f0 2d       	mov	r31, r0
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	45 e5       	ldi	r20, 0x55	; 85
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	6d e7       	ldi	r22, 0x7D	; 125
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	85 e7       	ldi	r24, 0x75	; 117
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	0e 94 76 09 	call	0x12ec	; 0x12ec <xTaskCreate>
	if (task2_return == pdTRUE)
	{
		/* task2 created successfully */
	}
	
	vTaskStartScheduler();
     796:	0e 94 ca 09 	call	0x1394	; 0x1394 <vTaskStartScheduler>
	return 0;
}
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	08 95       	ret

000007a6 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     7a6:	1b bc       	out	0x2b, r1	; 43
     7a8:	8c e7       	ldi	r24, 0x7C	; 124
     7aa:	8a bd       	out	0x2a, r24	; 42
     7ac:	8b e0       	ldi	r24, 0x0B	; 11
     7ae:	8e bd       	out	0x2e, r24	; 46
     7b0:	89 b7       	in	r24, 0x39	; 57
     7b2:	80 61       	ori	r24, 0x10	; 16
     7b4:	89 bf       	out	0x39, r24	; 57
     7b6:	08 95       	ret

000007b8 <pxPortInitialiseStack>:
     7b8:	31 e1       	ldi	r19, 0x11	; 17
     7ba:	fc 01       	movw	r30, r24
     7bc:	30 83       	st	Z, r19
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	22 e2       	ldi	r18, 0x22	; 34
     7c2:	20 83       	st	Z, r18
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	a3 e3       	ldi	r26, 0x33	; 51
     7c8:	a0 83       	st	Z, r26
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	60 83       	st	Z, r22
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	70 83       	st	Z, r23
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	10 82       	st	Z, r1
     7d6:	31 97       	sbiw	r30, 0x01	; 1
     7d8:	60 e8       	ldi	r22, 0x80	; 128
     7da:	60 83       	st	Z, r22
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	10 82       	st	Z, r1
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	62 e0       	ldi	r22, 0x02	; 2
     7e4:	60 83       	st	Z, r22
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	63 e0       	ldi	r22, 0x03	; 3
     7ea:	60 83       	st	Z, r22
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	64 e0       	ldi	r22, 0x04	; 4
     7f0:	60 83       	st	Z, r22
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	65 e0       	ldi	r22, 0x05	; 5
     7f6:	60 83       	st	Z, r22
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	66 e0       	ldi	r22, 0x06	; 6
     7fc:	60 83       	st	Z, r22
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	67 e0       	ldi	r22, 0x07	; 7
     802:	60 83       	st	Z, r22
     804:	31 97       	sbiw	r30, 0x01	; 1
     806:	68 e0       	ldi	r22, 0x08	; 8
     808:	60 83       	st	Z, r22
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	69 e0       	ldi	r22, 0x09	; 9
     80e:	60 83       	st	Z, r22
     810:	31 97       	sbiw	r30, 0x01	; 1
     812:	60 e1       	ldi	r22, 0x10	; 16
     814:	60 83       	st	Z, r22
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	30 83       	st	Z, r19
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	32 e1       	ldi	r19, 0x12	; 18
     81e:	30 83       	st	Z, r19
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	33 e1       	ldi	r19, 0x13	; 19
     824:	30 83       	st	Z, r19
     826:	31 97       	sbiw	r30, 0x01	; 1
     828:	34 e1       	ldi	r19, 0x14	; 20
     82a:	30 83       	st	Z, r19
     82c:	31 97       	sbiw	r30, 0x01	; 1
     82e:	35 e1       	ldi	r19, 0x15	; 21
     830:	30 83       	st	Z, r19
     832:	31 97       	sbiw	r30, 0x01	; 1
     834:	36 e1       	ldi	r19, 0x16	; 22
     836:	30 83       	st	Z, r19
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	37 e1       	ldi	r19, 0x17	; 23
     83c:	30 83       	st	Z, r19
     83e:	31 97       	sbiw	r30, 0x01	; 1
     840:	38 e1       	ldi	r19, 0x18	; 24
     842:	30 83       	st	Z, r19
     844:	31 97       	sbiw	r30, 0x01	; 1
     846:	39 e1       	ldi	r19, 0x19	; 25
     848:	30 83       	st	Z, r19
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	30 e2       	ldi	r19, 0x20	; 32
     84e:	30 83       	st	Z, r19
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	31 e2       	ldi	r19, 0x21	; 33
     854:	30 83       	st	Z, r19
     856:	31 97       	sbiw	r30, 0x01	; 1
     858:	20 83       	st	Z, r18
     85a:	31 97       	sbiw	r30, 0x01	; 1
     85c:	23 e2       	ldi	r18, 0x23	; 35
     85e:	20 83       	st	Z, r18
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	40 83       	st	Z, r20
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	50 83       	st	Z, r21
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	26 e2       	ldi	r18, 0x26	; 38
     86c:	20 83       	st	Z, r18
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	27 e2       	ldi	r18, 0x27	; 39
     872:	20 83       	st	Z, r18
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	28 e2       	ldi	r18, 0x28	; 40
     878:	20 83       	st	Z, r18
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	29 e2       	ldi	r18, 0x29	; 41
     87e:	20 83       	st	Z, r18
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	20 e3       	ldi	r18, 0x30	; 48
     884:	20 83       	st	Z, r18
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	21 e3       	ldi	r18, 0x31	; 49
     88a:	20 83       	st	Z, r18
     88c:	86 97       	sbiw	r24, 0x26	; 38
     88e:	08 95       	ret

00000890 <xPortStartScheduler>:
     890:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <prvSetupTimerInterrupt>
     894:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <pxCurrentTCB>
     898:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
     89c:	cd 91       	ld	r28, X+
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	dd 91       	ld	r29, X+
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	8f 90       	pop	r8
     8d4:	7f 90       	pop	r7
     8d6:	6f 90       	pop	r6
     8d8:	5f 90       	pop	r5
     8da:	4f 90       	pop	r4
     8dc:	3f 90       	pop	r3
     8de:	2f 90       	pop	r2
     8e0:	1f 90       	pop	r1
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	08 95       	ret
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	08 95       	ret

000008ee <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	0f 92       	push	r0
     8f6:	1f 92       	push	r1
     8f8:	11 24       	eor	r1, r1
     8fa:	2f 92       	push	r2
     8fc:	3f 92       	push	r3
     8fe:	4f 92       	push	r4
     900:	5f 92       	push	r5
     902:	6f 92       	push	r6
     904:	7f 92       	push	r7
     906:	8f 92       	push	r8
     908:	9f 92       	push	r9
     90a:	af 92       	push	r10
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
     936:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <pxCurrentTCB>
     93a:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
     93e:	0d b6       	in	r0, 0x3d	; 61
     940:	0d 92       	st	X+, r0
     942:	0e b6       	in	r0, 0x3e	; 62
     944:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     946:	0e 94 46 0b 	call	0x168c	; 0x168c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     94a:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <pxCurrentTCB>
     94e:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
     952:	cd 91       	ld	r28, X+
     954:	cd bf       	out	0x3d, r28	; 61
     956:	dd 91       	ld	r29, X+
     958:	de bf       	out	0x3e, r29	; 62
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	bf 91       	pop	r27
     964:	af 91       	pop	r26
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	7f 91       	pop	r23
     96c:	6f 91       	pop	r22
     96e:	5f 91       	pop	r21
     970:	4f 91       	pop	r20
     972:	3f 91       	pop	r19
     974:	2f 91       	pop	r18
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	df 90       	pop	r13
     980:	cf 90       	pop	r12
     982:	bf 90       	pop	r11
     984:	af 90       	pop	r10
     986:	9f 90       	pop	r9
     988:	8f 90       	pop	r8
     98a:	7f 90       	pop	r7
     98c:	6f 90       	pop	r6
     98e:	5f 90       	pop	r5
     990:	4f 90       	pop	r4
     992:	3f 90       	pop	r3
     994:	2f 90       	pop	r2
     996:	1f 90       	pop	r1
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     99e:	08 95       	ret

000009a0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     9a0:	0f 92       	push	r0
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	0f 92       	push	r0
     9a8:	1f 92       	push	r1
     9aa:	11 24       	eor	r1, r1
     9ac:	2f 92       	push	r2
     9ae:	3f 92       	push	r3
     9b0:	4f 92       	push	r4
     9b2:	5f 92       	push	r5
     9b4:	6f 92       	push	r6
     9b6:	7f 92       	push	r7
     9b8:	8f 92       	push	r8
     9ba:	9f 92       	push	r9
     9bc:	af 92       	push	r10
     9be:	bf 92       	push	r11
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
     9e8:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <pxCurrentTCB>
     9ec:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
     9f0:	0d b6       	in	r0, 0x3d	; 61
     9f2:	0d 92       	st	X+, r0
     9f4:	0e b6       	in	r0, 0x3e	; 62
     9f6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     9f8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <xTaskIncrementTick>
     9fc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     9fe:	0e 94 46 0b 	call	0x168c	; 0x168c <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     a02:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <pxCurrentTCB>
     a06:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
     a0a:	cd 91       	ld	r28, X+
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	dd 91       	ld	r29, X+
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	bf 91       	pop	r27
     a1c:	af 91       	pop	r26
     a1e:	9f 91       	pop	r25
     a20:	8f 91       	pop	r24
     a22:	7f 91       	pop	r23
     a24:	6f 91       	pop	r22
     a26:	5f 91       	pop	r21
     a28:	4f 91       	pop	r20
     a2a:	3f 91       	pop	r19
     a2c:	2f 91       	pop	r18
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	bf 90       	pop	r11
     a3c:	af 90       	pop	r10
     a3e:	9f 90       	pop	r9
     a40:	8f 90       	pop	r8
     a42:	7f 90       	pop	r7
     a44:	6f 90       	pop	r6
     a46:	5f 90       	pop	r5
     a48:	4f 90       	pop	r4
     a4a:	3f 90       	pop	r3
     a4c:	2f 90       	pop	r2
     a4e:	1f 90       	pop	r1
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0

	asm volatile ( "ret" );
     a56:	08 95       	ret

00000a58 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     a58:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <vPortYieldFromTick>
		asm volatile ( "reti" );
     a5c:	18 95       	reti

00000a5e <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     a5e:	dc 01       	movw	r26, r24
     a60:	51 96       	adiw	r26, 0x11	; 17
     a62:	2c 91       	ld	r18, X
     a64:	51 97       	sbiw	r26, 0x11	; 17
     a66:	22 23       	and	r18, r18
     a68:	41 f0       	breq	.+16     	; 0xa7a <prvGetDisinheritPriorityAfterTimeout+0x1c>
     a6a:	56 96       	adiw	r26, 0x16	; 22
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	57 97       	sbiw	r26, 0x17	; 23
     a72:	90 81       	ld	r25, Z
     a74:	85 e0       	ldi	r24, 0x05	; 5
     a76:	89 1b       	sub	r24, r25
     a78:	08 95       	ret
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	08 95       	ret

00000a7e <prvIsQueueEmpty>:
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	0f 92       	push	r0
     a84:	fc 01       	movw	r30, r24
     a86:	82 8d       	ldd	r24, Z+26	; 0x1a
     a88:	81 11       	cpse	r24, r1
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <prvIsQueueEmpty+0x12>
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <prvIsQueueEmpty+0x14>
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	08 95       	ret

00000a98 <prvIsQueueFull>:
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	0f 92       	push	r0
     a9e:	fc 01       	movw	r30, r24
     aa0:	22 8d       	ldd	r18, Z+26	; 0x1a
     aa2:	83 8d       	ldd	r24, Z+27	; 0x1b
     aa4:	28 13       	cpse	r18, r24
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <prvIsQueueFull+0x14>
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <prvIsQueueFull+0x16>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	08 95       	ret

00000ab4 <prvCopyDataToQueue>:
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	04 2f       	mov	r16, r20
     ac0:	1a 8d       	ldd	r17, Y+26	; 0x1a
     ac2:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ac4:	41 11       	cpse	r20, r1
     ac6:	0c c0       	rjmp	.+24     	; 0xae0 <prvCopyDataToQueue+0x2c>
     ac8:	88 81       	ld	r24, Y
     aca:	99 81       	ldd	r25, Y+1	; 0x01
     acc:	89 2b       	or	r24, r25
     ace:	09 f0       	breq	.+2      	; 0xad2 <prvCopyDataToQueue+0x1e>
     ad0:	42 c0       	rjmp	.+132    	; 0xb56 <prvCopyDataToQueue+0xa2>
     ad2:	8c 81       	ldd	r24, Y+4	; 0x04
     ad4:	9d 81       	ldd	r25, Y+5	; 0x05
     ad6:	0e 94 a7 0c 	call	0x194e	; 0x194e <xTaskPriorityDisinherit>
     ada:	1d 82       	std	Y+5, r1	; 0x05
     adc:	1c 82       	std	Y+4, r1	; 0x04
     ade:	42 c0       	rjmp	.+132    	; 0xb64 <prvCopyDataToQueue+0xb0>
     ae0:	01 11       	cpse	r16, r1
     ae2:	17 c0       	rjmp	.+46     	; 0xb12 <prvCopyDataToQueue+0x5e>
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	8a 81       	ldd	r24, Y+2	; 0x02
     ae8:	9b 81       	ldd	r25, Y+3	; 0x03
     aea:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <memcpy>
     aee:	2c 8d       	ldd	r18, Y+28	; 0x1c
     af0:	8a 81       	ldd	r24, Y+2	; 0x02
     af2:	9b 81       	ldd	r25, Y+3	; 0x03
     af4:	82 0f       	add	r24, r18
     af6:	91 1d       	adc	r25, r1
     af8:	9b 83       	std	Y+3, r25	; 0x03
     afa:	8a 83       	std	Y+2, r24	; 0x02
     afc:	2c 81       	ldd	r18, Y+4	; 0x04
     afe:	3d 81       	ldd	r19, Y+5	; 0x05
     b00:	82 17       	cp	r24, r18
     b02:	93 07       	cpc	r25, r19
     b04:	50 f1       	brcs	.+84     	; 0xb5a <prvCopyDataToQueue+0xa6>
     b06:	88 81       	ld	r24, Y
     b08:	99 81       	ldd	r25, Y+1	; 0x01
     b0a:	9b 83       	std	Y+3, r25	; 0x03
     b0c:	8a 83       	std	Y+2, r24	; 0x02
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	29 c0       	rjmp	.+82     	; 0xb64 <prvCopyDataToQueue+0xb0>
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	8e 81       	ldd	r24, Y+6	; 0x06
     b16:	9f 81       	ldd	r25, Y+7	; 0x07
     b18:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <memcpy>
     b1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	91 95       	neg	r25
     b22:	81 95       	neg	r24
     b24:	91 09       	sbc	r25, r1
     b26:	2e 81       	ldd	r18, Y+6	; 0x06
     b28:	3f 81       	ldd	r19, Y+7	; 0x07
     b2a:	28 0f       	add	r18, r24
     b2c:	39 1f       	adc	r19, r25
     b2e:	3f 83       	std	Y+7, r19	; 0x07
     b30:	2e 83       	std	Y+6, r18	; 0x06
     b32:	48 81       	ld	r20, Y
     b34:	59 81       	ldd	r21, Y+1	; 0x01
     b36:	24 17       	cp	r18, r20
     b38:	35 07       	cpc	r19, r21
     b3a:	30 f4       	brcc	.+12     	; 0xb48 <prvCopyDataToQueue+0x94>
     b3c:	2c 81       	ldd	r18, Y+4	; 0x04
     b3e:	3d 81       	ldd	r19, Y+5	; 0x05
     b40:	82 0f       	add	r24, r18
     b42:	93 1f       	adc	r25, r19
     b44:	9f 83       	std	Y+7, r25	; 0x07
     b46:	8e 83       	std	Y+6, r24	; 0x06
     b48:	02 30       	cpi	r16, 0x02	; 2
     b4a:	49 f4       	brne	.+18     	; 0xb5e <prvCopyDataToQueue+0xaa>
     b4c:	11 23       	and	r17, r17
     b4e:	49 f0       	breq	.+18     	; 0xb62 <prvCopyDataToQueue+0xae>
     b50:	11 50       	subi	r17, 0x01	; 1
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	07 c0       	rjmp	.+14     	; 0xb64 <prvCopyDataToQueue+0xb0>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <prvCopyDataToQueue+0xb0>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <prvCopyDataToQueue+0xb0>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <prvCopyDataToQueue+0xb0>
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	1f 5f       	subi	r17, 0xFF	; 255
     b66:	1a 8f       	std	Y+26, r17	; 0x1a
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	08 95       	ret

00000b72 <prvUnlockQueue>:
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	0f 92       	push	r0
     b80:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b82:	0b c0       	rjmp	.+22     	; 0xb9a <prvUnlockQueue+0x28>
     b84:	89 89       	ldd	r24, Y+17	; 0x11
     b86:	88 23       	and	r24, r24
     b88:	51 f0       	breq	.+20     	; 0xb9e <prvUnlockQueue+0x2c>
     b8a:	ce 01       	movw	r24, r28
     b8c:	41 96       	adiw	r24, 0x11	; 17
     b8e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskRemoveFromEventList>
     b92:	81 11       	cpse	r24, r1
     b94:	0e 94 31 0c 	call	0x1862	; 0x1862 <vTaskMissedYield>
     b98:	11 50       	subi	r17, 0x01	; 1
     b9a:	11 16       	cp	r1, r17
     b9c:	9c f3       	brlt	.-26     	; 0xb84 <prvUnlockQueue+0x12>
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	8e 8f       	std	Y+30, r24	; 0x1e
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	0f 92       	push	r0
     bac:	1d 8d       	ldd	r17, Y+29	; 0x1d
     bae:	0b c0       	rjmp	.+22     	; 0xbc6 <prvUnlockQueue+0x54>
     bb0:	88 85       	ldd	r24, Y+8	; 0x08
     bb2:	88 23       	and	r24, r24
     bb4:	51 f0       	breq	.+20     	; 0xbca <prvUnlockQueue+0x58>
     bb6:	ce 01       	movw	r24, r28
     bb8:	08 96       	adiw	r24, 0x08	; 8
     bba:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskRemoveFromEventList>
     bbe:	81 11       	cpse	r24, r1
     bc0:	0e 94 31 0c 	call	0x1862	; 0x1862 <vTaskMissedYield>
     bc4:	11 50       	subi	r17, 0x01	; 1
     bc6:	11 16       	cp	r1, r17
     bc8:	9c f3       	brlt	.-26     	; 0xbb0 <prvUnlockQueue+0x3e>
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	8d 8f       	std	Y+29, r24	; 0x1d
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	08 95       	ret

00000bda <xQueueGenericReset>:
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ec 01       	movw	r28, r24
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	0f 92       	push	r0
     be6:	e8 81       	ld	r30, Y
     be8:	f9 81       	ldd	r31, Y+1	; 0x01
     bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bec:	2c 8d       	ldd	r18, Y+28	; 0x1c
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	82 9f       	mul	r24, r18
     bf4:	a0 01       	movw	r20, r0
     bf6:	83 9f       	mul	r24, r19
     bf8:	50 0d       	add	r21, r0
     bfa:	92 9f       	mul	r25, r18
     bfc:	50 0d       	add	r21, r0
     bfe:	11 24       	eor	r1, r1
     c00:	4e 0f       	add	r20, r30
     c02:	5f 1f       	adc	r21, r31
     c04:	5d 83       	std	Y+5, r21	; 0x05
     c06:	4c 83       	std	Y+4, r20	; 0x04
     c08:	1a 8e       	std	Y+26, r1	; 0x1a
     c0a:	fb 83       	std	Y+3, r31	; 0x03
     c0c:	ea 83       	std	Y+2, r30	; 0x02
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	28 9f       	mul	r18, r24
     c12:	a0 01       	movw	r20, r0
     c14:	29 9f       	mul	r18, r25
     c16:	50 0d       	add	r21, r0
     c18:	38 9f       	mul	r19, r24
     c1a:	50 0d       	add	r21, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	cf 01       	movw	r24, r30
     c20:	84 0f       	add	r24, r20
     c22:	95 1f       	adc	r25, r21
     c24:	9f 83       	std	Y+7, r25	; 0x07
     c26:	8e 83       	std	Y+6, r24	; 0x06
     c28:	8f ef       	ldi	r24, 0xFF	; 255
     c2a:	8d 8f       	std	Y+29, r24	; 0x1d
     c2c:	8e 8f       	std	Y+30, r24	; 0x1e
     c2e:	61 11       	cpse	r22, r1
     c30:	0c c0       	rjmp	.+24     	; 0xc4a <xQueueGenericReset+0x70>
     c32:	88 85       	ldd	r24, Y+8	; 0x08
     c34:	88 23       	and	r24, r24
     c36:	89 f0       	breq	.+34     	; 0xc5a <xQueueGenericReset+0x80>
     c38:	ce 01       	movw	r24, r28
     c3a:	08 96       	adiw	r24, 0x08	; 8
     c3c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskRemoveFromEventList>
     c40:	88 23       	and	r24, r24
     c42:	59 f0       	breq	.+22     	; 0xc5a <xQueueGenericReset+0x80>
     c44:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
     c48:	08 c0       	rjmp	.+16     	; 0xc5a <xQueueGenericReset+0x80>
     c4a:	ce 01       	movw	r24, r28
     c4c:	08 96       	adiw	r24, 0x08	; 8
     c4e:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
     c52:	ce 01       	movw	r24, r28
     c54:	41 96       	adiw	r24, 0x11	; 17
     c56:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <prvInitialiseNewQueue>:
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	f8 01       	movw	r30, r16
     c6c:	61 11       	cpse	r22, r1
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <prvInitialiseNewQueue+0x10>
     c70:	11 83       	std	Z+1, r17	; 0x01
     c72:	00 83       	st	Z, r16
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <prvInitialiseNewQueue+0x14>
     c76:	51 83       	std	Z+1, r21	; 0x01
     c78:	40 83       	st	Z, r20
     c7a:	83 8f       	std	Z+27, r24	; 0x1b
     c7c:	64 8f       	std	Z+28, r22	; 0x1c
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	cf 01       	movw	r24, r30
     c82:	0e 94 ed 05 	call	0xbda	; 0xbda <xQueueGenericReset>
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	08 95       	ret

00000c8c <xQueueGenericCreate>:
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	f8 2e       	mov	r15, r24
     c9c:	e6 2e       	mov	r14, r22
     c9e:	d4 2e       	mov	r13, r20
     ca0:	86 9f       	mul	r24, r22
     ca2:	c0 01       	movw	r24, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	4f 96       	adiw	r24, 0x1f	; 31
     ca8:	0e 94 a9 01 	call	0x352	; 0x352 <pvPortMalloc>
     cac:	ec 01       	movw	r28, r24
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	49 f0       	breq	.+18     	; 0xcc4 <xQueueGenericCreate+0x38>
     cb2:	8c 01       	movw	r16, r24
     cb4:	2d 2d       	mov	r18, r13
     cb6:	ac 01       	movw	r20, r24
     cb8:	41 5e       	subi	r20, 0xE1	; 225
     cba:	5f 4f       	sbci	r21, 0xFF	; 255
     cbc:	6e 2d       	mov	r22, r14
     cbe:	8f 2d       	mov	r24, r15
     cc0:	0e 94 33 06 	call	0xc66	; 0xc66 <prvInitialiseNewQueue>
     cc4:	ce 01       	movw	r24, r28
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	08 95       	ret

00000cd6 <xQueueGenericSend>:
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <xQueueGenericSend+0x12>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <xQueueGenericSend+0x14>
     cea:	1f 92       	push	r1
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	8c 01       	movw	r16, r24
     cf2:	7b 01       	movw	r14, r22
     cf4:	5d 83       	std	Y+5, r21	; 0x05
     cf6:	4c 83       	std	Y+4, r20	; 0x04
     cf8:	c2 2e       	mov	r12, r18
     cfa:	d1 2c       	mov	r13, r1
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	0f 92       	push	r0
     d02:	f8 01       	movw	r30, r16
     d04:	92 8d       	ldd	r25, Z+26	; 0x1a
     d06:	83 8d       	ldd	r24, Z+27	; 0x1b
     d08:	98 17       	cp	r25, r24
     d0a:	18 f0       	brcs	.+6      	; 0xd12 <xQueueGenericSend+0x3c>
     d0c:	f2 e0       	ldi	r31, 0x02	; 2
     d0e:	cf 12       	cpse	r12, r31
     d10:	19 c0       	rjmp	.+50     	; 0xd44 <xQueueGenericSend+0x6e>
     d12:	4c 2d       	mov	r20, r12
     d14:	b7 01       	movw	r22, r14
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 5a 05 	call	0xab4	; 0xab4 <prvCopyDataToQueue>
     d1c:	f8 01       	movw	r30, r16
     d1e:	91 89       	ldd	r25, Z+17	; 0x11
     d20:	99 23       	and	r25, r25
     d22:	49 f0       	breq	.+18     	; 0xd36 <xQueueGenericSend+0x60>
     d24:	c8 01       	movw	r24, r16
     d26:	41 96       	adiw	r24, 0x11	; 17
     d28:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskRemoveFromEventList>
     d2c:	88 23       	and	r24, r24
     d2e:	31 f0       	breq	.+12     	; 0xd3c <xQueueGenericSend+0x66>
     d30:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <xQueueGenericSend+0x66>
     d36:	81 11       	cpse	r24, r1
     d38:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	4d c0       	rjmp	.+154    	; 0xdde <xQueueGenericSend+0x108>
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	9d 81       	ldd	r25, Y+5	; 0x05
     d48:	89 2b       	or	r24, r25
     d4a:	21 f4       	brne	.+8      	; 0xd54 <xQueueGenericSend+0x7e>
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	45 c0       	rjmp	.+138    	; 0xdde <xQueueGenericSend+0x108>
     d54:	d1 10       	cpse	r13, r1
     d56:	06 c0       	rjmp	.+12     	; 0xd64 <xQueueGenericSend+0x8e>
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <vTaskInternalSetTimeOutState>
     d60:	dd 24       	eor	r13, r13
     d62:	d3 94       	inc	r13
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0e 94 f6 09 	call	0x13ec	; 0x13ec <vTaskSuspendAll>
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	0f 92       	push	r0
     d72:	f8 01       	movw	r30, r16
     d74:	85 8d       	ldd	r24, Z+29	; 0x1d
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	09 f4       	brne	.+2      	; 0xd7c <xQueueGenericSend+0xa6>
     d7a:	15 8e       	std	Z+29, r1	; 0x1d
     d7c:	f8 01       	movw	r30, r16
     d7e:	86 8d       	ldd	r24, Z+30	; 0x1e
     d80:	8f 3f       	cpi	r24, 0xFF	; 255
     d82:	09 f4       	brne	.+2      	; 0xd86 <xQueueGenericSend+0xb0>
     d84:	16 8e       	std	Z+30, r1	; 0x1e
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	be 01       	movw	r22, r28
     d8c:	6c 5f       	subi	r22, 0xFC	; 252
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <xTaskCheckForTimeOut>
     d98:	81 11       	cpse	r24, r1
     d9a:	1b c0       	rjmp	.+54     	; 0xdd2 <xQueueGenericSend+0xfc>
     d9c:	c8 01       	movw	r24, r16
     d9e:	0e 94 4c 05 	call	0xa98	; 0xa98 <prvIsQueueFull>
     da2:	88 23       	and	r24, r24
     da4:	81 f0       	breq	.+32     	; 0xdc6 <xQueueGenericSend+0xf0>
     da6:	6c 81       	ldd	r22, Y+4	; 0x04
     da8:	7d 81       	ldd	r23, Y+5	; 0x05
     daa:	c8 01       	movw	r24, r16
     dac:	08 96       	adiw	r24, 0x08	; 8
     dae:	0e 94 9a 0b 	call	0x1734	; 0x1734 <vTaskPlaceOnEventList>
     db2:	c8 01       	movw	r24, r16
     db4:	0e 94 b9 05 	call	0xb72	; 0xb72 <prvUnlockQueue>
     db8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskResumeAll>
     dbc:	81 11       	cpse	r24, r1
     dbe:	9e cf       	rjmp	.-196    	; 0xcfc <xQueueGenericSend+0x26>
     dc0:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
     dc4:	9b cf       	rjmp	.-202    	; 0xcfc <xQueueGenericSend+0x26>
     dc6:	c8 01       	movw	r24, r16
     dc8:	0e 94 b9 05 	call	0xb72	; 0xb72 <prvUnlockQueue>
     dcc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskResumeAll>
     dd0:	95 cf       	rjmp	.-214    	; 0xcfc <xQueueGenericSend+0x26>
     dd2:	c8 01       	movw	r24, r16
     dd4:	0e 94 b9 05 	call	0xb72	; 0xb72 <prvUnlockQueue>
     dd8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskResumeAll>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	ff 90       	pop	r15
     df2:	ef 90       	pop	r14
     df4:	df 90       	pop	r13
     df6:	cf 90       	pop	r12
     df8:	08 95       	ret

00000dfa <prvInitialiseMutex>:
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f0       	breq	.+26     	; 0xe18 <prvInitialiseMutex+0x1e>
     dfe:	fc 01       	movw	r30, r24
     e00:	15 82       	std	Z+5, r1	; 0x05
     e02:	14 82       	std	Z+4, r1	; 0x04
     e04:	11 82       	std	Z+1, r1	; 0x01
     e06:	10 82       	st	Z, r1
     e08:	16 82       	std	Z+6, r1	; 0x06
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <xQueueGenericSend>
     e18:	08 95       	ret

00000e1a <xQueueCreateMutex>:
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	48 2f       	mov	r20, r24
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 46 06 	call	0xc8c	; 0xc8c <xQueueGenericCreate>
     e28:	ec 01       	movw	r28, r24
     e2a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <prvInitialiseMutex>
     e2e:	ce 01       	movw	r24, r28
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	00 d0       	rcall	.+0      	; 0xe44 <xQueueSemaphoreTake+0xe>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <xQueueSemaphoreTake+0x10>
     e46:	1f 92       	push	r1
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	8c 01       	movw	r16, r24
     e4e:	7d 83       	std	Y+5, r23	; 0x05
     e50:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     e52:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     e54:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     e5c:	f8 01       	movw	r30, r16
     e5e:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     e60:	88 23       	and	r24, r24
     e62:	d1 f0       	breq	.+52     	; 0xe98 <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     e64:	81 50       	subi	r24, 0x01	; 1
     e66:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	89 2b       	or	r24, r25
     e6e:	29 f4       	brne	.+10     	; 0xe7a <xQueueSemaphoreTake+0x44>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     e70:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <pvTaskIncrementMutexHeldCount>
     e74:	f8 01       	movw	r30, r16
     e76:	95 83       	std	Z+5, r25	; 0x05
     e78:	84 83       	std	Z+4, r24	; 0x04
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e7a:	f8 01       	movw	r30, r16
     e7c:	80 85       	ldd	r24, Z+8	; 0x08
     e7e:	88 23       	and	r24, r24
     e80:	39 f0       	breq	.+14     	; 0xe90 <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     e82:	c8 01       	movw	r24, r16
     e84:	08 96       	adiw	r24, 0x08	; 8
     e86:	0e 94 ac 0b 	call	0x1758	; 0x1758 <xTaskRemoveFromEventList>
     e8a:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     e8c:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	74 c0       	rjmp	.+232    	; 0xf80 <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	9d 81       	ldd	r25, Y+5	; 0x05
     e9c:	89 2b       	or	r24, r25
     e9e:	21 f4       	brne	.+8      	; 0xea8 <xQueueSemaphoreTake+0x72>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     ea0:	0f 90       	pop	r0
     ea2:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	6c c0       	rjmp	.+216    	; 0xf80 <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     ea8:	f1 10       	cpse	r15, r1
     eaa:	06 c0       	rjmp	.+12     	; 0xeb8 <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     eb4:	ff 24       	eor	r15, r15
     eb6:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     ebc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	0f 92       	push	r0
     ec6:	f8 01       	movw	r30, r16
     ec8:	85 8d       	ldd	r24, Z+29	; 0x1d
     eca:	8f 3f       	cpi	r24, 0xFF	; 255
     ecc:	09 f4       	brne	.+2      	; 0xed0 <xQueueSemaphoreTake+0x9a>
     ece:	15 8e       	std	Z+29, r1	; 0x1d
     ed0:	f8 01       	movw	r30, r16
     ed2:	86 8d       	ldd	r24, Z+30	; 0x1e
     ed4:	8f 3f       	cpi	r24, 0xFF	; 255
     ed6:	09 f4       	brne	.+2      	; 0xeda <xQueueSemaphoreTake+0xa4>
     ed8:	16 8e       	std	Z+30, r1	; 0x1e
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     ede:	be 01       	movw	r22, r28
     ee0:	6c 5f       	subi	r22, 0xFC	; 252
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <xTaskCheckForTimeOut>
     eec:	81 11       	cpse	r24, r1
     eee:	2a c0       	rjmp	.+84     	; 0xf44 <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     ef0:	c8 01       	movw	r24, r16
     ef2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <prvIsQueueEmpty>
     ef6:	88 23       	and	r24, r24
     ef8:	f9 f0       	breq	.+62     	; 0xf38 <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     efa:	f8 01       	movw	r30, r16
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	89 2b       	or	r24, r25
     f02:	51 f4       	brne	.+20     	; 0xf18 <xQueueSemaphoreTake+0xe2>
                        {
                            taskENTER_CRITICAL();
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	0f 92       	push	r0
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     f0a:	84 81       	ldd	r24, Z+4	; 0x04
     f0c:	95 81       	ldd	r25, Z+5	; 0x05
     f0e:	0e 94 35 0c 	call	0x186a	; 0x186a <xTaskPriorityInherit>
     f12:	e8 2e       	mov	r14, r24
                            }
                            taskEXIT_CRITICAL();
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     f18:	6c 81       	ldd	r22, Y+4	; 0x04
     f1a:	7d 81       	ldd	r23, Y+5	; 0x05
     f1c:	c8 01       	movw	r24, r16
     f1e:	41 96       	adiw	r24, 0x11	; 17
     f20:	0e 94 9a 0b 	call	0x1734	; 0x1734 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 b9 05 	call	0xb72	; 0xb72 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     f2a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskResumeAll>
     f2e:	81 11       	cpse	r24, r1
     f30:	92 cf       	rjmp	.-220    	; 0xe56 <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     f32:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
     f36:	8f cf       	rjmp	.-226    	; 0xe56 <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 b9 05 	call	0xb72	; 0xb72 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     f3e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskResumeAll>
     f42:	89 cf       	rjmp	.-238    	; 0xe56 <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     f44:	c8 01       	movw	r24, r16
     f46:	0e 94 b9 05 	call	0xb72	; 0xb72 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     f4a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 3f 05 	call	0xa7e	; 0xa7e <prvIsQueueEmpty>
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <xQueueSemaphoreTake+0x124>
     f58:	7e cf       	rjmp	.-260    	; 0xe56 <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
     f5a:	ee 20       	and	r14, r14
     f5c:	81 f0       	breq	.+32     	; 0xf7e <xQueueSemaphoreTake+0x148>
                        {
                            taskENTER_CRITICAL();
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	0f 92       	push	r0
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     f64:	c8 01       	movw	r24, r16
     f66:	0e 94 2f 05 	call	0xa5e	; 0xa5e <prvGetDisinheritPriorityAfterTimeout>
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     f6a:	68 2f       	mov	r22, r24
     f6c:	f8 01       	movw	r30, r16
     f6e:	84 81       	ldd	r24, Z+4	; 0x04
     f70:	95 81       	ldd	r25, Z+5	; 0x05
     f72:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <xQueueSemaphoreTake+0x14a>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	08 95       	ret

00000f98 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     f98:	e0 91 93 06 	lds	r30, 0x0693	; 0x800693 <pxDelayedTaskList>
     f9c:	f0 91 94 06 	lds	r31, 0x0694	; 0x800694 <pxDelayedTaskList+0x1>
     fa0:	80 81       	ld	r24, Z
     fa2:	81 11       	cpse	r24, r1
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <prvResetNextTaskUnblockTime+0x1c>
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <xNextTaskUnblockTime+0x1>
     fae:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <xNextTaskUnblockTime>
     fb2:	08 95       	ret
     fb4:	e0 91 93 06 	lds	r30, 0x0693	; 0x800693 <pxDelayedTaskList>
     fb8:	f0 91 94 06 	lds	r31, 0x0694	; 0x800694 <pxDelayedTaskList+0x1>
     fbc:	05 80       	ldd	r0, Z+5	; 0x05
     fbe:	f6 81       	ldd	r31, Z+6	; 0x06
     fc0:	e0 2d       	mov	r30, r0
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <xNextTaskUnblockTime+0x1>
     fca:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <xNextTaskUnblockTime>
     fce:	08 95       	ret

00000fd0 <prvDeleteTCB>:
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	ec 01       	movw	r28, r24
     fd6:	8f 89       	ldd	r24, Y+23	; 0x17
     fd8:	98 8d       	ldd	r25, Y+24	; 0x18
     fda:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vPortFree>
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vPortFree>
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <prvInitialiseNewTask>:
     fea:	6f 92       	push	r6
     fec:	7f 92       	push	r7
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	4c 01       	movw	r8, r24
    100a:	d5 01       	movw	r26, r10
    100c:	57 96       	adiw	r26, 0x17	; 23
    100e:	8d 91       	ld	r24, X+
    1010:	9c 91       	ld	r25, X
    1012:	58 97       	sbiw	r26, 0x18	; 24
    1014:	21 50       	subi	r18, 0x01	; 1
    1016:	31 09       	sbc	r19, r1
    1018:	3c 01       	movw	r6, r24
    101a:	62 0e       	add	r6, r18
    101c:	73 1e       	adc	r7, r19
    101e:	61 15       	cp	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	89 f4       	brne	.+34     	; 0x1046 <prvInitialiseNewTask+0x5c>
    1024:	16 c0       	rjmp	.+44     	; 0x1052 <prvInitialiseNewTask+0x68>
    1026:	82 2f       	mov	r24, r18
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	fb 01       	movw	r30, r22
    102c:	e8 0f       	add	r30, r24
    102e:	f9 1f       	adc	r31, r25
    1030:	30 81       	ld	r19, Z
    1032:	d5 01       	movw	r26, r10
    1034:	a8 0f       	add	r26, r24
    1036:	b9 1f       	adc	r27, r25
    1038:	59 96       	adiw	r26, 0x19	; 25
    103a:	3c 93       	st	X, r19
    103c:	80 81       	ld	r24, Z
    103e:	88 23       	and	r24, r24
    1040:	29 f0       	breq	.+10     	; 0x104c <prvInitialiseNewTask+0x62>
    1042:	2f 5f       	subi	r18, 0xFF	; 255
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <prvInitialiseNewTask+0x5e>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	28 30       	cpi	r18, 0x08	; 8
    104a:	68 f3       	brcs	.-38     	; 0x1026 <prvInitialiseNewTask+0x3c>
    104c:	f5 01       	movw	r30, r10
    104e:	10 a2       	std	Z+32, r1	; 0x20
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <prvInitialiseNewTask+0x6e>
    1052:	d5 01       	movw	r26, r10
    1054:	59 96       	adiw	r26, 0x19	; 25
    1056:	1c 92       	st	X, r1
    1058:	b4 e0       	ldi	r27, 0x04	; 4
    105a:	be 15       	cp	r27, r14
    105c:	18 f4       	brcc	.+6      	; 0x1064 <prvInitialiseNewTask+0x7a>
    105e:	68 94       	set
    1060:	ee 24       	eor	r14, r14
    1062:	e2 f8       	bld	r14, 2
    1064:	f5 01       	movw	r30, r10
    1066:	e6 8a       	std	Z+22, r14	; 0x16
    1068:	e1 a2       	std	Z+33, r14	; 0x21
    106a:	12 a2       	std	Z+34, r1	; 0x22
    106c:	c5 01       	movw	r24, r10
    106e:	02 96       	adiw	r24, 0x02	; 2
    1070:	0e 94 cf 02 	call	0x59e	; 0x59e <vListInitialiseItem>
    1074:	c5 01       	movw	r24, r10
    1076:	0c 96       	adiw	r24, 0x0c	; 12
    1078:	0e 94 cf 02 	call	0x59e	; 0x59e <vListInitialiseItem>
    107c:	d5 01       	movw	r26, r10
    107e:	19 96       	adiw	r26, 0x09	; 9
    1080:	bc 92       	st	X, r11
    1082:	ae 92       	st	-X, r10
    1084:	18 97       	sbiw	r26, 0x08	; 8
    1086:	85 e0       	ldi	r24, 0x05	; 5
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	8e 19       	sub	r24, r14
    108c:	91 09       	sbc	r25, r1
    108e:	1d 96       	adiw	r26, 0x0d	; 13
    1090:	9c 93       	st	X, r25
    1092:	8e 93       	st	-X, r24
    1094:	1c 97       	sbiw	r26, 0x0c	; 12
    1096:	53 96       	adiw	r26, 0x13	; 19
    1098:	bc 92       	st	X, r11
    109a:	ae 92       	st	-X, r10
    109c:	52 97       	sbiw	r26, 0x12	; 18
    109e:	84 e0       	ldi	r24, 0x04	; 4
    10a0:	f5 01       	movw	r30, r10
    10a2:	b3 96       	adiw	r30, 0x23	; 35
    10a4:	df 01       	movw	r26, r30
    10a6:	1d 92       	st	X+, r1
    10a8:	8a 95       	dec	r24
    10aa:	e9 f7       	brne	.-6      	; 0x10a6 <prvInitialiseNewTask+0xbc>
    10ac:	f5 01       	movw	r30, r10
    10ae:	17 a2       	std	Z+39, r1	; 0x27
    10b0:	a8 01       	movw	r20, r16
    10b2:	b4 01       	movw	r22, r8
    10b4:	c3 01       	movw	r24, r6
    10b6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <pxPortInitialiseStack>
    10ba:	d5 01       	movw	r26, r10
    10bc:	8d 93       	st	X+, r24
    10be:	9c 93       	st	X, r25
    10c0:	c1 14       	cp	r12, r1
    10c2:	d1 04       	cpc	r13, r1
    10c4:	19 f0       	breq	.+6      	; 0x10cc <prvInitialiseNewTask+0xe2>
    10c6:	f6 01       	movw	r30, r12
    10c8:	b1 82       	std	Z+1, r11	; 0x01
    10ca:	a0 82       	st	Z, r10
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	cf 90       	pop	r12
    10da:	bf 90       	pop	r11
    10dc:	af 90       	pop	r10
    10de:	9f 90       	pop	r9
    10e0:	8f 90       	pop	r8
    10e2:	7f 90       	pop	r7
    10e4:	6f 90       	pop	r6
    10e6:	08 95       	ret

000010e8 <prvInitialiseTaskLists>:
    10e8:	cf 93       	push	r28
    10ea:	c0 e0       	ldi	r28, 0x00	; 0
    10ec:	10 c0       	rjmp	.+32     	; 0x110e <prvInitialiseTaskLists+0x26>
    10ee:	8c 2f       	mov	r24, r28
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9c 01       	movw	r18, r24
    10f4:	22 0f       	add	r18, r18
    10f6:	33 1f       	adc	r19, r19
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	82 0f       	add	r24, r18
    1102:	93 1f       	adc	r25, r19
    1104:	89 55       	subi	r24, 0x59	; 89
    1106:	99 4f       	sbci	r25, 0xF9	; 249
    1108:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
    110c:	cf 5f       	subi	r28, 0xFF	; 255
    110e:	c5 30       	cpi	r28, 0x05	; 5
    1110:	70 f3       	brcs	.-36     	; 0x10ee <prvInitialiseTaskLists+0x6>
    1112:	8e e9       	ldi	r24, 0x9E	; 158
    1114:	96 e0       	ldi	r25, 0x06	; 6
    1116:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
    111a:	85 e9       	ldi	r24, 0x95	; 149
    111c:	96 e0       	ldi	r25, 0x06	; 6
    111e:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
    1122:	88 e8       	ldi	r24, 0x88	; 136
    1124:	96 e0       	ldi	r25, 0x06	; 6
    1126:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
    112a:	8f e7       	ldi	r24, 0x7F	; 127
    112c:	96 e0       	ldi	r25, 0x06	; 6
    112e:	0e 94 c1 02 	call	0x582	; 0x582 <vListInitialise>
    1132:	8e e9       	ldi	r24, 0x9E	; 158
    1134:	96 e0       	ldi	r25, 0x06	; 6
    1136:	90 93 94 06 	sts	0x0694, r25	; 0x800694 <pxDelayedTaskList+0x1>
    113a:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <pxDelayedTaskList>
    113e:	85 e9       	ldi	r24, 0x95	; 149
    1140:	96 e0       	ldi	r25, 0x06	; 6
    1142:	90 93 92 06 	sts	0x0692, r25	; 0x800692 <pxOverflowDelayedTaskList+0x1>
    1146:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <pxOverflowDelayedTaskList>
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <prvAddNewTaskToReadyList>:
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	ec 01       	movw	r28, r24
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	0f 92       	push	r0
    115a:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <uxCurrentNumberOfTasks>
    1164:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1168:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    116c:	89 2b       	or	r24, r25
    116e:	59 f4       	brne	.+22     	; 0x1186 <prvAddNewTaskToReadyList+0x38>
    1170:	d0 93 d5 06 	sts	0x06D5, r29	; 0x8006d5 <pxCurrentTCB+0x1>
    1174:	c0 93 d4 06 	sts	0x06D4, r28	; 0x8006d4 <pxCurrentTCB>
    1178:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	99 f4       	brne	.+38     	; 0x11a6 <prvAddNewTaskToReadyList+0x58>
    1180:	0e 94 74 08 	call	0x10e8	; 0x10e8 <prvInitialiseTaskLists>
    1184:	10 c0       	rjmp	.+32     	; 0x11a6 <prvAddNewTaskToReadyList+0x58>
    1186:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xSchedulerRunning>
    118a:	81 11       	cpse	r24, r1
    118c:	0c c0       	rjmp	.+24     	; 0x11a6 <prvAddNewTaskToReadyList+0x58>
    118e:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1192:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1196:	96 89       	ldd	r25, Z+22	; 0x16
    1198:	8e 89       	ldd	r24, Y+22	; 0x16
    119a:	89 17       	cp	r24, r25
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <prvAddNewTaskToReadyList+0x58>
    119e:	d0 93 d5 06 	sts	0x06D5, r29	; 0x8006d5 <pxCurrentTCB+0x1>
    11a2:	c0 93 d4 06 	sts	0x06D4, r28	; 0x8006d4 <pxCurrentTCB>
    11a6:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <uxTaskNumber>
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTaskNumber>
    11b0:	8e 89       	ldd	r24, Y+22	; 0x16
    11b2:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <uxTopReadyPriority>
    11b6:	98 17       	cp	r25, r24
    11b8:	10 f4       	brcc	.+4      	; 0x11be <prvAddNewTaskToReadyList+0x70>
    11ba:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxTopReadyPriority>
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9c 01       	movw	r18, r24
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	22 0f       	add	r18, r18
    11c8:	33 1f       	adc	r19, r19
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	be 01       	movw	r22, r28
    11d4:	6e 5f       	subi	r22, 0xFE	; 254
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	89 55       	subi	r24, 0x59	; 89
    11da:	99 4f       	sbci	r25, 0xF9	; 249
    11dc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xSchedulerRunning>
    11e8:	88 23       	and	r24, r24
    11ea:	51 f0       	breq	.+20     	; 0x1200 <prvAddNewTaskToReadyList+0xb2>
    11ec:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    11f0:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    11f4:	96 89       	ldd	r25, Z+22	; 0x16
    11f6:	8e 89       	ldd	r24, Y+22	; 0x16
    11f8:	98 17       	cp	r25, r24
    11fa:	10 f4       	brcc	.+4      	; 0x1200 <prvAddNewTaskToReadyList+0xb2>
    11fc:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <prvCheckTasksWaitingTermination>:
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	1c c0       	rjmp	.+56     	; 0x1244 <prvCheckTasksWaitingTermination+0x3e>
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	0f 92       	push	r0
    1212:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <xTasksWaitingTermination+0x5>
    1216:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <xTasksWaitingTermination+0x6>
    121a:	c6 81       	ldd	r28, Z+6	; 0x06
    121c:	d7 81       	ldd	r29, Z+7	; 0x07
    121e:	ce 01       	movw	r24, r28
    1220:	02 96       	adiw	r24, 0x02	; 2
    1222:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    1226:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
    122a:	81 50       	subi	r24, 0x01	; 1
    122c:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <uxCurrentNumberOfTasks>
    1230:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <uxDeletedTasksWaitingCleanUp>
    1234:	81 50       	subi	r24, 0x01	; 1
    1236:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <uxDeletedTasksWaitingCleanUp>
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <prvDeleteTCB>
    1244:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <uxDeletedTasksWaitingCleanUp>
    1248:	81 11       	cpse	r24, r1
    124a:	e0 cf       	rjmp	.-64     	; 0x120c <prvCheckTasksWaitingTermination+0x6>
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	08 95       	ret

00001252 <prvIdleTask>:
    1252:	0e 94 03 09 	call	0x1206	; 0x1206 <prvCheckTasksWaitingTermination>
    1256:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxReadyTasksLists>
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	d0 f3       	brcs	.-12     	; 0x1252 <prvIdleTask>
    125e:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
    1262:	f7 cf       	rjmp	.-18     	; 0x1252 <prvIdleTask>

00001264 <prvAddCurrentTaskToDelayedList>:
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	ec 01       	movw	r28, r24
    126e:	00 91 7b 06 	lds	r16, 0x067B	; 0x80067b <xTickCount>
    1272:	10 91 7c 06 	lds	r17, 0x067C	; 0x80067c <xTickCount+0x1>
    1276:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    127a:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    127e:	02 96       	adiw	r24, 0x02	; 2
    1280:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    1284:	c0 0f       	add	r28, r16
    1286:	d1 1f       	adc	r29, r17
    1288:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    128c:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1290:	d3 83       	std	Z+3, r29	; 0x03
    1292:	c2 83       	std	Z+2, r28	; 0x02
    1294:	c0 17       	cp	r28, r16
    1296:	d1 07       	cpc	r29, r17
    1298:	68 f4       	brcc	.+26     	; 0x12b4 <prvAddCurrentTaskToDelayedList+0x50>
    129a:	60 91 d4 06 	lds	r22, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    129e:	70 91 d5 06 	lds	r23, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    12a2:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <pxOverflowDelayedTaskList>
    12a6:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <pxOverflowDelayedTaskList+0x1>
    12aa:	6e 5f       	subi	r22, 0xFE	; 254
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInsert>
    12b2:	17 c0       	rjmp	.+46     	; 0x12e2 <prvAddCurrentTaskToDelayedList+0x7e>
    12b4:	60 91 d4 06 	lds	r22, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    12b8:	70 91 d5 06 	lds	r23, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    12bc:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <pxDelayedTaskList>
    12c0:	90 91 94 06 	lds	r25, 0x0694	; 0x800694 <pxDelayedTaskList+0x1>
    12c4:	6e 5f       	subi	r22, 0xFE	; 254
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInsert>
    12cc:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <xNextTaskUnblockTime>
    12d0:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <xNextTaskUnblockTime+0x1>
    12d4:	c8 17       	cp	r28, r24
    12d6:	d9 07       	cpc	r29, r25
    12d8:	20 f4       	brcc	.+8      	; 0x12e2 <prvAddCurrentTaskToDelayedList+0x7e>
    12da:	d0 93 73 06 	sts	0x0673, r29	; 0x800673 <xNextTaskUnblockTime+0x1>
    12de:	c0 93 72 06 	sts	0x0672, r28	; 0x800672 <xNextTaskUnblockTime>
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <xTaskCreate>:
    12ec:	2f 92       	push	r2
    12ee:	3f 92       	push	r3
    12f0:	4f 92       	push	r4
    12f2:	5f 92       	push	r5
    12f4:	6f 92       	push	r6
    12f6:	7f 92       	push	r7
    12f8:	8f 92       	push	r8
    12fa:	9f 92       	push	r9
    12fc:	af 92       	push	r10
    12fe:	bf 92       	push	r11
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	3c 01       	movw	r6, r24
    1312:	1b 01       	movw	r2, r22
    1314:	5a 01       	movw	r10, r20
    1316:	29 01       	movw	r4, r18
    1318:	ca 01       	movw	r24, r20
    131a:	0e 94 a9 01 	call	0x352	; 0x352 <pvPortMalloc>
    131e:	6c 01       	movw	r12, r24
    1320:	89 2b       	or	r24, r25
    1322:	71 f0       	breq	.+28     	; 0x1340 <xTaskCreate+0x54>
    1324:	88 e2       	ldi	r24, 0x28	; 40
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 a9 01 	call	0x352	; 0x352 <pvPortMalloc>
    132c:	ec 01       	movw	r28, r24
    132e:	89 2b       	or	r24, r25
    1330:	19 f0       	breq	.+6      	; 0x1338 <xTaskCreate+0x4c>
    1332:	d8 8e       	std	Y+24, r13	; 0x18
    1334:	cf 8a       	std	Y+23, r12	; 0x17
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <xTaskCreate+0x58>
    1338:	c6 01       	movw	r24, r12
    133a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vPortFree>
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <xTaskCreate+0x58>
    1340:	c0 e0       	ldi	r28, 0x00	; 0
    1342:	d0 e0       	ldi	r29, 0x00	; 0
    1344:	20 97       	sbiw	r28, 0x00	; 0
    1346:	91 f0       	breq	.+36     	; 0x136c <xTaskCreate+0x80>
    1348:	95 01       	movw	r18, r10
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	81 2c       	mov	r8, r1
    1350:	91 2c       	mov	r9, r1
    1352:	5e 01       	movw	r10, r28
    1354:	67 01       	movw	r12, r14
    1356:	e0 2e       	mov	r14, r16
    1358:	82 01       	movw	r16, r4
    135a:	b1 01       	movw	r22, r2
    135c:	c3 01       	movw	r24, r6
    135e:	0e 94 f5 07 	call	0xfea	; 0xfea <prvInitialiseNewTask>
    1362:	ce 01       	movw	r24, r28
    1364:	0e 94 a7 08 	call	0x114e	; 0x114e <prvAddNewTaskToReadyList>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	01 c0       	rjmp	.+2      	; 0x136e <xTaskCreate+0x82>
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	bf 90       	pop	r11
    1380:	af 90       	pop	r10
    1382:	9f 90       	pop	r9
    1384:	8f 90       	pop	r8
    1386:	7f 90       	pop	r7
    1388:	6f 90       	pop	r6
    138a:	5f 90       	pop	r5
    138c:	4f 90       	pop	r4
    138e:	3f 90       	pop	r3
    1390:	2f 90       	pop	r2
    1392:	08 95       	ret

00001394 <vTaskStartScheduler>:
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	0f 2e       	mov	r0, r31
    139c:	f0 e7       	ldi	r31, 0x70	; 112
    139e:	ef 2e       	mov	r14, r31
    13a0:	f6 e0       	ldi	r31, 0x06	; 6
    13a2:	ff 2e       	mov	r15, r31
    13a4:	f0 2d       	mov	r31, r0
    13a6:	00 e0       	ldi	r16, 0x00	; 0
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	45 e5       	ldi	r20, 0x55	; 85
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	63 e8       	ldi	r22, 0x83	; 131
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	89 e2       	ldi	r24, 0x29	; 41
    13b6:	99 e0       	ldi	r25, 0x09	; 9
    13b8:	0e 94 76 09 	call	0x12ec	; 0x12ec <xTaskCreate>
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	81 f4       	brne	.+32     	; 0x13e0 <vTaskStartScheduler+0x4c>
    13c0:	f8 94       	cli
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	9f ef       	ldi	r25, 0xFF	; 255
    13c6:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <xNextTaskUnblockTime+0x1>
    13ca:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <xNextTaskUnblockTime>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xSchedulerRunning>
    13d4:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <xTickCount+0x1>
    13d8:	10 92 7b 06 	sts	0x067B, r1	; 0x80067b <xTickCount>
    13dc:	0e 94 48 04 	call	0x890	; 0x890 <xPortStartScheduler>
    13e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	08 95       	ret

000013ec <vTaskSuspendAll>:
    13ec:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxSchedulerSuspended>
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <uxSchedulerSuspended>
    13f6:	08 95       	ret

000013f8 <xTaskIncrementTick>:
    13f8:	df 92       	push	r13
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxSchedulerSuspended>
    140a:	81 11       	cpse	r24, r1
    140c:	9d c0       	rjmp	.+314    	; 0x1548 <xTaskIncrementTick+0x150>
    140e:	e0 90 7b 06 	lds	r14, 0x067B	; 0x80067b <xTickCount>
    1412:	f0 90 7c 06 	lds	r15, 0x067C	; 0x80067c <xTickCount+0x1>
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	e8 1a       	sub	r14, r24
    141a:	f8 0a       	sbc	r15, r24
    141c:	f0 92 7c 06 	sts	0x067C, r15	; 0x80067c <xTickCount+0x1>
    1420:	e0 92 7b 06 	sts	0x067B, r14	; 0x80067b <xTickCount>
    1424:	e1 14       	cp	r14, r1
    1426:	f1 04       	cpc	r15, r1
    1428:	b9 f4       	brne	.+46     	; 0x1458 <xTaskIncrementTick+0x60>
    142a:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <pxDelayedTaskList>
    142e:	90 91 94 06 	lds	r25, 0x0694	; 0x800694 <pxDelayedTaskList+0x1>
    1432:	20 91 91 06 	lds	r18, 0x0691	; 0x800691 <pxOverflowDelayedTaskList>
    1436:	30 91 92 06 	lds	r19, 0x0692	; 0x800692 <pxOverflowDelayedTaskList+0x1>
    143a:	30 93 94 06 	sts	0x0694, r19	; 0x800694 <pxDelayedTaskList+0x1>
    143e:	20 93 93 06 	sts	0x0693, r18	; 0x800693 <pxDelayedTaskList>
    1442:	90 93 92 06 	sts	0x0692, r25	; 0x800692 <pxOverflowDelayedTaskList+0x1>
    1446:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <pxOverflowDelayedTaskList>
    144a:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <xNumOfOverflows>
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <xNumOfOverflows>
    1454:	0e 94 cc 07 	call	0xf98	; 0xf98 <prvResetNextTaskUnblockTime>
    1458:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <xNextTaskUnblockTime>
    145c:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <xNextTaskUnblockTime+0x1>
    1460:	e8 16       	cp	r14, r24
    1462:	f9 06       	cpc	r15, r25
    1464:	28 f4       	brcc	.+10     	; 0x1470 <xTaskIncrementTick+0x78>
    1466:	d1 2c       	mov	r13, r1
    1468:	53 c0       	rjmp	.+166    	; 0x1510 <xTaskIncrementTick+0x118>
    146a:	dd 24       	eor	r13, r13
    146c:	d3 94       	inc	r13
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <xTaskIncrementTick+0x7a>
    1470:	d1 2c       	mov	r13, r1
    1472:	e0 91 93 06 	lds	r30, 0x0693	; 0x800693 <pxDelayedTaskList>
    1476:	f0 91 94 06 	lds	r31, 0x0694	; 0x800694 <pxDelayedTaskList+0x1>
    147a:	80 81       	ld	r24, Z
    147c:	81 11       	cpse	r24, r1
    147e:	07 c0       	rjmp	.+14     	; 0x148e <xTaskIncrementTick+0x96>
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	9f ef       	ldi	r25, 0xFF	; 255
    1484:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <xNextTaskUnblockTime+0x1>
    1488:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <xNextTaskUnblockTime>
    148c:	41 c0       	rjmp	.+130    	; 0x1510 <xTaskIncrementTick+0x118>
    148e:	e0 91 93 06 	lds	r30, 0x0693	; 0x800693 <pxDelayedTaskList>
    1492:	f0 91 94 06 	lds	r31, 0x0694	; 0x800694 <pxDelayedTaskList+0x1>
    1496:	05 80       	ldd	r0, Z+5	; 0x05
    1498:	f6 81       	ldd	r31, Z+6	; 0x06
    149a:	e0 2d       	mov	r30, r0
    149c:	c6 81       	ldd	r28, Z+6	; 0x06
    149e:	d7 81       	ldd	r29, Z+7	; 0x07
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	e8 16       	cp	r14, r24
    14a6:	f9 06       	cpc	r15, r25
    14a8:	28 f4       	brcc	.+10     	; 0x14b4 <xTaskIncrementTick+0xbc>
    14aa:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <xNextTaskUnblockTime+0x1>
    14ae:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <xNextTaskUnblockTime>
    14b2:	2e c0       	rjmp	.+92     	; 0x1510 <xTaskIncrementTick+0x118>
    14b4:	8e 01       	movw	r16, r28
    14b6:	0e 5f       	subi	r16, 0xFE	; 254
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	c8 01       	movw	r24, r16
    14bc:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    14c0:	8c 89       	ldd	r24, Y+20	; 0x14
    14c2:	9d 89       	ldd	r25, Y+21	; 0x15
    14c4:	89 2b       	or	r24, r25
    14c6:	21 f0       	breq	.+8      	; 0x14d0 <xTaskIncrementTick+0xd8>
    14c8:	ce 01       	movw	r24, r28
    14ca:	0c 96       	adiw	r24, 0x0c	; 12
    14cc:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    14d0:	8e 89       	ldd	r24, Y+22	; 0x16
    14d2:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <uxTopReadyPriority>
    14d6:	98 17       	cp	r25, r24
    14d8:	10 f4       	brcc	.+4      	; 0x14de <xTaskIncrementTick+0xe6>
    14da:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxTopReadyPriority>
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9c 01       	movw	r18, r24
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	22 0f       	add	r18, r18
    14e8:	33 1f       	adc	r19, r19
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	82 0f       	add	r24, r18
    14f0:	93 1f       	adc	r25, r19
    14f2:	b8 01       	movw	r22, r16
    14f4:	89 55       	subi	r24, 0x59	; 89
    14f6:	99 4f       	sbci	r25, 0xF9	; 249
    14f8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    14fc:	9e 89       	ldd	r25, Y+22	; 0x16
    14fe:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1502:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1506:	86 89       	ldd	r24, Z+22	; 0x16
    1508:	98 17       	cp	r25, r24
    150a:	08 f0       	brcs	.+2      	; 0x150e <xTaskIncrementTick+0x116>
    150c:	ae cf       	rjmp	.-164    	; 0x146a <xTaskIncrementTick+0x72>
    150e:	b1 cf       	rjmp	.-158    	; 0x1472 <xTaskIncrementTick+0x7a>
    1510:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1514:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1518:	86 89       	ldd	r24, Z+22	; 0x16
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	fc 01       	movw	r30, r24
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	ee 0f       	add	r30, r30
    1528:	ff 1f       	adc	r31, r31
    152a:	8e 0f       	add	r24, r30
    152c:	9f 1f       	adc	r25, r31
    152e:	fc 01       	movw	r30, r24
    1530:	e9 55       	subi	r30, 0x59	; 89
    1532:	f9 4f       	sbci	r31, 0xF9	; 249
    1534:	80 81       	ld	r24, Z
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	10 f0       	brcs	.+4      	; 0x153e <xTaskIncrementTick+0x146>
    153a:	dd 24       	eor	r13, r13
    153c:	d3 94       	inc	r13
    153e:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <xYieldPending>
    1542:	81 11       	cpse	r24, r1
    1544:	0c c0       	rjmp	.+24     	; 0x155e <xTaskIncrementTick+0x166>
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <xTaskIncrementTick+0x16a>
    1548:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xPendedTicks>
    154c:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <xPendedTicks+0x1>
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	90 93 78 06 	sts	0x0678, r25	; 0x800678 <xPendedTicks+0x1>
    1556:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <xPendedTicks>
    155a:	d1 2c       	mov	r13, r1
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <xTaskIncrementTick+0x16a>
    155e:	dd 24       	eor	r13, r13
    1560:	d3 94       	inc	r13
    1562:	8d 2d       	mov	r24, r13
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	08 95       	ret

00001574 <xTaskResumeAll>:
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	0f 92       	push	r0
    1582:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxSchedulerSuspended>
    1586:	81 50       	subi	r24, 0x01	; 1
    1588:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <uxSchedulerSuspended>
    158c:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxSchedulerSuspended>
    1590:	81 11       	cpse	r24, r1
    1592:	5c c0       	rjmp	.+184    	; 0x164c <xTaskResumeAll+0xd8>
    1594:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <uxCurrentNumberOfTasks>
    1598:	81 11       	cpse	r24, r1
    159a:	33 c0       	rjmp	.+102    	; 0x1602 <xTaskResumeAll+0x8e>
    159c:	5a c0       	rjmp	.+180    	; 0x1652 <xTaskResumeAll+0xde>
    159e:	e0 91 8d 06 	lds	r30, 0x068D	; 0x80068d <xPendingReadyList+0x5>
    15a2:	f0 91 8e 06 	lds	r31, 0x068E	; 0x80068e <xPendingReadyList+0x6>
    15a6:	c6 81       	ldd	r28, Z+6	; 0x06
    15a8:	d7 81       	ldd	r29, Z+7	; 0x07
    15aa:	ce 01       	movw	r24, r28
    15ac:	0c 96       	adiw	r24, 0x0c	; 12
    15ae:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    15b2:	8e 01       	movw	r16, r28
    15b4:	0e 5f       	subi	r16, 0xFE	; 254
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	c8 01       	movw	r24, r16
    15ba:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    15be:	8e 89       	ldd	r24, Y+22	; 0x16
    15c0:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <uxTopReadyPriority>
    15c4:	98 17       	cp	r25, r24
    15c6:	10 f4       	brcc	.+4      	; 0x15cc <xTaskResumeAll+0x58>
    15c8:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxTopReadyPriority>
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c 01       	movw	r18, r24
    15d0:	22 0f       	add	r18, r18
    15d2:	33 1f       	adc	r19, r19
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	82 0f       	add	r24, r18
    15de:	93 1f       	adc	r25, r19
    15e0:	b8 01       	movw	r22, r16
    15e2:	89 55       	subi	r24, 0x59	; 89
    15e4:	99 4f       	sbci	r25, 0xF9	; 249
    15e6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    15ea:	9e 89       	ldd	r25, Y+22	; 0x16
    15ec:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    15f0:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    15f4:	86 89       	ldd	r24, Z+22	; 0x16
    15f6:	98 17       	cp	r25, r24
    15f8:	30 f0       	brcs	.+12     	; 0x1606 <xTaskResumeAll+0x92>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <xYieldPending>
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <xTaskResumeAll+0x92>
    1602:	c0 e0       	ldi	r28, 0x00	; 0
    1604:	d0 e0       	ldi	r29, 0x00	; 0
    1606:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <xPendingReadyList>
    160a:	81 11       	cpse	r24, r1
    160c:	c8 cf       	rjmp	.-112    	; 0x159e <xTaskResumeAll+0x2a>
    160e:	cd 2b       	or	r28, r29
    1610:	11 f0       	breq	.+4      	; 0x1616 <xTaskResumeAll+0xa2>
    1612:	0e 94 cc 07 	call	0xf98	; 0xf98 <prvResetNextTaskUnblockTime>
    1616:	c0 91 77 06 	lds	r28, 0x0677	; 0x800677 <xPendedTicks>
    161a:	d0 91 78 06 	lds	r29, 0x0678	; 0x800678 <xPendedTicks+0x1>
    161e:	20 97       	sbiw	r28, 0x00	; 0
    1620:	69 f0       	breq	.+26     	; 0x163c <xTaskResumeAll+0xc8>
    1622:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <xTaskIncrementTick>
    1626:	88 23       	and	r24, r24
    1628:	19 f0       	breq	.+6      	; 0x1630 <xTaskResumeAll+0xbc>
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <xYieldPending>
    1630:	21 97       	sbiw	r28, 0x01	; 1
    1632:	b9 f7       	brne	.-18     	; 0x1622 <xTaskResumeAll+0xae>
    1634:	10 92 78 06 	sts	0x0678, r1	; 0x800678 <xPendedTicks+0x1>
    1638:	10 92 77 06 	sts	0x0677, r1	; 0x800677 <xPendedTicks>
    163c:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <xYieldPending>
    1640:	88 23       	and	r24, r24
    1642:	31 f0       	breq	.+12     	; 0x1650 <xTaskResumeAll+0xdc>
    1644:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <xTaskResumeAll+0xde>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <xTaskResumeAll+0xde>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	08 95       	ret

00001660 <vTaskDelay>:
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	ec 01       	movw	r28, r24
    1666:	89 2b       	or	r24, r25
    1668:	49 f0       	breq	.+18     	; 0x167c <vTaskDelay+0x1c>
    166a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <vTaskSuspendAll>
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	ce 01       	movw	r24, r28
    1672:	0e 94 32 09 	call	0x1264	; 0x1264 <prvAddCurrentTaskToDelayedList>
    1676:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xTaskResumeAll>
    167a:	01 c0       	rjmp	.+2      	; 0x167e <vTaskDelay+0x1e>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	81 11       	cpse	r24, r1
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vTaskDelay+0x26>
    1682:	0e 94 77 04 	call	0x8ee	; 0x8ee <vPortYield>
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <vTaskSwitchContext>:
    168c:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxSchedulerSuspended>
    1690:	88 23       	and	r24, r24
    1692:	21 f0       	breq	.+8      	; 0x169c <vTaskSwitchContext+0x10>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <xYieldPending>
    169a:	08 95       	ret
    169c:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <xYieldPending>
    16a0:	20 91 7a 06 	lds	r18, 0x067A	; 0x80067a <uxTopReadyPriority>
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <vTaskSwitchContext+0x1c>
    16a6:	21 50       	subi	r18, 0x01	; 1
    16a8:	82 2f       	mov	r24, r18
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	fc 01       	movw	r30, r24
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	ee 0f       	add	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	e8 0f       	add	r30, r24
    16bc:	f9 1f       	adc	r31, r25
    16be:	e9 55       	subi	r30, 0x59	; 89
    16c0:	f9 4f       	sbci	r31, 0xF9	; 249
    16c2:	30 81       	ld	r19, Z
    16c4:	33 23       	and	r19, r19
    16c6:	79 f3       	breq	.-34     	; 0x16a6 <vTaskSwitchContext+0x1a>
    16c8:	ac 01       	movw	r20, r24
    16ca:	44 0f       	add	r20, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	44 0f       	add	r20, r20
    16d0:	55 1f       	adc	r21, r21
    16d2:	44 0f       	add	r20, r20
    16d4:	55 1f       	adc	r21, r21
    16d6:	48 0f       	add	r20, r24
    16d8:	59 1f       	adc	r21, r25
    16da:	df 01       	movw	r26, r30
    16dc:	01 80       	ldd	r0, Z+1	; 0x01
    16de:	f2 81       	ldd	r31, Z+2	; 0x02
    16e0:	e0 2d       	mov	r30, r0
    16e2:	02 80       	ldd	r0, Z+2	; 0x02
    16e4:	f3 81       	ldd	r31, Z+3	; 0x03
    16e6:	e0 2d       	mov	r30, r0
    16e8:	12 96       	adiw	r26, 0x02	; 2
    16ea:	fc 93       	st	X, r31
    16ec:	ee 93       	st	-X, r30
    16ee:	11 97       	sbiw	r26, 0x01	; 1
    16f0:	46 55       	subi	r20, 0x56	; 86
    16f2:	59 4f       	sbci	r21, 0xF9	; 249
    16f4:	e4 17       	cp	r30, r20
    16f6:	f5 07       	cpc	r31, r21
    16f8:	29 f4       	brne	.+10     	; 0x1704 <vTaskSwitchContext+0x78>
    16fa:	42 81       	ldd	r20, Z+2	; 0x02
    16fc:	53 81       	ldd	r21, Z+3	; 0x03
    16fe:	fd 01       	movw	r30, r26
    1700:	52 83       	std	Z+2, r21	; 0x02
    1702:	41 83       	std	Z+1, r20	; 0x01
    1704:	fc 01       	movw	r30, r24
    1706:	ee 0f       	add	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	8e 0f       	add	r24, r30
    1714:	9f 1f       	adc	r25, r31
    1716:	fc 01       	movw	r30, r24
    1718:	e9 55       	subi	r30, 0x59	; 89
    171a:	f9 4f       	sbci	r31, 0xF9	; 249
    171c:	01 80       	ldd	r0, Z+1	; 0x01
    171e:	f2 81       	ldd	r31, Z+2	; 0x02
    1720:	e0 2d       	mov	r30, r0
    1722:	86 81       	ldd	r24, Z+6	; 0x06
    1724:	97 81       	ldd	r25, Z+7	; 0x07
    1726:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <pxCurrentTCB+0x1>
    172a:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <pxCurrentTCB>
    172e:	20 93 7a 06 	sts	0x067A, r18	; 0x80067a <uxTopReadyPriority>
    1732:	08 95       	ret

00001734 <vTaskPlaceOnEventList>:
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	eb 01       	movw	r28, r22
    173a:	60 91 d4 06 	lds	r22, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    173e:	70 91 d5 06 	lds	r23, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1742:	64 5f       	subi	r22, 0xF4	; 244
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <vListInsert>
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	ce 01       	movw	r24, r28
    174e:	0e 94 32 09 	call	0x1264	; 0x1264 <prvAddCurrentTaskToDelayedList>
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <xTaskRemoveFromEventList>:
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	dc 01       	movw	r26, r24
    1762:	15 96       	adiw	r26, 0x05	; 5
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	16 97       	sbiw	r26, 0x06	; 6
    176a:	c6 81       	ldd	r28, Z+6	; 0x06
    176c:	d7 81       	ldd	r29, Z+7	; 0x07
    176e:	8e 01       	movw	r16, r28
    1770:	04 5f       	subi	r16, 0xF4	; 244
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	c8 01       	movw	r24, r16
    1776:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    177a:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxSchedulerSuspended>
    177e:	81 11       	cpse	r24, r1
    1780:	1c c0       	rjmp	.+56     	; 0x17ba <xTaskRemoveFromEventList+0x62>
    1782:	0a 50       	subi	r16, 0x0A	; 10
    1784:	11 09       	sbc	r17, r1
    1786:	c8 01       	movw	r24, r16
    1788:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    178c:	8e 89       	ldd	r24, Y+22	; 0x16
    178e:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <uxTopReadyPriority>
    1792:	98 17       	cp	r25, r24
    1794:	10 f4       	brcc	.+4      	; 0x179a <xTaskRemoveFromEventList+0x42>
    1796:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxTopReadyPriority>
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9c 01       	movw	r18, r24
    179e:	22 0f       	add	r18, r18
    17a0:	33 1f       	adc	r19, r19
    17a2:	22 0f       	add	r18, r18
    17a4:	33 1f       	adc	r19, r19
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	82 0f       	add	r24, r18
    17ac:	93 1f       	adc	r25, r19
    17ae:	b8 01       	movw	r22, r16
    17b0:	89 55       	subi	r24, 0x59	; 89
    17b2:	99 4f       	sbci	r25, 0xF9	; 249
    17b4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <xTaskRemoveFromEventList+0x6c>
    17ba:	b8 01       	movw	r22, r16
    17bc:	88 e8       	ldi	r24, 0x88	; 136
    17be:	96 e0       	ldi	r25, 0x06	; 6
    17c0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    17c4:	9e 89       	ldd	r25, Y+22	; 0x16
    17c6:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    17ca:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    17ce:	86 89       	ldd	r24, Z+22	; 0x16
    17d0:	89 17       	cp	r24, r25
    17d2:	20 f4       	brcc	.+8      	; 0x17dc <xTaskRemoveFromEventList+0x84>
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <xYieldPending>
    17da:	01 c0       	rjmp	.+2      	; 0x17de <xTaskRemoveFromEventList+0x86>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <vTaskInternalSetTimeOutState>:
    17e8:	20 91 75 06 	lds	r18, 0x0675	; 0x800675 <xNumOfOverflows>
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
    17f0:	20 91 7b 06 	lds	r18, 0x067B	; 0x80067b <xTickCount>
    17f4:	30 91 7c 06 	lds	r19, 0x067C	; 0x80067c <xTickCount+0x1>
    17f8:	32 83       	std	Z+2, r19	; 0x02
    17fa:	21 83       	std	Z+1, r18	; 0x01
    17fc:	08 95       	ret

000017fe <xTaskCheckForTimeOut>:
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	0f 92       	push	r0
    1808:	40 91 7b 06 	lds	r20, 0x067B	; 0x80067b <xTickCount>
    180c:	50 91 7c 06 	lds	r21, 0x067C	; 0x80067c <xTickCount+0x1>
    1810:	ec 01       	movw	r28, r24
    1812:	29 81       	ldd	r18, Y+1	; 0x01
    1814:	3a 81       	ldd	r19, Y+2	; 0x02
    1816:	da 01       	movw	r26, r20
    1818:	a2 1b       	sub	r26, r18
    181a:	b3 0b       	sbc	r27, r19
    181c:	f8 81       	ld	r31, Y
    181e:	e0 91 75 06 	lds	r30, 0x0675	; 0x800675 <xNumOfOverflows>
    1822:	fe 17       	cp	r31, r30
    1824:	41 f0       	breq	.+16     	; 0x1836 <xTaskCheckForTimeOut+0x38>
    1826:	42 17       	cp	r20, r18
    1828:	53 07       	cpc	r21, r19
    182a:	28 f0       	brcs	.+10     	; 0x1836 <xTaskCheckForTimeOut+0x38>
    182c:	fb 01       	movw	r30, r22
    182e:	11 82       	std	Z+1, r1	; 0x01
    1830:	10 82       	st	Z, r1
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	11 c0       	rjmp	.+34     	; 0x1858 <xTaskCheckForTimeOut+0x5a>
    1836:	eb 01       	movw	r28, r22
    1838:	28 81       	ld	r18, Y
    183a:	39 81       	ldd	r19, Y+1	; 0x01
    183c:	a2 17       	cp	r26, r18
    183e:	b3 07       	cpc	r27, r19
    1840:	40 f4       	brcc	.+16     	; 0x1852 <xTaskCheckForTimeOut+0x54>
    1842:	2a 1b       	sub	r18, r26
    1844:	3b 0b       	sbc	r19, r27
    1846:	39 83       	std	Y+1, r19	; 0x01
    1848:	28 83       	st	Y, r18
    184a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <vTaskInternalSetTimeOutState>
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <xTaskCheckForTimeOut+0x5a>
    1852:	19 82       	std	Y+1, r1	; 0x01
    1854:	18 82       	st	Y, r1
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <vTaskMissedYield>:
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <xYieldPending>
    1868:	08 95       	ret

0000186a <xTaskPriorityInherit>:
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	fc 01       	movw	r30, r24
    1874:	89 2b       	or	r24, r25
    1876:	09 f4       	brne	.+2      	; 0x187a <xTaskPriorityInherit+0x10>
    1878:	62 c0       	rjmp	.+196    	; 0x193e <xTaskPriorityInherit+0xd4>
    187a:	26 89       	ldd	r18, Z+22	; 0x16
    187c:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1880:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1884:	56 96       	adiw	r26, 0x16	; 22
    1886:	8c 91       	ld	r24, X
    1888:	28 17       	cp	r18, r24
    188a:	08 f0       	brcs	.+2      	; 0x188e <xTaskPriorityInherit+0x24>
    188c:	4e c0       	rjmp	.+156    	; 0x192a <xTaskPriorityInherit+0xc0>
    188e:	84 85       	ldd	r24, Z+12	; 0x0c
    1890:	95 85       	ldd	r25, Z+13	; 0x0d
    1892:	99 23       	and	r25, r25
    1894:	64 f0       	brlt	.+24     	; 0x18ae <xTaskPriorityInherit+0x44>
    1896:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    189a:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    189e:	56 96       	adiw	r26, 0x16	; 22
    18a0:	3c 91       	ld	r19, X
    18a2:	85 e0       	ldi	r24, 0x05	; 5
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	83 1b       	sub	r24, r19
    18a8:	91 09       	sbc	r25, r1
    18aa:	95 87       	std	Z+13, r25	; 0x0d
    18ac:	84 87       	std	Z+12, r24	; 0x0c
    18ae:	82 85       	ldd	r24, Z+10	; 0x0a
    18b0:	93 85       	ldd	r25, Z+11	; 0x0b
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	44 0f       	add	r20, r20
    18b8:	55 1f       	adc	r21, r21
    18ba:	44 0f       	add	r20, r20
    18bc:	55 1f       	adc	r21, r21
    18be:	44 0f       	add	r20, r20
    18c0:	55 1f       	adc	r21, r21
    18c2:	24 0f       	add	r18, r20
    18c4:	35 1f       	adc	r19, r21
    18c6:	29 55       	subi	r18, 0x59	; 89
    18c8:	39 4f       	sbci	r19, 0xF9	; 249
    18ca:	82 17       	cp	r24, r18
    18cc:	93 07       	cpc	r25, r19
    18ce:	21 f5       	brne	.+72     	; 0x1918 <xTaskPriorityInherit+0xae>
    18d0:	8f 01       	movw	r16, r30
    18d2:	ef 01       	movw	r28, r30
    18d4:	22 96       	adiw	r28, 0x02	; 2
    18d6:	ce 01       	movw	r24, r28
    18d8:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    18dc:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    18e0:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    18e4:	86 89       	ldd	r24, Z+22	; 0x16
    18e6:	f8 01       	movw	r30, r16
    18e8:	86 8b       	std	Z+22, r24	; 0x16
    18ea:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <uxTopReadyPriority>
    18ee:	98 17       	cp	r25, r24
    18f0:	10 f4       	brcc	.+4      	; 0x18f6 <xTaskPriorityInherit+0x8c>
    18f2:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxTopReadyPriority>
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9c 01       	movw	r18, r24
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	22 0f       	add	r18, r18
    1900:	33 1f       	adc	r19, r19
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	82 0f       	add	r24, r18
    1908:	93 1f       	adc	r25, r19
    190a:	be 01       	movw	r22, r28
    190c:	89 55       	subi	r24, 0x59	; 89
    190e:	99 4f       	sbci	r25, 0xF9	; 249
    1910:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	16 c0       	rjmp	.+44     	; 0x1944 <xTaskPriorityInherit+0xda>
    1918:	a0 91 d4 06 	lds	r26, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    191c:	b0 91 d5 06 	lds	r27, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1920:	56 96       	adiw	r26, 0x16	; 22
    1922:	8c 91       	ld	r24, X
    1924:	86 8b       	std	Z+22, r24	; 0x16
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	0d c0       	rjmp	.+26     	; 0x1944 <xTaskPriorityInherit+0xda>
    192a:	91 a1       	ldd	r25, Z+33	; 0x21
    192c:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1930:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1934:	86 89       	ldd	r24, Z+22	; 0x16
    1936:	98 17       	cp	r25, r24
    1938:	20 f0       	brcs	.+8      	; 0x1942 <xTaskPriorityInherit+0xd8>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <xTaskPriorityInherit+0xda>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <xTaskPriorityInherit+0xda>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	08 95       	ret

0000194e <xTaskPriorityDisinherit>:
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	fc 01       	movw	r30, r24
    1958:	89 2b       	or	r24, r25
    195a:	79 f1       	breq	.+94     	; 0x19ba <xTaskPriorityDisinherit+0x6c>
    195c:	82 a1       	ldd	r24, Z+34	; 0x22
    195e:	81 50       	subi	r24, 0x01	; 1
    1960:	82 a3       	std	Z+34, r24	; 0x22
    1962:	26 89       	ldd	r18, Z+22	; 0x16
    1964:	91 a1       	ldd	r25, Z+33	; 0x21
    1966:	29 17       	cp	r18, r25
    1968:	51 f1       	breq	.+84     	; 0x19be <xTaskPriorityDisinherit+0x70>
    196a:	81 11       	cpse	r24, r1
    196c:	2a c0       	rjmp	.+84     	; 0x19c2 <xTaskPriorityDisinherit+0x74>
    196e:	ef 01       	movw	r28, r30
    1970:	8f 01       	movw	r16, r30
    1972:	0e 5f       	subi	r16, 0xFE	; 254
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	c8 01       	movw	r24, r16
    1978:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    197c:	89 a1       	ldd	r24, Y+33	; 0x21
    197e:	8e 8b       	std	Y+22, r24	; 0x16
    1980:	25 e0       	ldi	r18, 0x05	; 5
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	28 1b       	sub	r18, r24
    1986:	31 09       	sbc	r19, r1
    1988:	3d 87       	std	Y+13, r19	; 0x0d
    198a:	2c 87       	std	Y+12, r18	; 0x0c
    198c:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <uxTopReadyPriority>
    1990:	98 17       	cp	r25, r24
    1992:	10 f4       	brcc	.+4      	; 0x1998 <xTaskPriorityDisinherit+0x4a>
    1994:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxTopReadyPriority>
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9c 01       	movw	r18, r24
    199c:	22 0f       	add	r18, r18
    199e:	33 1f       	adc	r19, r19
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	82 0f       	add	r24, r18
    19aa:	93 1f       	adc	r25, r19
    19ac:	b8 01       	movw	r22, r16
    19ae:	89 55       	subi	r24, 0x59	; 89
    19b0:	99 4f       	sbci	r25, 0xF9	; 249
    19b2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <xTaskPriorityDisinherit+0x76>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	03 c0       	rjmp	.+6      	; 0x19c4 <xTaskPriorityDisinherit+0x76>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <xTaskPriorityDisinherit+0x76>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	08 95       	ret

000019ce <vTaskPriorityDisinheritAfterTimeout>:
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	fc 01       	movw	r30, r24
    19d8:	89 2b       	or	r24, r25
    19da:	09 f4       	brne	.+2      	; 0x19de <vTaskPriorityDisinheritAfterTimeout+0x10>
    19dc:	43 c0       	rjmp	.+134    	; 0x1a64 <vTaskPriorityDisinheritAfterTimeout+0x96>
    19de:	91 a1       	ldd	r25, Z+33	; 0x21
    19e0:	96 17       	cp	r25, r22
    19e2:	08 f4       	brcc	.+2      	; 0x19e6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    19e4:	96 2f       	mov	r25, r22
    19e6:	86 89       	ldd	r24, Z+22	; 0x16
    19e8:	98 17       	cp	r25, r24
    19ea:	e1 f1       	breq	.+120    	; 0x1a64 <vTaskPriorityDisinheritAfterTimeout+0x96>
    19ec:	22 a1       	ldd	r18, Z+34	; 0x22
    19ee:	21 30       	cpi	r18, 0x01	; 1
    19f0:	c9 f5       	brne	.+114    	; 0x1a64 <vTaskPriorityDisinheritAfterTimeout+0x96>
    19f2:	96 8b       	std	Z+22, r25	; 0x16
    19f4:	24 85       	ldd	r18, Z+12	; 0x0c
    19f6:	35 85       	ldd	r19, Z+13	; 0x0d
    19f8:	33 23       	and	r19, r19
    19fa:	34 f0       	brlt	.+12     	; 0x1a08 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    19fc:	25 e0       	ldi	r18, 0x05	; 5
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	29 1b       	sub	r18, r25
    1a02:	31 09       	sbc	r19, r1
    1a04:	35 87       	std	Z+13, r19	; 0x0d
    1a06:	24 87       	std	Z+12, r18	; 0x0c
    1a08:	22 85       	ldd	r18, Z+10	; 0x0a
    1a0a:	33 85       	ldd	r19, Z+11	; 0x0b
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	ac 01       	movw	r20, r24
    1a10:	44 0f       	add	r20, r20
    1a12:	55 1f       	adc	r21, r21
    1a14:	44 0f       	add	r20, r20
    1a16:	55 1f       	adc	r21, r21
    1a18:	44 0f       	add	r20, r20
    1a1a:	55 1f       	adc	r21, r21
    1a1c:	84 0f       	add	r24, r20
    1a1e:	95 1f       	adc	r25, r21
    1a20:	89 55       	subi	r24, 0x59	; 89
    1a22:	99 4f       	sbci	r25, 0xF9	; 249
    1a24:	28 17       	cp	r18, r24
    1a26:	39 07       	cpc	r19, r25
    1a28:	e9 f4       	brne	.+58     	; 0x1a64 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1a2a:	ef 01       	movw	r28, r30
    1a2c:	8f 01       	movw	r16, r30
    1a2e:	0e 5f       	subi	r16, 0xFE	; 254
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	c8 01       	movw	r24, r16
    1a34:	0e 94 25 03 	call	0x64a	; 0x64a <uxListRemove>
    1a38:	8e 89       	ldd	r24, Y+22	; 0x16
    1a3a:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <uxTopReadyPriority>
    1a3e:	98 17       	cp	r25, r24
    1a40:	10 f4       	brcc	.+4      	; 0x1a46 <vTaskPriorityDisinheritAfterTimeout+0x78>
    1a42:	80 93 7a 06 	sts	0x067A, r24	; 0x80067a <uxTopReadyPriority>
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9c 01       	movw	r18, r24
    1a4a:	22 0f       	add	r18, r18
    1a4c:	33 1f       	adc	r19, r19
    1a4e:	22 0f       	add	r18, r18
    1a50:	33 1f       	adc	r19, r19
    1a52:	22 0f       	add	r18, r18
    1a54:	33 1f       	adc	r19, r19
    1a56:	82 0f       	add	r24, r18
    1a58:	93 1f       	adc	r25, r19
    1a5a:	b8 01       	movw	r22, r16
    1a5c:	89 55       	subi	r24, 0x59	; 89
    1a5e:	99 4f       	sbci	r25, 0xF9	; 249
    1a60:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <vListInsertEnd>
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	08 95       	ret

00001a6e <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1a6e:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1a72:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1a76:	89 2b       	or	r24, r25
    1a78:	39 f0       	breq	.+14     	; 0x1a88 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1a7a:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1a7e:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    1a82:	82 a1       	ldd	r24, Z+34	; 0x22
    1a84:	8f 5f       	subi	r24, 0xFF	; 255
    1a86:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    1a88:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <pxCurrentTCB>
    1a8c:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <pxCurrentTCB+0x1>
    }
    1a90:	08 95       	ret

00001a92 <memcpy>:
    1a92:	fb 01       	movw	r30, r22
    1a94:	dc 01       	movw	r26, r24
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <memcpy+0xa>
    1a98:	01 90       	ld	r0, Z+
    1a9a:	0d 92       	st	X+, r0
    1a9c:	41 50       	subi	r20, 0x01	; 1
    1a9e:	50 40       	sbci	r21, 0x00	; 0
    1aa0:	d8 f7       	brcc	.-10     	; 0x1a98 <memcpy+0x6>
    1aa2:	08 95       	ret

00001aa4 <_exit>:
    1aa4:	f8 94       	cli

00001aa6 <__stop_program>:
    1aa6:	ff cf       	rjmp	.-2      	; 0x1aa6 <__stop_program>
