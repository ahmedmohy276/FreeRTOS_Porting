
FreeRTOS LAB Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000e9a  00000f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064b  00800070  00800070  00000f3e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cac  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1b  00000000  00000000  00003f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b95  00000000  00000000  00004c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d4  00000000  00000000  000067c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000109e  00000000  00000000  00006f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003021  00000000  00000000  0000803a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000b05b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3b       	cpi	r26, 0xBB	; 187
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <main>
  8a:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VoidSetPinDirection>:
			{
				SET_Bit(PORTD_REG,pin_number);
			}
			else if (value==LOW)
			{
				CLEAR_Bit(PORTD_REG,pin_number);
  92:	63 30       	cpi	r22, 0x03	; 3
  94:	51 f1       	breq	.+84     	; 0xea <DIO_VoidSetPinDirection+0x58>
  96:	18 f4       	brcc	.+6      	; 0x9e <DIO_VoidSetPinDirection+0xc>
  98:	62 30       	cpi	r22, 0x02	; 2
  9a:	41 f0       	breq	.+16     	; 0xac <DIO_VoidSetPinDirection+0x1a>
  9c:	08 95       	ret
  9e:	64 30       	cpi	r22, 0x04	; 4
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_VoidSetPinDirection+0x12>
  a2:	42 c0       	rjmp	.+132    	; 0x128 <DIO_VoidSetPinDirection+0x96>
  a4:	65 30       	cpi	r22, 0x05	; 5
  a6:	09 f4       	brne	.+2      	; 0xaa <DIO_VoidSetPinDirection+0x18>
  a8:	5e c0       	rjmp	.+188    	; 0x166 <DIO_VoidSetPinDirection+0xd4>
  aa:	08 95       	ret
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	69 f4       	brne	.+26     	; 0xca <DIO_VoidSetPinDirection+0x38>
  b0:	4a b3       	in	r20, 0x1a	; 26
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	b9 01       	movw	r22, r18
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_VoidSetPinDirection+0x2c>
  ba:	66 0f       	add	r22, r22
  bc:	77 1f       	adc	r23, r23
  be:	8a 95       	dec	r24
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_VoidSetPinDirection+0x28>
  c2:	cb 01       	movw	r24, r22
  c4:	84 2b       	or	r24, r20
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	08 95       	ret
  ca:	41 11       	cpse	r20, r1
  cc:	6a c0       	rjmp	.+212    	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
  ce:	4a b3       	in	r20, 0x1a	; 26
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	b9 01       	movw	r22, r18
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_VoidSetPinDirection+0x4a>
  d8:	66 0f       	add	r22, r22
  da:	77 1f       	adc	r23, r23
  dc:	8a 95       	dec	r24
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_VoidSetPinDirection+0x46>
  e0:	cb 01       	movw	r24, r22
  e2:	80 95       	com	r24
  e4:	84 23       	and	r24, r20
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	08 95       	ret
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <DIO_VoidSetPinDirection+0x76>
  ee:	47 b3       	in	r20, 0x17	; 23
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	b9 01       	movw	r22, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_VoidSetPinDirection+0x6a>
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_VoidSetPinDirection+0x66>
 100:	cb 01       	movw	r24, r22
 102:	84 2b       	or	r24, r20
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
 108:	41 11       	cpse	r20, r1
 10a:	4b c0       	rjmp	.+150    	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
 10c:	47 b3       	in	r20, 0x17	; 23
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	b9 01       	movw	r22, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_VoidSetPinDirection+0x88>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	8a 95       	dec	r24
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_VoidSetPinDirection+0x84>
 11e:	cb 01       	movw	r24, r22
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	69 f4       	brne	.+26     	; 0x146 <DIO_VoidSetPinDirection+0xb4>
 12c:	44 b3       	in	r20, 0x14	; 20
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_VoidSetPinDirection+0xa8>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_VoidSetPinDirection+0xa4>
 13e:	cb 01       	movw	r24, r22
 140:	84 2b       	or	r24, r20
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
 146:	41 11       	cpse	r20, r1
 148:	2c c0       	rjmp	.+88     	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
 14a:	44 b3       	in	r20, 0x14	; 20
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_VoidSetPinDirection+0xc6>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_VoidSetPinDirection+0xc2>
 15c:	cb 01       	movw	r24, r22
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	69 f4       	brne	.+26     	; 0x184 <DIO_VoidSetPinDirection+0xf2>
 16a:	41 b3       	in	r20, 0x11	; 17
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_VoidSetPinDirection+0xe6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_VoidSetPinDirection+0xe2>
 17c:	cb 01       	movw	r24, r22
 17e:	84 2b       	or	r24, r20
 180:	81 bb       	out	0x11, r24	; 17
 182:	08 95       	ret
 184:	41 11       	cpse	r20, r1
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <DIO_VoidSetPinDirection+0x110>
 188:	41 b3       	in	r20, 0x11	; 17
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_VoidSetPinDirection+0x104>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_VoidSetPinDirection+0x100>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	81 bb       	out	0x11, r24	; 17
 1a2:	08 95       	ret

000001a4 <DIO_VoidTogglePin>:
}


void DIO_VoidTogglePin(u8 pin_number,u8 port_number)
{
	switch(port_number)
 1a4:	63 30       	cpi	r22, 0x03	; 3
 1a6:	b1 f0       	breq	.+44     	; 0x1d4 <DIO_VoidTogglePin+0x30>
 1a8:	18 f4       	brcc	.+6      	; 0x1b0 <DIO_VoidTogglePin+0xc>
 1aa:	62 30       	cpi	r22, 0x02	; 2
 1ac:	31 f0       	breq	.+12     	; 0x1ba <DIO_VoidTogglePin+0x16>
 1ae:	08 95       	ret
 1b0:	64 30       	cpi	r22, 0x04	; 4
 1b2:	e9 f0       	breq	.+58     	; 0x1ee <DIO_VoidTogglePin+0x4a>
 1b4:	65 30       	cpi	r22, 0x05	; 5
 1b6:	41 f1       	breq	.+80     	; 0x208 <DIO_VoidTogglePin+0x64>
 1b8:	08 95       	ret
	{
		case portA:
		TOGGLE_Bit(PORTA_REG,pin_number);
 1ba:	4b b3       	in	r20, 0x1b	; 27
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	b9 01       	movw	r22, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_VoidTogglePin+0x24>
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	8a 95       	dec	r24
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_VoidTogglePin+0x20>
 1cc:	cb 01       	movw	r24, r22
 1ce:	84 27       	eor	r24, r20
 1d0:	8b bb       	out	0x1b, r24	; 27
		break;
 1d2:	08 95       	ret
		
		case portB:
		TOGGLE_Bit(PORTB_REG,pin_number);
 1d4:	48 b3       	in	r20, 0x18	; 24
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	b9 01       	movw	r22, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_VoidTogglePin+0x3e>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_VoidTogglePin+0x3a>
 1e6:	cb 01       	movw	r24, r22
 1e8:	84 27       	eor	r24, r20
 1ea:	88 bb       	out	0x18, r24	; 24
		break;
 1ec:	08 95       	ret
		
		case portC:
		TOGGLE_Bit(PORTC_REG,pin_number);
 1ee:	45 b3       	in	r20, 0x15	; 21
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_VoidTogglePin+0x58>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_VoidTogglePin+0x54>
 200:	cb 01       	movw	r24, r22
 202:	84 27       	eor	r24, r20
 204:	85 bb       	out	0x15, r24	; 21
		break;
 206:	08 95       	ret
		
		case portD:
		TOGGLE_Bit(PORTD_REG,pin_number);
 208:	42 b3       	in	r20, 0x12	; 18
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_VoidTogglePin+0x72>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_VoidTogglePin+0x6e>
 21a:	cb 01       	movw	r24, r22
 21c:	84 27       	eor	r24, r20
 21e:	82 bb       	out	0x12, r24	; 18
 220:	08 95       	ret

00000222 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
 228:	0e 94 a7 05 	call	0xb4e	; 0xb4e <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 22c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 230:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 234:	89 2b       	or	r24, r25
 236:	31 f4       	brne	.+12     	; 0x244 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 238:	85 e7       	ldi	r24, 0x75	; 117
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
 240:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 244:	20 97       	sbiw	r28, 0x00	; 0
 246:	c9 f0       	breq	.+50     	; 0x27a <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 248:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <xNextFreeByte>
 24c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <xNextFreeByte+0x1>
 250:	9e 01       	movw	r18, r28
 252:	28 0f       	add	r18, r24
 254:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 256:	2b 3d       	cpi	r18, 0xDB	; 219
 258:	45 e0       	ldi	r20, 0x05	; 5
 25a:	34 07       	cpc	r19, r20
 25c:	88 f4       	brcc	.+34     	; 0x280 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 25e:	82 17       	cp	r24, r18
 260:	93 07       	cpc	r25, r19
 262:	88 f4       	brcc	.+34     	; 0x286 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 264:	c0 91 70 00 	lds	r28, 0x0070	; 0x800070 <__data_end>
 268:	d0 91 71 00 	lds	r29, 0x0071	; 0x800071 <__data_end+0x1>
 26c:	c8 0f       	add	r28, r24
 26e:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
 270:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <xNextFreeByte+0x1>
 274:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <xNextFreeByte>
 278:	08 c0       	rjmp	.+16     	; 0x28a <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	05 c0       	rjmp	.+10     	; 0x28a <pvPortMalloc+0x68>
 280:	c0 e0       	ldi	r28, 0x00	; 0
 282:	d0 e0       	ldi	r29, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <pvPortMalloc+0x68>
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 28a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
 28e:	ce 01       	movw	r24, r28
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 296:	08 95       	ret

00000298 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 298:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 29a:	03 96       	adiw	r24, 0x03	; 3
 29c:	92 83       	std	Z+2, r25	; 0x02
 29e:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	3f ef       	ldi	r19, 0xFF	; 255
 2a4:	34 83       	std	Z+4, r19	; 0x04
 2a6:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2a8:	96 83       	std	Z+6, r25	; 0x06
 2aa:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2ac:	90 87       	std	Z+8, r25	; 0x08
 2ae:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 2b0:	10 82       	st	Z, r1
 2b2:	08 95       	ret

000002b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 2b4:	fc 01       	movw	r30, r24
 2b6:	11 86       	std	Z+9, r1	; 0x09
 2b8:	10 86       	std	Z+8, r1	; 0x08
 2ba:	08 95       	ret

000002bc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	9c 01       	movw	r18, r24
 2c2:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
 2c4:	dc 01       	movw	r26, r24
 2c6:	11 96       	adiw	r26, 0x01	; 1
 2c8:	cd 91       	ld	r28, X+
 2ca:	dc 91       	ld	r29, X
 2cc:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 2ce:	d3 83       	std	Z+3, r29	; 0x03
 2d0:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	95 83       	std	Z+5, r25	; 0x05
 2d8:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 2da:	8c 81       	ldd	r24, Y+4	; 0x04
 2dc:	9d 81       	ldd	r25, Y+5	; 0x05
 2de:	dc 01       	movw	r26, r24
 2e0:	13 96       	adiw	r26, 0x03	; 3
 2e2:	7c 93       	st	X, r23
 2e4:	6e 93       	st	-X, r22
 2e6:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
 2e8:	7d 83       	std	Y+5, r23	; 0x05
 2ea:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 2ec:	31 87       	std	Z+9, r19	; 0x09
 2ee:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
 2f0:	f9 01       	movw	r30, r18
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 83       	st	Z, r24
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 304:	48 81       	ld	r20, Y
 306:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 308:	4f 3f       	cpi	r20, 0xFF	; 255
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	52 07       	cpc	r21, r18
 30e:	21 f4       	brne	.+8      	; 0x318 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 310:	fc 01       	movw	r30, r24
 312:	a7 81       	ldd	r26, Z+7	; 0x07
 314:	b0 85       	ldd	r27, Z+8	; 0x08
 316:	0d c0       	rjmp	.+26     	; 0x332 <vListInsert+0x34>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 318:	dc 01       	movw	r26, r24
 31a:	13 96       	adiw	r26, 0x03	; 3
 31c:	01 c0       	rjmp	.+2      	; 0x320 <vListInsert+0x22>
 31e:	df 01       	movw	r26, r30
 320:	12 96       	adiw	r26, 0x02	; 2
 322:	ed 91       	ld	r30, X+
 324:	fc 91       	ld	r31, X
 326:	13 97       	sbiw	r26, 0x03	; 3
 328:	20 81       	ld	r18, Z
 32a:	31 81       	ldd	r19, Z+1	; 0x01
 32c:	42 17       	cp	r20, r18
 32e:	53 07       	cpc	r21, r19
 330:	b0 f7       	brcc	.-20     	; 0x31e <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 332:	12 96       	adiw	r26, 0x02	; 2
 334:	ed 91       	ld	r30, X+
 336:	fc 91       	ld	r31, X
 338:	13 97       	sbiw	r26, 0x03	; 3
 33a:	fb 83       	std	Y+3, r31	; 0x03
 33c:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 33e:	d5 83       	std	Z+5, r29	; 0x05
 340:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
 342:	bd 83       	std	Y+5, r27	; 0x05
 344:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
 346:	13 96       	adiw	r26, 0x03	; 3
 348:	dc 93       	st	X, r29
 34a:	ce 93       	st	-X, r28
 34c:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 34e:	99 87       	std	Y+9, r25	; 0x09
 350:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
 352:	fc 01       	movw	r30, r24
 354:	20 81       	ld	r18, Z
 356:	2f 5f       	subi	r18, 0xFF	; 255
 358:	20 83       	st	Z, r18
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 366:	a0 85       	ldd	r26, Z+8	; 0x08
 368:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 36a:	c2 81       	ldd	r28, Z+2	; 0x02
 36c:	d3 81       	ldd	r29, Z+3	; 0x03
 36e:	84 81       	ldd	r24, Z+4	; 0x04
 370:	95 81       	ldd	r25, Z+5	; 0x05
 372:	9d 83       	std	Y+5, r25	; 0x05
 374:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 376:	c4 81       	ldd	r28, Z+4	; 0x04
 378:	d5 81       	ldd	r29, Z+5	; 0x05
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	93 81       	ldd	r25, Z+3	; 0x03
 37e:	9b 83       	std	Y+3, r25	; 0x03
 380:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 382:	11 96       	adiw	r26, 0x01	; 1
 384:	8d 91       	ld	r24, X+
 386:	9c 91       	ld	r25, X
 388:	12 97       	sbiw	r26, 0x02	; 2
 38a:	e8 17       	cp	r30, r24
 38c:	f9 07       	cpc	r31, r25
 38e:	31 f4       	brne	.+12     	; 0x39c <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 390:	84 81       	ldd	r24, Z+4	; 0x04
 392:	95 81       	ldd	r25, Z+5	; 0x05
 394:	12 96       	adiw	r26, 0x02	; 2
 396:	9c 93       	st	X, r25
 398:	8e 93       	st	-X, r24
 39a:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 39c:	11 86       	std	Z+9, r1	; 0x09
 39e:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 3a0:	8c 91       	ld	r24, X
 3a2:	81 50       	subi	r24, 0x01	; 1
 3a4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 3a6:	8c 91       	ld	r24, X
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LED1>:
void LED1(void *pvParameter)
{
	DIO_Status port = portD;
	for(;;)
	{
		DIO_VoidTogglePin(0,port);
 3ae:	65 e0       	ldi	r22, 0x05	; 5
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidTogglePin>
		vTaskDelay(500);
 3b6:	84 ef       	ldi	r24, 0xF4	; 244
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vTaskDelay>
 3be:	f7 cf       	rjmp	.-18     	; 0x3ae <LED1>

000003c0 <LED2>:
void LED2(void *pvParameter)
{
	DIO_Status port = portD;
	for(;;)
	{
		DIO_VoidTogglePin(1,port);
 3c0:	65 e0       	ldi	r22, 0x05	; 5
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DIO_VoidTogglePin>
		vTaskDelay(1000);
 3c8:	88 ee       	ldi	r24, 0xE8	; 232
 3ca:	93 e0       	ldi	r25, 0x03	; 3
 3cc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <vTaskDelay>
 3d0:	f7 cf       	rjmp	.-18     	; 0x3c0 <LED2>

000003d2 <system_init>:
void LED1(void *pvParameter);
void LED2(void *pvParameter);

void system_init(void)
{
	DIO_VoidSetPinDirection(0,portD,OUTPUT);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	65 e0       	ldi	r22, 0x05	; 5
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
	DIO_VoidSetPinDirection(1,portD,OUTPUT);
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	65 e0       	ldi	r22, 0x05	; 5
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidSetPinDirection>
 3e6:	08 95       	ret

000003e8 <main>:
}

int main(void)
{
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	0f 93       	push	r16
	
	system_init();
 3ee:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <system_init>
    
    BaseType_t task1_return = pdFALSE, task2_return = pdFALSE ;
    /* Create the Tasks */
    task1_return = xTaskCreate((pdTASK_CODE)LED1, (signed char *)"LED1", configMINIMAL_STACK_SIZE, NULL, LED1_PRIORITY, &LED1_handle);
 3f2:	0f 2e       	mov	r0, r31
 3f4:	f2 e5       	ldi	r31, 0x52	; 82
 3f6:	ef 2e       	mov	r14, r31
 3f8:	f6 e0       	ldi	r31, 0x06	; 6
 3fa:	ff 2e       	mov	r15, r31
 3fc:	f0 2d       	mov	r31, r0
 3fe:	03 e0       	ldi	r16, 0x03	; 3
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	45 e5       	ldi	r20, 0x55	; 85
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	61 e6       	ldi	r22, 0x61	; 97
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	87 ed       	ldi	r24, 0xD7	; 215
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 27 05 	call	0xa4e	; 0xa4e <xTaskCreate>
    task2_return = xTaskCreate((pdTASK_CODE)LED2, (signed char *)"LED2", configMINIMAL_STACK_SIZE, NULL, LED2_PRIORITY, &LED2_handle);
 414:	0f 2e       	mov	r0, r31
 416:	f0 e5       	ldi	r31, 0x50	; 80
 418:	ef 2e       	mov	r14, r31
 41a:	f6 e0       	ldi	r31, 0x06	; 6
 41c:	ff 2e       	mov	r15, r31
 41e:	f0 2d       	mov	r31, r0
 420:	01 e0       	ldi	r16, 0x01	; 1
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	45 e5       	ldi	r20, 0x55	; 85
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	66 e6       	ldi	r22, 0x66	; 102
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	80 ee       	ldi	r24, 0xE0	; 224
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	0e 94 27 05 	call	0xa4e	; 0xa4e <xTaskCreate>
    if (task2_return == pdTRUE)
    {
	    /* task2 created successfully */
    }
    
    vTaskStartScheduler();
 436:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <vTaskStartScheduler>
    return 0;
}
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	08 95       	ret

00000446 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 446:	1b bc       	out	0x2b, r1	; 43
 448:	8c e7       	ldi	r24, 0x7C	; 124
 44a:	8a bd       	out	0x2a, r24	; 42
 44c:	8b e0       	ldi	r24, 0x0B	; 11
 44e:	8e bd       	out	0x2e, r24	; 46
 450:	89 b7       	in	r24, 0x39	; 57
 452:	80 61       	ori	r24, 0x10	; 16
 454:	89 bf       	out	0x39, r24	; 57
 456:	08 95       	ret

00000458 <pxPortInitialiseStack>:
 458:	31 e1       	ldi	r19, 0x11	; 17
 45a:	fc 01       	movw	r30, r24
 45c:	30 83       	st	Z, r19
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	22 e2       	ldi	r18, 0x22	; 34
 462:	20 83       	st	Z, r18
 464:	31 97       	sbiw	r30, 0x01	; 1
 466:	a3 e3       	ldi	r26, 0x33	; 51
 468:	a0 83       	st	Z, r26
 46a:	31 97       	sbiw	r30, 0x01	; 1
 46c:	60 83       	st	Z, r22
 46e:	31 97       	sbiw	r30, 0x01	; 1
 470:	70 83       	st	Z, r23
 472:	31 97       	sbiw	r30, 0x01	; 1
 474:	10 82       	st	Z, r1
 476:	31 97       	sbiw	r30, 0x01	; 1
 478:	60 e8       	ldi	r22, 0x80	; 128
 47a:	60 83       	st	Z, r22
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	10 82       	st	Z, r1
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	62 e0       	ldi	r22, 0x02	; 2
 484:	60 83       	st	Z, r22
 486:	31 97       	sbiw	r30, 0x01	; 1
 488:	63 e0       	ldi	r22, 0x03	; 3
 48a:	60 83       	st	Z, r22
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	64 e0       	ldi	r22, 0x04	; 4
 490:	60 83       	st	Z, r22
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	65 e0       	ldi	r22, 0x05	; 5
 496:	60 83       	st	Z, r22
 498:	31 97       	sbiw	r30, 0x01	; 1
 49a:	66 e0       	ldi	r22, 0x06	; 6
 49c:	60 83       	st	Z, r22
 49e:	31 97       	sbiw	r30, 0x01	; 1
 4a0:	67 e0       	ldi	r22, 0x07	; 7
 4a2:	60 83       	st	Z, r22
 4a4:	31 97       	sbiw	r30, 0x01	; 1
 4a6:	68 e0       	ldi	r22, 0x08	; 8
 4a8:	60 83       	st	Z, r22
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	69 e0       	ldi	r22, 0x09	; 9
 4ae:	60 83       	st	Z, r22
 4b0:	31 97       	sbiw	r30, 0x01	; 1
 4b2:	60 e1       	ldi	r22, 0x10	; 16
 4b4:	60 83       	st	Z, r22
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	30 83       	st	Z, r19
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	32 e1       	ldi	r19, 0x12	; 18
 4be:	30 83       	st	Z, r19
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	33 e1       	ldi	r19, 0x13	; 19
 4c4:	30 83       	st	Z, r19
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	34 e1       	ldi	r19, 0x14	; 20
 4ca:	30 83       	st	Z, r19
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	35 e1       	ldi	r19, 0x15	; 21
 4d0:	30 83       	st	Z, r19
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	36 e1       	ldi	r19, 0x16	; 22
 4d6:	30 83       	st	Z, r19
 4d8:	31 97       	sbiw	r30, 0x01	; 1
 4da:	37 e1       	ldi	r19, 0x17	; 23
 4dc:	30 83       	st	Z, r19
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	38 e1       	ldi	r19, 0x18	; 24
 4e2:	30 83       	st	Z, r19
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	39 e1       	ldi	r19, 0x19	; 25
 4e8:	30 83       	st	Z, r19
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	30 e2       	ldi	r19, 0x20	; 32
 4ee:	30 83       	st	Z, r19
 4f0:	31 97       	sbiw	r30, 0x01	; 1
 4f2:	31 e2       	ldi	r19, 0x21	; 33
 4f4:	30 83       	st	Z, r19
 4f6:	31 97       	sbiw	r30, 0x01	; 1
 4f8:	20 83       	st	Z, r18
 4fa:	31 97       	sbiw	r30, 0x01	; 1
 4fc:	23 e2       	ldi	r18, 0x23	; 35
 4fe:	20 83       	st	Z, r18
 500:	31 97       	sbiw	r30, 0x01	; 1
 502:	40 83       	st	Z, r20
 504:	31 97       	sbiw	r30, 0x01	; 1
 506:	50 83       	st	Z, r21
 508:	31 97       	sbiw	r30, 0x01	; 1
 50a:	26 e2       	ldi	r18, 0x26	; 38
 50c:	20 83       	st	Z, r18
 50e:	31 97       	sbiw	r30, 0x01	; 1
 510:	27 e2       	ldi	r18, 0x27	; 39
 512:	20 83       	st	Z, r18
 514:	31 97       	sbiw	r30, 0x01	; 1
 516:	28 e2       	ldi	r18, 0x28	; 40
 518:	20 83       	st	Z, r18
 51a:	31 97       	sbiw	r30, 0x01	; 1
 51c:	29 e2       	ldi	r18, 0x29	; 41
 51e:	20 83       	st	Z, r18
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	20 e3       	ldi	r18, 0x30	; 48
 524:	20 83       	st	Z, r18
 526:	31 97       	sbiw	r30, 0x01	; 1
 528:	21 e3       	ldi	r18, 0x31	; 49
 52a:	20 83       	st	Z, r18
 52c:	86 97       	sbiw	r24, 0x26	; 38
 52e:	08 95       	ret

00000530 <xPortStartScheduler>:
 530:	0e 94 23 02 	call	0x446	; 0x446 <prvSetupTimerInterrupt>
 534:	a0 91 b9 06 	lds	r26, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 538:	b0 91 ba 06 	lds	r27, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 53c:	cd 91       	ld	r28, X+
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	dd 91       	ld	r29, X+
 542:	de bf       	out	0x3e, r29	; 62
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	9f 90       	pop	r9
 572:	8f 90       	pop	r8
 574:	7f 90       	pop	r7
 576:	6f 90       	pop	r6
 578:	5f 90       	pop	r5
 57a:	4f 90       	pop	r4
 57c:	3f 90       	pop	r3
 57e:	2f 90       	pop	r2
 580:	1f 90       	pop	r1
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	08 95       	ret
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	08 95       	ret

0000058e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	0f 92       	push	r0
 596:	1f 92       	push	r1
 598:	11 24       	eor	r1, r1
 59a:	2f 92       	push	r2
 59c:	3f 92       	push	r3
 59e:	4f 92       	push	r4
 5a0:	5f 92       	push	r5
 5a2:	6f 92       	push	r6
 5a4:	7f 92       	push	r7
 5a6:	8f 92       	push	r8
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
 5d6:	a0 91 b9 06 	lds	r26, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 5da:	b0 91 ba 06 	lds	r27, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 5de:	0d b6       	in	r0, 0x3d	; 61
 5e0:	0d 92       	st	X+, r0
 5e2:	0e b6       	in	r0, 0x3e	; 62
 5e4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 5e6:	0e 94 f7 06 	call	0xdee	; 0xdee <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 5ea:	a0 91 b9 06 	lds	r26, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 5ee:	b0 91 ba 06 	lds	r27, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 5f2:	cd 91       	ld	r28, X+
 5f4:	cd bf       	out	0x3d, r28	; 61
 5f6:	dd 91       	ld	r29, X+
 5f8:	de bf       	out	0x3e, r29	; 62
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	1f 91       	pop	r17
 618:	0f 91       	pop	r16
 61a:	ff 90       	pop	r15
 61c:	ef 90       	pop	r14
 61e:	df 90       	pop	r13
 620:	cf 90       	pop	r12
 622:	bf 90       	pop	r11
 624:	af 90       	pop	r10
 626:	9f 90       	pop	r9
 628:	8f 90       	pop	r8
 62a:	7f 90       	pop	r7
 62c:	6f 90       	pop	r6
 62e:	5f 90       	pop	r5
 630:	4f 90       	pop	r4
 632:	3f 90       	pop	r3
 634:	2f 90       	pop	r2
 636:	1f 90       	pop	r1
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0

	asm volatile ( "ret" );
 63e:	08 95       	ret

00000640 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	f8 94       	cli
 646:	0f 92       	push	r0
 648:	1f 92       	push	r1
 64a:	11 24       	eor	r1, r1
 64c:	2f 92       	push	r2
 64e:	3f 92       	push	r3
 650:	4f 92       	push	r4
 652:	5f 92       	push	r5
 654:	6f 92       	push	r6
 656:	7f 92       	push	r7
 658:	8f 92       	push	r8
 65a:	9f 92       	push	r9
 65c:	af 92       	push	r10
 65e:	bf 92       	push	r11
 660:	cf 92       	push	r12
 662:	df 92       	push	r13
 664:	ef 92       	push	r14
 666:	ff 92       	push	r15
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	2f 93       	push	r18
 66e:	3f 93       	push	r19
 670:	4f 93       	push	r20
 672:	5f 93       	push	r21
 674:	6f 93       	push	r22
 676:	7f 93       	push	r23
 678:	8f 93       	push	r24
 67a:	9f 93       	push	r25
 67c:	af 93       	push	r26
 67e:	bf 93       	push	r27
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
 688:	a0 91 b9 06 	lds	r26, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 68c:	b0 91 ba 06 	lds	r27, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 690:	0d b6       	in	r0, 0x3d	; 61
 692:	0d 92       	st	X+, r0
 694:	0e b6       	in	r0, 0x3e	; 62
 696:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 698:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xTaskIncrementTick>
 69c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 69e:	0e 94 f7 06 	call	0xdee	; 0xdee <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 6a2:	a0 91 b9 06 	lds	r26, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 6a6:	b0 91 ba 06 	lds	r27, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 6aa:	cd 91       	ld	r28, X+
 6ac:	cd bf       	out	0x3d, r28	; 61
 6ae:	dd 91       	ld	r29, X+
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	bf 91       	pop	r27
 6bc:	af 91       	pop	r26
 6be:	9f 91       	pop	r25
 6c0:	8f 91       	pop	r24
 6c2:	7f 91       	pop	r23
 6c4:	6f 91       	pop	r22
 6c6:	5f 91       	pop	r21
 6c8:	4f 91       	pop	r20
 6ca:	3f 91       	pop	r19
 6cc:	2f 91       	pop	r18
 6ce:	1f 91       	pop	r17
 6d0:	0f 91       	pop	r16
 6d2:	ff 90       	pop	r15
 6d4:	ef 90       	pop	r14
 6d6:	df 90       	pop	r13
 6d8:	cf 90       	pop	r12
 6da:	bf 90       	pop	r11
 6dc:	af 90       	pop	r10
 6de:	9f 90       	pop	r9
 6e0:	8f 90       	pop	r8
 6e2:	7f 90       	pop	r7
 6e4:	6f 90       	pop	r6
 6e6:	5f 90       	pop	r5
 6e8:	4f 90       	pop	r4
 6ea:	3f 90       	pop	r3
 6ec:	2f 90       	pop	r2
 6ee:	1f 90       	pop	r1
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0

	asm volatile ( "ret" );
 6f6:	08 95       	ret

000006f8 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 6f8:	0e 94 20 03 	call	0x640	; 0x640 <vPortYieldFromTick>
		asm volatile ( "reti" );
 6fc:	18 95       	reti

000006fe <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 6fe:	e0 91 78 06 	lds	r30, 0x0678	; 0x800678 <pxDelayedTaskList>
 702:	f0 91 79 06 	lds	r31, 0x0679	; 0x800679 <pxDelayedTaskList+0x1>
 706:	80 81       	ld	r24, Z
 708:	81 11       	cpse	r24, r1
 70a:	07 c0       	rjmp	.+14     	; 0x71a <prvResetNextTaskUnblockTime+0x1c>
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	9f ef       	ldi	r25, 0xFF	; 255
 710:	90 93 58 06 	sts	0x0658, r25	; 0x800658 <xNextTaskUnblockTime+0x1>
 714:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <xNextTaskUnblockTime>
 718:	08 95       	ret
 71a:	e0 91 78 06 	lds	r30, 0x0678	; 0x800678 <pxDelayedTaskList>
 71e:	f0 91 79 06 	lds	r31, 0x0679	; 0x800679 <pxDelayedTaskList+0x1>
 722:	05 80       	ldd	r0, Z+5	; 0x05
 724:	f6 81       	ldd	r31, Z+6	; 0x06
 726:	e0 2d       	mov	r30, r0
 728:	80 81       	ld	r24, Z
 72a:	91 81       	ldd	r25, Z+1	; 0x01
 72c:	90 93 58 06 	sts	0x0658, r25	; 0x800658 <xNextTaskUnblockTime+0x1>
 730:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <xNextTaskUnblockTime>
 734:	08 95       	ret

00000736 <prvDeleteTCB>:
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	ec 01       	movw	r28, r24
 73c:	8f 89       	ldd	r24, Y+23	; 0x17
 73e:	98 8d       	ldd	r25, Y+24	; 0x18
 740:	0e 94 4b 01 	call	0x296	; 0x296 <vPortFree>
 744:	ce 01       	movw	r24, r28
 746:	0e 94 4b 01 	call	0x296	; 0x296 <vPortFree>
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <prvInitialiseNewTask>:
 750:	6f 92       	push	r6
 752:	7f 92       	push	r7
 754:	8f 92       	push	r8
 756:	9f 92       	push	r9
 758:	af 92       	push	r10
 75a:	bf 92       	push	r11
 75c:	cf 92       	push	r12
 75e:	df 92       	push	r13
 760:	ef 92       	push	r14
 762:	0f 93       	push	r16
 764:	1f 93       	push	r17
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	cd b7       	in	r28, 0x3d	; 61
 76c:	de b7       	in	r29, 0x3e	; 62
 76e:	4c 01       	movw	r8, r24
 770:	d5 01       	movw	r26, r10
 772:	57 96       	adiw	r26, 0x17	; 23
 774:	8d 91       	ld	r24, X+
 776:	9c 91       	ld	r25, X
 778:	58 97       	sbiw	r26, 0x18	; 24
 77a:	21 50       	subi	r18, 0x01	; 1
 77c:	31 09       	sbc	r19, r1
 77e:	3c 01       	movw	r6, r24
 780:	62 0e       	add	r6, r18
 782:	73 1e       	adc	r7, r19
 784:	61 15       	cp	r22, r1
 786:	71 05       	cpc	r23, r1
 788:	89 f4       	brne	.+34     	; 0x7ac <prvInitialiseNewTask+0x5c>
 78a:	16 c0       	rjmp	.+44     	; 0x7b8 <prvInitialiseNewTask+0x68>
 78c:	82 2f       	mov	r24, r18
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	fb 01       	movw	r30, r22
 792:	e8 0f       	add	r30, r24
 794:	f9 1f       	adc	r31, r25
 796:	30 81       	ld	r19, Z
 798:	d5 01       	movw	r26, r10
 79a:	a8 0f       	add	r26, r24
 79c:	b9 1f       	adc	r27, r25
 79e:	59 96       	adiw	r26, 0x19	; 25
 7a0:	3c 93       	st	X, r19
 7a2:	80 81       	ld	r24, Z
 7a4:	88 23       	and	r24, r24
 7a6:	29 f0       	breq	.+10     	; 0x7b2 <prvInitialiseNewTask+0x62>
 7a8:	2f 5f       	subi	r18, 0xFF	; 255
 7aa:	01 c0       	rjmp	.+2      	; 0x7ae <prvInitialiseNewTask+0x5e>
 7ac:	20 e0       	ldi	r18, 0x00	; 0
 7ae:	28 30       	cpi	r18, 0x08	; 8
 7b0:	68 f3       	brcs	.-38     	; 0x78c <prvInitialiseNewTask+0x3c>
 7b2:	f5 01       	movw	r30, r10
 7b4:	10 a2       	std	Z+32, r1	; 0x20
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <prvInitialiseNewTask+0x6e>
 7b8:	d5 01       	movw	r26, r10
 7ba:	59 96       	adiw	r26, 0x19	; 25
 7bc:	1c 92       	st	X, r1
 7be:	b4 e0       	ldi	r27, 0x04	; 4
 7c0:	be 15       	cp	r27, r14
 7c2:	18 f4       	brcc	.+6      	; 0x7ca <prvInitialiseNewTask+0x7a>
 7c4:	68 94       	set
 7c6:	ee 24       	eor	r14, r14
 7c8:	e2 f8       	bld	r14, 2
 7ca:	f5 01       	movw	r30, r10
 7cc:	e6 8a       	std	Z+22, r14	; 0x16
 7ce:	c5 01       	movw	r24, r10
 7d0:	02 96       	adiw	r24, 0x02	; 2
 7d2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <vListInitialiseItem>
 7d6:	c5 01       	movw	r24, r10
 7d8:	0c 96       	adiw	r24, 0x0c	; 12
 7da:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <vListInitialiseItem>
 7de:	d5 01       	movw	r26, r10
 7e0:	19 96       	adiw	r26, 0x09	; 9
 7e2:	bc 92       	st	X, r11
 7e4:	ae 92       	st	-X, r10
 7e6:	18 97       	sbiw	r26, 0x08	; 8
 7e8:	85 e0       	ldi	r24, 0x05	; 5
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	8e 19       	sub	r24, r14
 7ee:	91 09       	sbc	r25, r1
 7f0:	1d 96       	adiw	r26, 0x0d	; 13
 7f2:	9c 93       	st	X, r25
 7f4:	8e 93       	st	-X, r24
 7f6:	1c 97       	sbiw	r26, 0x0c	; 12
 7f8:	53 96       	adiw	r26, 0x13	; 19
 7fa:	bc 92       	st	X, r11
 7fc:	ae 92       	st	-X, r10
 7fe:	52 97       	sbiw	r26, 0x12	; 18
 800:	84 e0       	ldi	r24, 0x04	; 4
 802:	f5 01       	movw	r30, r10
 804:	b1 96       	adiw	r30, 0x21	; 33
 806:	df 01       	movw	r26, r30
 808:	1d 92       	st	X+, r1
 80a:	8a 95       	dec	r24
 80c:	e9 f7       	brne	.-6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80e:	f5 01       	movw	r30, r10
 810:	15 a2       	std	Z+37, r1	; 0x25
 812:	a8 01       	movw	r20, r16
 814:	b4 01       	movw	r22, r8
 816:	c3 01       	movw	r24, r6
 818:	0e 94 2c 02 	call	0x458	; 0x458 <pxPortInitialiseStack>
 81c:	d5 01       	movw	r26, r10
 81e:	8d 93       	st	X+, r24
 820:	9c 93       	st	X, r25
 822:	c1 14       	cp	r12, r1
 824:	d1 04       	cpc	r13, r1
 826:	19 f0       	breq	.+6      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 828:	f6 01       	movw	r30, r12
 82a:	b1 82       	std	Z+1, r11	; 0x01
 82c:	a0 82       	st	Z, r10
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	ef 90       	pop	r14
 838:	df 90       	pop	r13
 83a:	cf 90       	pop	r12
 83c:	bf 90       	pop	r11
 83e:	af 90       	pop	r10
 840:	9f 90       	pop	r9
 842:	8f 90       	pop	r8
 844:	7f 90       	pop	r7
 846:	6f 90       	pop	r6
 848:	08 95       	ret

0000084a <prvInitialiseTaskLists>:
 84a:	cf 93       	push	r28
 84c:	c0 e0       	ldi	r28, 0x00	; 0
 84e:	10 c0       	rjmp	.+32     	; 0x870 <__stack+0x11>
 850:	8c 2f       	mov	r24, r28
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	9c 01       	movw	r18, r24
 856:	22 0f       	add	r18, r18
 858:	33 1f       	adc	r19, r19
 85a:	22 0f       	add	r18, r18
 85c:	33 1f       	adc	r19, r19
 85e:	22 0f       	add	r18, r18
 860:	33 1f       	adc	r19, r19
 862:	82 0f       	add	r24, r18
 864:	93 1f       	adc	r25, r19
 866:	84 57       	subi	r24, 0x74	; 116
 868:	99 4f       	sbci	r25, 0xF9	; 249
 86a:	0e 94 4c 01 	call	0x298	; 0x298 <vListInitialise>
 86e:	cf 5f       	subi	r28, 0xFF	; 255
 870:	c5 30       	cpi	r28, 0x05	; 5
 872:	70 f3       	brcs	.-36     	; 0x850 <prvInitialiseTaskLists+0x6>
 874:	83 e8       	ldi	r24, 0x83	; 131
 876:	96 e0       	ldi	r25, 0x06	; 6
 878:	0e 94 4c 01 	call	0x298	; 0x298 <vListInitialise>
 87c:	8a e7       	ldi	r24, 0x7A	; 122
 87e:	96 e0       	ldi	r25, 0x06	; 6
 880:	0e 94 4c 01 	call	0x298	; 0x298 <vListInitialise>
 884:	8d e6       	ldi	r24, 0x6D	; 109
 886:	96 e0       	ldi	r25, 0x06	; 6
 888:	0e 94 4c 01 	call	0x298	; 0x298 <vListInitialise>
 88c:	84 e6       	ldi	r24, 0x64	; 100
 88e:	96 e0       	ldi	r25, 0x06	; 6
 890:	0e 94 4c 01 	call	0x298	; 0x298 <vListInitialise>
 894:	83 e8       	ldi	r24, 0x83	; 131
 896:	96 e0       	ldi	r25, 0x06	; 6
 898:	90 93 79 06 	sts	0x0679, r25	; 0x800679 <pxDelayedTaskList+0x1>
 89c:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <pxDelayedTaskList>
 8a0:	8a e7       	ldi	r24, 0x7A	; 122
 8a2:	96 e0       	ldi	r25, 0x06	; 6
 8a4:	90 93 77 06 	sts	0x0677, r25	; 0x800677 <pxOverflowDelayedTaskList+0x1>
 8a8:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <pxOverflowDelayedTaskList>
 8ac:	cf 91       	pop	r28
 8ae:	08 95       	ret

000008b0 <prvAddNewTaskToReadyList>:
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	ec 01       	movw	r28, r24
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	f8 94       	cli
 8ba:	0f 92       	push	r0
 8bc:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxCurrentNumberOfTasks>
 8c0:	8f 5f       	subi	r24, 0xFF	; 255
 8c2:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxCurrentNumberOfTasks>
 8c6:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 8ca:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 8ce:	89 2b       	or	r24, r25
 8d0:	59 f4       	brne	.+22     	; 0x8e8 <prvAddNewTaskToReadyList+0x38>
 8d2:	d0 93 ba 06 	sts	0x06BA, r29	; 0x8006ba <pxCurrentTCB+0x1>
 8d6:	c0 93 b9 06 	sts	0x06B9, r28	; 0x8006b9 <pxCurrentTCB>
 8da:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxCurrentNumberOfTasks>
 8de:	81 30       	cpi	r24, 0x01	; 1
 8e0:	99 f4       	brne	.+38     	; 0x908 <prvAddNewTaskToReadyList+0x58>
 8e2:	0e 94 25 04 	call	0x84a	; 0x84a <prvInitialiseTaskLists>
 8e6:	10 c0       	rjmp	.+32     	; 0x908 <prvAddNewTaskToReadyList+0x58>
 8e8:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <xSchedulerRunning>
 8ec:	81 11       	cpse	r24, r1
 8ee:	0c c0       	rjmp	.+24     	; 0x908 <prvAddNewTaskToReadyList+0x58>
 8f0:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 8f4:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 8f8:	96 89       	ldd	r25, Z+22	; 0x16
 8fa:	8e 89       	ldd	r24, Y+22	; 0x16
 8fc:	89 17       	cp	r24, r25
 8fe:	20 f0       	brcs	.+8      	; 0x908 <prvAddNewTaskToReadyList+0x58>
 900:	d0 93 ba 06 	sts	0x06BA, r29	; 0x8006ba <pxCurrentTCB+0x1>
 904:	c0 93 b9 06 	sts	0x06B9, r28	; 0x8006b9 <pxCurrentTCB>
 908:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <uxTaskNumber>
 90c:	8f 5f       	subi	r24, 0xFF	; 255
 90e:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <uxTaskNumber>
 912:	8e 89       	ldd	r24, Y+22	; 0x16
 914:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <uxTopReadyPriority>
 918:	98 17       	cp	r25, r24
 91a:	10 f4       	brcc	.+4      	; 0x920 <prvAddNewTaskToReadyList+0x70>
 91c:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxTopReadyPriority>
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	9c 01       	movw	r18, r24
 924:	22 0f       	add	r18, r18
 926:	33 1f       	adc	r19, r19
 928:	22 0f       	add	r18, r18
 92a:	33 1f       	adc	r19, r19
 92c:	22 0f       	add	r18, r18
 92e:	33 1f       	adc	r19, r19
 930:	82 0f       	add	r24, r18
 932:	93 1f       	adc	r25, r19
 934:	be 01       	movw	r22, r28
 936:	6e 5f       	subi	r22, 0xFE	; 254
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	84 57       	subi	r24, 0x74	; 116
 93c:	99 4f       	sbci	r25, 0xF9	; 249
 93e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <vListInsertEnd>
 942:	0f 90       	pop	r0
 944:	0f be       	out	0x3f, r0	; 63
 946:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <xSchedulerRunning>
 94a:	88 23       	and	r24, r24
 94c:	51 f0       	breq	.+20     	; 0x962 <prvAddNewTaskToReadyList+0xb2>
 94e:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 952:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 956:	96 89       	ldd	r25, Z+22	; 0x16
 958:	8e 89       	ldd	r24, Y+22	; 0x16
 95a:	98 17       	cp	r25, r24
 95c:	10 f4       	brcc	.+4      	; 0x962 <prvAddNewTaskToReadyList+0xb2>
 95e:	0e 94 c7 02 	call	0x58e	; 0x58e <vPortYield>
 962:	df 91       	pop	r29
 964:	cf 91       	pop	r28
 966:	08 95       	ret

00000968 <prvCheckTasksWaitingTermination>:
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	1c c0       	rjmp	.+56     	; 0x9a6 <prvCheckTasksWaitingTermination+0x3e>
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	f8 94       	cli
 972:	0f 92       	push	r0
 974:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <xTasksWaitingTermination+0x5>
 978:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <xTasksWaitingTermination+0x6>
 97c:	c6 81       	ldd	r28, Z+6	; 0x06
 97e:	d7 81       	ldd	r29, Z+7	; 0x07
 980:	ce 01       	movw	r24, r28
 982:	02 96       	adiw	r24, 0x02	; 2
 984:	0e 94 b0 01 	call	0x360	; 0x360 <uxListRemove>
 988:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxCurrentNumberOfTasks>
 98c:	81 50       	subi	r24, 0x01	; 1
 98e:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxCurrentNumberOfTasks>
 992:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <uxDeletedTasksWaitingCleanUp>
 996:	81 50       	subi	r24, 0x01	; 1
 998:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <uxDeletedTasksWaitingCleanUp>
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	ce 01       	movw	r24, r28
 9a2:	0e 94 9b 03 	call	0x736	; 0x736 <prvDeleteTCB>
 9a6:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <uxDeletedTasksWaitingCleanUp>
 9aa:	81 11       	cpse	r24, r1
 9ac:	e0 cf       	rjmp	.-64     	; 0x96e <prvCheckTasksWaitingTermination+0x6>
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	08 95       	ret

000009b4 <prvIdleTask>:
 9b4:	0e 94 b4 04 	call	0x968	; 0x968 <prvCheckTasksWaitingTermination>
 9b8:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <pxReadyTasksLists>
 9bc:	82 30       	cpi	r24, 0x02	; 2
 9be:	d0 f3       	brcs	.-12     	; 0x9b4 <prvIdleTask>
 9c0:	0e 94 c7 02 	call	0x58e	; 0x58e <vPortYield>
 9c4:	f7 cf       	rjmp	.-18     	; 0x9b4 <prvIdleTask>

000009c6 <prvAddCurrentTaskToDelayedList>:
 9c6:	0f 93       	push	r16
 9c8:	1f 93       	push	r17
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	ec 01       	movw	r28, r24
 9d0:	00 91 60 06 	lds	r16, 0x0660	; 0x800660 <xTickCount>
 9d4:	10 91 61 06 	lds	r17, 0x0661	; 0x800661 <xTickCount+0x1>
 9d8:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 9dc:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 9e0:	02 96       	adiw	r24, 0x02	; 2
 9e2:	0e 94 b0 01 	call	0x360	; 0x360 <uxListRemove>
 9e6:	c0 0f       	add	r28, r16
 9e8:	d1 1f       	adc	r29, r17
 9ea:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 9ee:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 9f2:	d3 83       	std	Z+3, r29	; 0x03
 9f4:	c2 83       	std	Z+2, r28	; 0x02
 9f6:	c0 17       	cp	r28, r16
 9f8:	d1 07       	cpc	r29, r17
 9fa:	68 f4       	brcc	.+26     	; 0xa16 <prvAddCurrentTaskToDelayedList+0x50>
 9fc:	60 91 b9 06 	lds	r22, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 a00:	70 91 ba 06 	lds	r23, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 a04:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <pxOverflowDelayedTaskList>
 a08:	90 91 77 06 	lds	r25, 0x0677	; 0x800677 <pxOverflowDelayedTaskList+0x1>
 a0c:	6e 5f       	subi	r22, 0xFE	; 254
 a0e:	7f 4f       	sbci	r23, 0xFF	; 255
 a10:	0e 94 7f 01 	call	0x2fe	; 0x2fe <vListInsert>
 a14:	17 c0       	rjmp	.+46     	; 0xa44 <prvAddCurrentTaskToDelayedList+0x7e>
 a16:	60 91 b9 06 	lds	r22, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 a1a:	70 91 ba 06 	lds	r23, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 a1e:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <pxDelayedTaskList>
 a22:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <pxDelayedTaskList+0x1>
 a26:	6e 5f       	subi	r22, 0xFE	; 254
 a28:	7f 4f       	sbci	r23, 0xFF	; 255
 a2a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <vListInsert>
 a2e:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <xNextTaskUnblockTime>
 a32:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <xNextTaskUnblockTime+0x1>
 a36:	c8 17       	cp	r28, r24
 a38:	d9 07       	cpc	r29, r25
 a3a:	20 f4       	brcc	.+8      	; 0xa44 <prvAddCurrentTaskToDelayedList+0x7e>
 a3c:	d0 93 58 06 	sts	0x0658, r29	; 0x800658 <xNextTaskUnblockTime+0x1>
 a40:	c0 93 57 06 	sts	0x0657, r28	; 0x800657 <xNextTaskUnblockTime>
 a44:	df 91       	pop	r29
 a46:	cf 91       	pop	r28
 a48:	1f 91       	pop	r17
 a4a:	0f 91       	pop	r16
 a4c:	08 95       	ret

00000a4e <xTaskCreate>:
 a4e:	2f 92       	push	r2
 a50:	3f 92       	push	r3
 a52:	4f 92       	push	r4
 a54:	5f 92       	push	r5
 a56:	6f 92       	push	r6
 a58:	7f 92       	push	r7
 a5a:	8f 92       	push	r8
 a5c:	9f 92       	push	r9
 a5e:	af 92       	push	r10
 a60:	bf 92       	push	r11
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	3c 01       	movw	r6, r24
 a74:	1b 01       	movw	r2, r22
 a76:	5a 01       	movw	r10, r20
 a78:	29 01       	movw	r4, r18
 a7a:	ca 01       	movw	r24, r20
 a7c:	0e 94 11 01 	call	0x222	; 0x222 <pvPortMalloc>
 a80:	6c 01       	movw	r12, r24
 a82:	89 2b       	or	r24, r25
 a84:	71 f0       	breq	.+28     	; 0xaa2 <xTaskCreate+0x54>
 a86:	86 e2       	ldi	r24, 0x26	; 38
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 11 01 	call	0x222	; 0x222 <pvPortMalloc>
 a8e:	ec 01       	movw	r28, r24
 a90:	89 2b       	or	r24, r25
 a92:	19 f0       	breq	.+6      	; 0xa9a <xTaskCreate+0x4c>
 a94:	d8 8e       	std	Y+24, r13	; 0x18
 a96:	cf 8a       	std	Y+23, r12	; 0x17
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <xTaskCreate+0x58>
 a9a:	c6 01       	movw	r24, r12
 a9c:	0e 94 4b 01 	call	0x296	; 0x296 <vPortFree>
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <xTaskCreate+0x58>
 aa2:	c0 e0       	ldi	r28, 0x00	; 0
 aa4:	d0 e0       	ldi	r29, 0x00	; 0
 aa6:	20 97       	sbiw	r28, 0x00	; 0
 aa8:	91 f0       	breq	.+36     	; 0xace <xTaskCreate+0x80>
 aaa:	95 01       	movw	r18, r10
 aac:	40 e0       	ldi	r20, 0x00	; 0
 aae:	50 e0       	ldi	r21, 0x00	; 0
 ab0:	81 2c       	mov	r8, r1
 ab2:	91 2c       	mov	r9, r1
 ab4:	5e 01       	movw	r10, r28
 ab6:	67 01       	movw	r12, r14
 ab8:	e0 2e       	mov	r14, r16
 aba:	82 01       	movw	r16, r4
 abc:	b1 01       	movw	r22, r2
 abe:	c3 01       	movw	r24, r6
 ac0:	0e 94 a8 03 	call	0x750	; 0x750 <prvInitialiseNewTask>
 ac4:	ce 01       	movw	r24, r28
 ac6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <prvAddNewTaskToReadyList>
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	01 c0       	rjmp	.+2      	; 0xad0 <xTaskCreate+0x82>
 ace:	8f ef       	ldi	r24, 0xFF	; 255
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	1f 91       	pop	r17
 ad6:	0f 91       	pop	r16
 ad8:	ff 90       	pop	r15
 ada:	ef 90       	pop	r14
 adc:	df 90       	pop	r13
 ade:	cf 90       	pop	r12
 ae0:	bf 90       	pop	r11
 ae2:	af 90       	pop	r10
 ae4:	9f 90       	pop	r9
 ae6:	8f 90       	pop	r8
 ae8:	7f 90       	pop	r7
 aea:	6f 90       	pop	r6
 aec:	5f 90       	pop	r5
 aee:	4f 90       	pop	r4
 af0:	3f 90       	pop	r3
 af2:	2f 90       	pop	r2
 af4:	08 95       	ret

00000af6 <vTaskStartScheduler>:
 af6:	ef 92       	push	r14
 af8:	ff 92       	push	r15
 afa:	0f 93       	push	r16
 afc:	0f 2e       	mov	r0, r31
 afe:	f5 e5       	ldi	r31, 0x55	; 85
 b00:	ef 2e       	mov	r14, r31
 b02:	f6 e0       	ldi	r31, 0x06	; 6
 b04:	ff 2e       	mov	r15, r31
 b06:	f0 2d       	mov	r31, r0
 b08:	00 e0       	ldi	r16, 0x00	; 0
 b0a:	20 e0       	ldi	r18, 0x00	; 0
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	45 e5       	ldi	r20, 0x55	; 85
 b10:	50 e0       	ldi	r21, 0x00	; 0
 b12:	6b e6       	ldi	r22, 0x6B	; 107
 b14:	70 e0       	ldi	r23, 0x00	; 0
 b16:	8a ed       	ldi	r24, 0xDA	; 218
 b18:	94 e0       	ldi	r25, 0x04	; 4
 b1a:	0e 94 27 05 	call	0xa4e	; 0xa4e <xTaskCreate>
 b1e:	81 30       	cpi	r24, 0x01	; 1
 b20:	81 f4       	brne	.+32     	; 0xb42 <vTaskStartScheduler+0x4c>
 b22:	f8 94       	cli
 b24:	8f ef       	ldi	r24, 0xFF	; 255
 b26:	9f ef       	ldi	r25, 0xFF	; 255
 b28:	90 93 58 06 	sts	0x0658, r25	; 0x800658 <xNextTaskUnblockTime+0x1>
 b2c:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <xNextTaskUnblockTime>
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <xSchedulerRunning>
 b36:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <xTickCount+0x1>
 b3a:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <xTickCount>
 b3e:	0e 94 98 02 	call	0x530	; 0x530 <xPortStartScheduler>
 b42:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 b46:	0f 91       	pop	r16
 b48:	ff 90       	pop	r15
 b4a:	ef 90       	pop	r14
 b4c:	08 95       	ret

00000b4e <vTaskSuspendAll>:
 b4e:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <uxSchedulerSuspended>
 b52:	8f 5f       	subi	r24, 0xFF	; 255
 b54:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <uxSchedulerSuspended>
 b58:	08 95       	ret

00000b5a <xTaskIncrementTick>:
 b5a:	df 92       	push	r13
 b5c:	ef 92       	push	r14
 b5e:	ff 92       	push	r15
 b60:	0f 93       	push	r16
 b62:	1f 93       	push	r17
 b64:	cf 93       	push	r28
 b66:	df 93       	push	r29
 b68:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <uxSchedulerSuspended>
 b6c:	81 11       	cpse	r24, r1
 b6e:	9d c0       	rjmp	.+314    	; 0xcaa <xTaskIncrementTick+0x150>
 b70:	e0 90 60 06 	lds	r14, 0x0660	; 0x800660 <xTickCount>
 b74:	f0 90 61 06 	lds	r15, 0x0661	; 0x800661 <xTickCount+0x1>
 b78:	8f ef       	ldi	r24, 0xFF	; 255
 b7a:	e8 1a       	sub	r14, r24
 b7c:	f8 0a       	sbc	r15, r24
 b7e:	f0 92 61 06 	sts	0x0661, r15	; 0x800661 <xTickCount+0x1>
 b82:	e0 92 60 06 	sts	0x0660, r14	; 0x800660 <xTickCount>
 b86:	e1 14       	cp	r14, r1
 b88:	f1 04       	cpc	r15, r1
 b8a:	b9 f4       	brne	.+46     	; 0xbba <xTaskIncrementTick+0x60>
 b8c:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <pxDelayedTaskList>
 b90:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <pxDelayedTaskList+0x1>
 b94:	20 91 76 06 	lds	r18, 0x0676	; 0x800676 <pxOverflowDelayedTaskList>
 b98:	30 91 77 06 	lds	r19, 0x0677	; 0x800677 <pxOverflowDelayedTaskList+0x1>
 b9c:	30 93 79 06 	sts	0x0679, r19	; 0x800679 <pxDelayedTaskList+0x1>
 ba0:	20 93 78 06 	sts	0x0678, r18	; 0x800678 <pxDelayedTaskList>
 ba4:	90 93 77 06 	sts	0x0677, r25	; 0x800677 <pxOverflowDelayedTaskList+0x1>
 ba8:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <pxOverflowDelayedTaskList>
 bac:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <xNumOfOverflows>
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xNumOfOverflows>
 bb6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <prvResetNextTaskUnblockTime>
 bba:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <xNextTaskUnblockTime>
 bbe:	90 91 58 06 	lds	r25, 0x0658	; 0x800658 <xNextTaskUnblockTime+0x1>
 bc2:	e8 16       	cp	r14, r24
 bc4:	f9 06       	cpc	r15, r25
 bc6:	28 f4       	brcc	.+10     	; 0xbd2 <xTaskIncrementTick+0x78>
 bc8:	d1 2c       	mov	r13, r1
 bca:	53 c0       	rjmp	.+166    	; 0xc72 <xTaskIncrementTick+0x118>
 bcc:	dd 24       	eor	r13, r13
 bce:	d3 94       	inc	r13
 bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <xTaskIncrementTick+0x7a>
 bd2:	d1 2c       	mov	r13, r1
 bd4:	e0 91 78 06 	lds	r30, 0x0678	; 0x800678 <pxDelayedTaskList>
 bd8:	f0 91 79 06 	lds	r31, 0x0679	; 0x800679 <pxDelayedTaskList+0x1>
 bdc:	80 81       	ld	r24, Z
 bde:	81 11       	cpse	r24, r1
 be0:	07 c0       	rjmp	.+14     	; 0xbf0 <xTaskIncrementTick+0x96>
 be2:	8f ef       	ldi	r24, 0xFF	; 255
 be4:	9f ef       	ldi	r25, 0xFF	; 255
 be6:	90 93 58 06 	sts	0x0658, r25	; 0x800658 <xNextTaskUnblockTime+0x1>
 bea:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <xNextTaskUnblockTime>
 bee:	41 c0       	rjmp	.+130    	; 0xc72 <xTaskIncrementTick+0x118>
 bf0:	e0 91 78 06 	lds	r30, 0x0678	; 0x800678 <pxDelayedTaskList>
 bf4:	f0 91 79 06 	lds	r31, 0x0679	; 0x800679 <pxDelayedTaskList+0x1>
 bf8:	05 80       	ldd	r0, Z+5	; 0x05
 bfa:	f6 81       	ldd	r31, Z+6	; 0x06
 bfc:	e0 2d       	mov	r30, r0
 bfe:	c6 81       	ldd	r28, Z+6	; 0x06
 c00:	d7 81       	ldd	r29, Z+7	; 0x07
 c02:	8a 81       	ldd	r24, Y+2	; 0x02
 c04:	9b 81       	ldd	r25, Y+3	; 0x03
 c06:	e8 16       	cp	r14, r24
 c08:	f9 06       	cpc	r15, r25
 c0a:	28 f4       	brcc	.+10     	; 0xc16 <xTaskIncrementTick+0xbc>
 c0c:	90 93 58 06 	sts	0x0658, r25	; 0x800658 <xNextTaskUnblockTime+0x1>
 c10:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <xNextTaskUnblockTime>
 c14:	2e c0       	rjmp	.+92     	; 0xc72 <xTaskIncrementTick+0x118>
 c16:	8e 01       	movw	r16, r28
 c18:	0e 5f       	subi	r16, 0xFE	; 254
 c1a:	1f 4f       	sbci	r17, 0xFF	; 255
 c1c:	c8 01       	movw	r24, r16
 c1e:	0e 94 b0 01 	call	0x360	; 0x360 <uxListRemove>
 c22:	8c 89       	ldd	r24, Y+20	; 0x14
 c24:	9d 89       	ldd	r25, Y+21	; 0x15
 c26:	89 2b       	or	r24, r25
 c28:	21 f0       	breq	.+8      	; 0xc32 <xTaskIncrementTick+0xd8>
 c2a:	ce 01       	movw	r24, r28
 c2c:	0c 96       	adiw	r24, 0x0c	; 12
 c2e:	0e 94 b0 01 	call	0x360	; 0x360 <uxListRemove>
 c32:	8e 89       	ldd	r24, Y+22	; 0x16
 c34:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <uxTopReadyPriority>
 c38:	98 17       	cp	r25, r24
 c3a:	10 f4       	brcc	.+4      	; 0xc40 <xTaskIncrementTick+0xe6>
 c3c:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxTopReadyPriority>
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	9c 01       	movw	r18, r24
 c44:	22 0f       	add	r18, r18
 c46:	33 1f       	adc	r19, r19
 c48:	22 0f       	add	r18, r18
 c4a:	33 1f       	adc	r19, r19
 c4c:	22 0f       	add	r18, r18
 c4e:	33 1f       	adc	r19, r19
 c50:	82 0f       	add	r24, r18
 c52:	93 1f       	adc	r25, r19
 c54:	b8 01       	movw	r22, r16
 c56:	84 57       	subi	r24, 0x74	; 116
 c58:	99 4f       	sbci	r25, 0xF9	; 249
 c5a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <vListInsertEnd>
 c5e:	9e 89       	ldd	r25, Y+22	; 0x16
 c60:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 c64:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 c68:	86 89       	ldd	r24, Z+22	; 0x16
 c6a:	98 17       	cp	r25, r24
 c6c:	08 f0       	brcs	.+2      	; 0xc70 <xTaskIncrementTick+0x116>
 c6e:	ae cf       	rjmp	.-164    	; 0xbcc <xTaskIncrementTick+0x72>
 c70:	b1 cf       	rjmp	.-158    	; 0xbd4 <xTaskIncrementTick+0x7a>
 c72:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 c76:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 c7a:	86 89       	ldd	r24, Z+22	; 0x16
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	fc 01       	movw	r30, r24
 c80:	ee 0f       	add	r30, r30
 c82:	ff 1f       	adc	r31, r31
 c84:	ee 0f       	add	r30, r30
 c86:	ff 1f       	adc	r31, r31
 c88:	ee 0f       	add	r30, r30
 c8a:	ff 1f       	adc	r31, r31
 c8c:	8e 0f       	add	r24, r30
 c8e:	9f 1f       	adc	r25, r31
 c90:	fc 01       	movw	r30, r24
 c92:	e4 57       	subi	r30, 0x74	; 116
 c94:	f9 4f       	sbci	r31, 0xF9	; 249
 c96:	80 81       	ld	r24, Z
 c98:	82 30       	cpi	r24, 0x02	; 2
 c9a:	10 f0       	brcs	.+4      	; 0xca0 <xTaskIncrementTick+0x146>
 c9c:	dd 24       	eor	r13, r13
 c9e:	d3 94       	inc	r13
 ca0:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <xYieldPending>
 ca4:	81 11       	cpse	r24, r1
 ca6:	0c c0       	rjmp	.+24     	; 0xcc0 <xTaskIncrementTick+0x166>
 ca8:	0d c0       	rjmp	.+26     	; 0xcc4 <xTaskIncrementTick+0x16a>
 caa:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <xPendedTicks>
 cae:	90 91 5d 06 	lds	r25, 0x065D	; 0x80065d <xPendedTicks+0x1>
 cb2:	01 96       	adiw	r24, 0x01	; 1
 cb4:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <xPendedTicks+0x1>
 cb8:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <xPendedTicks>
 cbc:	d1 2c       	mov	r13, r1
 cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <xTaskIncrementTick+0x16a>
 cc0:	dd 24       	eor	r13, r13
 cc2:	d3 94       	inc	r13
 cc4:	8d 2d       	mov	r24, r13
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
 cca:	1f 91       	pop	r17
 ccc:	0f 91       	pop	r16
 cce:	ff 90       	pop	r15
 cd0:	ef 90       	pop	r14
 cd2:	df 90       	pop	r13
 cd4:	08 95       	ret

00000cd6 <xTaskResumeAll>:
 cd6:	0f 93       	push	r16
 cd8:	1f 93       	push	r17
 cda:	cf 93       	push	r28
 cdc:	df 93       	push	r29
 cde:	0f b6       	in	r0, 0x3f	; 63
 ce0:	f8 94       	cli
 ce2:	0f 92       	push	r0
 ce4:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <uxSchedulerSuspended>
 ce8:	81 50       	subi	r24, 0x01	; 1
 cea:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <uxSchedulerSuspended>
 cee:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <uxSchedulerSuspended>
 cf2:	81 11       	cpse	r24, r1
 cf4:	5c c0       	rjmp	.+184    	; 0xdae <xTaskResumeAll+0xd8>
 cf6:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxCurrentNumberOfTasks>
 cfa:	81 11       	cpse	r24, r1
 cfc:	33 c0       	rjmp	.+102    	; 0xd64 <xTaskResumeAll+0x8e>
 cfe:	5a c0       	rjmp	.+180    	; 0xdb4 <xTaskResumeAll+0xde>
 d00:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <xPendingReadyList+0x5>
 d04:	f0 91 73 06 	lds	r31, 0x0673	; 0x800673 <xPendingReadyList+0x6>
 d08:	c6 81       	ldd	r28, Z+6	; 0x06
 d0a:	d7 81       	ldd	r29, Z+7	; 0x07
 d0c:	ce 01       	movw	r24, r28
 d0e:	0c 96       	adiw	r24, 0x0c	; 12
 d10:	0e 94 b0 01 	call	0x360	; 0x360 <uxListRemove>
 d14:	8e 01       	movw	r16, r28
 d16:	0e 5f       	subi	r16, 0xFE	; 254
 d18:	1f 4f       	sbci	r17, 0xFF	; 255
 d1a:	c8 01       	movw	r24, r16
 d1c:	0e 94 b0 01 	call	0x360	; 0x360 <uxListRemove>
 d20:	8e 89       	ldd	r24, Y+22	; 0x16
 d22:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <uxTopReadyPriority>
 d26:	98 17       	cp	r25, r24
 d28:	10 f4       	brcc	.+4      	; 0xd2e <xTaskResumeAll+0x58>
 d2a:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxTopReadyPriority>
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	9c 01       	movw	r18, r24
 d32:	22 0f       	add	r18, r18
 d34:	33 1f       	adc	r19, r19
 d36:	22 0f       	add	r18, r18
 d38:	33 1f       	adc	r19, r19
 d3a:	22 0f       	add	r18, r18
 d3c:	33 1f       	adc	r19, r19
 d3e:	82 0f       	add	r24, r18
 d40:	93 1f       	adc	r25, r19
 d42:	b8 01       	movw	r22, r16
 d44:	84 57       	subi	r24, 0x74	; 116
 d46:	99 4f       	sbci	r25, 0xF9	; 249
 d48:	0e 94 5e 01 	call	0x2bc	; 0x2bc <vListInsertEnd>
 d4c:	9e 89       	ldd	r25, Y+22	; 0x16
 d4e:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <pxCurrentTCB>
 d52:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <pxCurrentTCB+0x1>
 d56:	86 89       	ldd	r24, Z+22	; 0x16
 d58:	98 17       	cp	r25, r24
 d5a:	30 f0       	brcs	.+12     	; 0xd68 <xTaskResumeAll+0x92>
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <xYieldPending>
 d62:	02 c0       	rjmp	.+4      	; 0xd68 <xTaskResumeAll+0x92>
 d64:	c0 e0       	ldi	r28, 0x00	; 0
 d66:	d0 e0       	ldi	r29, 0x00	; 0
 d68:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xPendingReadyList>
 d6c:	81 11       	cpse	r24, r1
 d6e:	c8 cf       	rjmp	.-112    	; 0xd00 <xTaskResumeAll+0x2a>
 d70:	cd 2b       	or	r28, r29
 d72:	11 f0       	breq	.+4      	; 0xd78 <xTaskResumeAll+0xa2>
 d74:	0e 94 7f 03 	call	0x6fe	; 0x6fe <prvResetNextTaskUnblockTime>
 d78:	c0 91 5c 06 	lds	r28, 0x065C	; 0x80065c <xPendedTicks>
 d7c:	d0 91 5d 06 	lds	r29, 0x065D	; 0x80065d <xPendedTicks+0x1>
 d80:	20 97       	sbiw	r28, 0x00	; 0
 d82:	69 f0       	breq	.+26     	; 0xd9e <xTaskResumeAll+0xc8>
 d84:	0e 94 ad 05 	call	0xb5a	; 0xb5a <xTaskIncrementTick>
 d88:	88 23       	and	r24, r24
 d8a:	19 f0       	breq	.+6      	; 0xd92 <xTaskResumeAll+0xbc>
 d8c:	81 e0       	ldi	r24, 0x01	; 1
 d8e:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <xYieldPending>
 d92:	21 97       	sbiw	r28, 0x01	; 1
 d94:	b9 f7       	brne	.-18     	; 0xd84 <xTaskResumeAll+0xae>
 d96:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <xPendedTicks+0x1>
 d9a:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <xPendedTicks>
 d9e:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <xYieldPending>
 da2:	88 23       	and	r24, r24
 da4:	31 f0       	breq	.+12     	; 0xdb2 <xTaskResumeAll+0xdc>
 da6:	0e 94 c7 02 	call	0x58e	; 0x58e <vPortYield>
 daa:	81 e0       	ldi	r24, 0x01	; 1
 dac:	03 c0       	rjmp	.+6      	; 0xdb4 <xTaskResumeAll+0xde>
 dae:	80 e0       	ldi	r24, 0x00	; 0
 db0:	01 c0       	rjmp	.+2      	; 0xdb4 <xTaskResumeAll+0xde>
 db2:	80 e0       	ldi	r24, 0x00	; 0
 db4:	0f 90       	pop	r0
 db6:	0f be       	out	0x3f, r0	; 63
 db8:	df 91       	pop	r29
 dba:	cf 91       	pop	r28
 dbc:	1f 91       	pop	r17
 dbe:	0f 91       	pop	r16
 dc0:	08 95       	ret

00000dc2 <vTaskDelay>:
 dc2:	cf 93       	push	r28
 dc4:	df 93       	push	r29
 dc6:	ec 01       	movw	r28, r24
 dc8:	89 2b       	or	r24, r25
 dca:	49 f0       	breq	.+18     	; 0xdde <vTaskDelay+0x1c>
 dcc:	0e 94 a7 05 	call	0xb4e	; 0xb4e <vTaskSuspendAll>
 dd0:	60 e0       	ldi	r22, 0x00	; 0
 dd2:	ce 01       	movw	r24, r28
 dd4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <prvAddCurrentTaskToDelayedList>
 dd8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <xTaskResumeAll>
 ddc:	01 c0       	rjmp	.+2      	; 0xde0 <vTaskDelay+0x1e>
 dde:	80 e0       	ldi	r24, 0x00	; 0
 de0:	81 11       	cpse	r24, r1
 de2:	02 c0       	rjmp	.+4      	; 0xde8 <vTaskDelay+0x26>
 de4:	0e 94 c7 02 	call	0x58e	; 0x58e <vPortYield>
 de8:	df 91       	pop	r29
 dea:	cf 91       	pop	r28
 dec:	08 95       	ret

00000dee <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 dee:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <uxSchedulerSuspended>
 df2:	88 23       	and	r24, r24
 df4:	21 f0       	breq	.+8      	; 0xdfe <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 df6:	81 e0       	ldi	r24, 0x01	; 1
 df8:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <xYieldPending>
 dfc:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 dfe:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 e02:	20 91 5f 06 	lds	r18, 0x065F	; 0x80065f <uxTopReadyPriority>
 e06:	01 c0       	rjmp	.+2      	; 0xe0a <vTaskSwitchContext+0x1c>
 e08:	21 50       	subi	r18, 0x01	; 1
 e0a:	82 2f       	mov	r24, r18
 e0c:	90 e0       	ldi	r25, 0x00	; 0
 e0e:	fc 01       	movw	r30, r24
 e10:	ee 0f       	add	r30, r30
 e12:	ff 1f       	adc	r31, r31
 e14:	ee 0f       	add	r30, r30
 e16:	ff 1f       	adc	r31, r31
 e18:	ee 0f       	add	r30, r30
 e1a:	ff 1f       	adc	r31, r31
 e1c:	e8 0f       	add	r30, r24
 e1e:	f9 1f       	adc	r31, r25
 e20:	e4 57       	subi	r30, 0x74	; 116
 e22:	f9 4f       	sbci	r31, 0xF9	; 249
 e24:	30 81       	ld	r19, Z
 e26:	33 23       	and	r19, r19
 e28:	79 f3       	breq	.-34     	; 0xe08 <vTaskSwitchContext+0x1a>
 e2a:	ac 01       	movw	r20, r24
 e2c:	44 0f       	add	r20, r20
 e2e:	55 1f       	adc	r21, r21
 e30:	44 0f       	add	r20, r20
 e32:	55 1f       	adc	r21, r21
 e34:	44 0f       	add	r20, r20
 e36:	55 1f       	adc	r21, r21
 e38:	48 0f       	add	r20, r24
 e3a:	59 1f       	adc	r21, r25
 e3c:	df 01       	movw	r26, r30
 e3e:	01 80       	ldd	r0, Z+1	; 0x01
 e40:	f2 81       	ldd	r31, Z+2	; 0x02
 e42:	e0 2d       	mov	r30, r0
 e44:	02 80       	ldd	r0, Z+2	; 0x02
 e46:	f3 81       	ldd	r31, Z+3	; 0x03
 e48:	e0 2d       	mov	r30, r0
 e4a:	12 96       	adiw	r26, 0x02	; 2
 e4c:	fc 93       	st	X, r31
 e4e:	ee 93       	st	-X, r30
 e50:	11 97       	sbiw	r26, 0x01	; 1
 e52:	41 57       	subi	r20, 0x71	; 113
 e54:	59 4f       	sbci	r21, 0xF9	; 249
 e56:	e4 17       	cp	r30, r20
 e58:	f5 07       	cpc	r31, r21
 e5a:	29 f4       	brne	.+10     	; 0xe66 <vTaskSwitchContext+0x78>
 e5c:	42 81       	ldd	r20, Z+2	; 0x02
 e5e:	53 81       	ldd	r21, Z+3	; 0x03
 e60:	fd 01       	movw	r30, r26
 e62:	52 83       	std	Z+2, r21	; 0x02
 e64:	41 83       	std	Z+1, r20	; 0x01
 e66:	fc 01       	movw	r30, r24
 e68:	ee 0f       	add	r30, r30
 e6a:	ff 1f       	adc	r31, r31
 e6c:	ee 0f       	add	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	ee 0f       	add	r30, r30
 e72:	ff 1f       	adc	r31, r31
 e74:	8e 0f       	add	r24, r30
 e76:	9f 1f       	adc	r25, r31
 e78:	fc 01       	movw	r30, r24
 e7a:	e4 57       	subi	r30, 0x74	; 116
 e7c:	f9 4f       	sbci	r31, 0xF9	; 249
 e7e:	01 80       	ldd	r0, Z+1	; 0x01
 e80:	f2 81       	ldd	r31, Z+2	; 0x02
 e82:	e0 2d       	mov	r30, r0
 e84:	86 81       	ldd	r24, Z+6	; 0x06
 e86:	97 81       	ldd	r25, Z+7	; 0x07
 e88:	90 93 ba 06 	sts	0x06BA, r25	; 0x8006ba <pxCurrentTCB+0x1>
 e8c:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <pxCurrentTCB>
 e90:	20 93 5f 06 	sts	0x065F, r18	; 0x80065f <uxTopReadyPriority>
 e94:	08 95       	ret

00000e96 <_exit>:
 e96:	f8 94       	cli

00000e98 <__stop_program>:
 e98:	ff cf       	rjmp	.-2      	; 0xe98 <__stop_program>
