
FreeRTOS LAB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003338  08003338  00013338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08003340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f0  20000078  080033b8  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000268  080033b8  00020268  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007ed7  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000132b  00000000  00000000  00027f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000610  00000000  00000000  000292a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000548  00000000  00000000  000298b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000316b  00000000  00000000  00029e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000022ce  00000000  00000000  0002cf6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002f239  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001818  00000000  00000000  0002f2b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00030ad0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080032f0 	.word	0x080032f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080032f0 	.word	0x080032f0

08000150 <MGPIO_voidSetPinDirection>:
#include "DIO_config.h"



void MGPIO_voidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	460b      	mov	r3, r1
 800015c:	71bb      	strb	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b01      	cmp	r3, #1
 8000166:	d03a      	beq.n	80001de <MGPIO_voidSetPinDirection+0x8e>
 8000168:	2b02      	cmp	r3, #2
 800016a:	d06d      	beq.n	8000248 <MGPIO_voidSetPinDirection+0xf8>
 800016c:	2b00      	cmp	r3, #0
 800016e:	d000      	beq.n	8000172 <MGPIO_voidSetPinDirection+0x22>
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
			}
			break;
			
		default : 		break;
 8000170:	e0a4      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			if (Copy_u8Pin <= 7)
 8000172:	79bb      	ldrb	r3, [r7, #6]
 8000174:	2b07      	cmp	r3, #7
 8000176:	d815      	bhi.n	80001a4 <MGPIO_voidSetPinDirection+0x54>
				GPIOA->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000178:	4953      	ldr	r1, [pc, #332]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 800017a:	4b53      	ldr	r3, [pc, #332]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	79ba      	ldrb	r2, [r7, #6]
 8000180:	0092      	lsls	r2, r2, #2
 8000182:	200f      	movs	r0, #15
 8000184:	fa00 f202 	lsl.w	r2, r0, r2
 8000188:	43d2      	mvns	r2, r2
 800018a:	4013      	ands	r3, r2
 800018c:	600b      	str	r3, [r1, #0]
				GPIOA->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 800018e:	484e      	ldr	r0, [pc, #312]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 8000190:	4b4d      	ldr	r3, [pc, #308]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	7979      	ldrb	r1, [r7, #5]
 8000196:	79ba      	ldrb	r2, [r7, #6]
 8000198:	0092      	lsls	r2, r2, #2
 800019a:	fa01 f202 	lsl.w	r2, r1, r2
 800019e:	4313      	orrs	r3, r2
 80001a0:	6003      	str	r3, [r0, #0]
			break;
 80001a2:	e086      	b.n	80002b2 <MGPIO_voidSetPinDirection+0x162>
			else if (Copy_u8Pin <= 15)
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2b0f      	cmp	r3, #15
 80001a8:	f200 8083 	bhi.w	80002b2 <MGPIO_voidSetPinDirection+0x162>
				Copy_u8Pin -= 8;
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	3b08      	subs	r3, #8
 80001b0:	71bb      	strb	r3, [r7, #6]
				GPIOA->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 80001b2:	4945      	ldr	r1, [pc, #276]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001b4:	4b44      	ldr	r3, [pc, #272]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	79ba      	ldrb	r2, [r7, #6]
 80001ba:	0092      	lsls	r2, r2, #2
 80001bc:	200f      	movs	r0, #15
 80001be:	fa00 f202 	lsl.w	r2, r0, r2
 80001c2:	43d2      	mvns	r2, r2
 80001c4:	4013      	ands	r3, r2
 80001c6:	604b      	str	r3, [r1, #4]
				GPIOA->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 80001c8:	483f      	ldr	r0, [pc, #252]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001ca:	4b3f      	ldr	r3, [pc, #252]	; (80002c8 <MGPIO_voidSetPinDirection+0x178>)
 80001cc:	685b      	ldr	r3, [r3, #4]
 80001ce:	7979      	ldrb	r1, [r7, #5]
 80001d0:	79ba      	ldrb	r2, [r7, #6]
 80001d2:	0092      	lsls	r2, r2, #2
 80001d4:	fa01 f202 	lsl.w	r2, r1, r2
 80001d8:	4313      	orrs	r3, r2
 80001da:	6043      	str	r3, [r0, #4]
			break;
 80001dc:	e069      	b.n	80002b2 <MGPIO_voidSetPinDirection+0x162>
			if (Copy_u8Pin <= 7)
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	2b07      	cmp	r3, #7
 80001e2:	d815      	bhi.n	8000210 <MGPIO_voidSetPinDirection+0xc0>
				GPIOB->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 80001e4:	4939      	ldr	r1, [pc, #228]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001e6:	4b39      	ldr	r3, [pc, #228]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	79ba      	ldrb	r2, [r7, #6]
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	200f      	movs	r0, #15
 80001f0:	fa00 f202 	lsl.w	r2, r0, r2
 80001f4:	43d2      	mvns	r2, r2
 80001f6:	4013      	ands	r3, r2
 80001f8:	600b      	str	r3, [r1, #0]
				GPIOB->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 80001fa:	4834      	ldr	r0, [pc, #208]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001fc:	4b33      	ldr	r3, [pc, #204]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	7979      	ldrb	r1, [r7, #5]
 8000202:	79ba      	ldrb	r2, [r7, #6]
 8000204:	0092      	lsls	r2, r2, #2
 8000206:	fa01 f202 	lsl.w	r2, r1, r2
 800020a:	4313      	orrs	r3, r2
 800020c:	6003      	str	r3, [r0, #0]
			break;
 800020e:	e052      	b.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
			else if (Copy_u8Pin <= 15)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b0f      	cmp	r3, #15
 8000214:	d84f      	bhi.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
				Copy_u8Pin -= 8;
 8000216:	79bb      	ldrb	r3, [r7, #6]
 8000218:	3b08      	subs	r3, #8
 800021a:	71bb      	strb	r3, [r7, #6]
				GPIOB->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 800021c:	492b      	ldr	r1, [pc, #172]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	0092      	lsls	r2, r2, #2
 8000226:	200f      	movs	r0, #15
 8000228:	fa00 f202 	lsl.w	r2, r0, r2
 800022c:	43d2      	mvns	r2, r2
 800022e:	4013      	ands	r3, r2
 8000230:	604b      	str	r3, [r1, #4]
				GPIOB->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000234:	4b25      	ldr	r3, [pc, #148]	; (80002cc <MGPIO_voidSetPinDirection+0x17c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	7979      	ldrb	r1, [r7, #5]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0092      	lsls	r2, r2, #2
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	4313      	orrs	r3, r2
 8000244:	6043      	str	r3, [r0, #4]
			break;
 8000246:	e036      	b.n	80002b6 <MGPIO_voidSetPinDirection+0x166>
			if (Copy_u8Pin <= 7)
 8000248:	79bb      	ldrb	r3, [r7, #6]
 800024a:	2b07      	cmp	r3, #7
 800024c:	d815      	bhi.n	800027a <MGPIO_voidSetPinDirection+0x12a>
				GPIOC->CRL &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 800024e:	4920      	ldr	r1, [pc, #128]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	79ba      	ldrb	r2, [r7, #6]
 8000256:	0092      	lsls	r2, r2, #2
 8000258:	200f      	movs	r0, #15
 800025a:	fa00 f202 	lsl.w	r2, r0, r2
 800025e:	43d2      	mvns	r2, r2
 8000260:	4013      	ands	r3, r2
 8000262:	600b      	str	r3, [r1, #0]
				GPIOC->CRL |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	7979      	ldrb	r1, [r7, #5]
 800026c:	79ba      	ldrb	r2, [r7, #6]
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4313      	orrs	r3, r2
 8000276:	6003      	str	r3, [r0, #0]
			break;
 8000278:	e01f      	b.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
			else if (Copy_u8Pin <= 15)
 800027a:	79bb      	ldrb	r3, [r7, #6]
 800027c:	2b0f      	cmp	r3, #15
 800027e:	d81c      	bhi.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
				Copy_u8Pin -= 8;
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	3b08      	subs	r3, #8
 8000284:	71bb      	strb	r3, [r7, #6]
				GPIOC->CRH &= ~((0XF) << (Copy_u8Pin*4));			// Clear 4 bits mode of the pin
 8000286:	4912      	ldr	r1, [pc, #72]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	79ba      	ldrb	r2, [r7, #6]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	200f      	movs	r0, #15
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	43d2      	mvns	r2, r2
 8000298:	4013      	ands	r3, r2
 800029a:	604b      	str	r3, [r1, #4]
				GPIOC->CRH |= ((Copy_u8Mode) << (Copy_u8Pin*4));	// Set pin mode
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MGPIO_voidSetPinDirection+0x180>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	7979      	ldrb	r1, [r7, #5]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	0092      	lsls	r2, r2, #2
 80002a8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ac:	4313      	orrs	r3, r2
 80002ae:	6043      	str	r3, [r0, #4]
			break;
 80002b0:	e003      	b.n	80002ba <MGPIO_voidSetPinDirection+0x16a>
			break;
 80002b2:	bf00      	nop
 80002b4:	e002      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			break;
 80002b6:	bf00      	nop
 80002b8:	e000      	b.n	80002bc <MGPIO_voidSetPinDirection+0x16c>
			break;
 80002ba:	bf00      	nop
	}
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	40011000 	.word	0x40011000

080002d4 <MGPIO_voidSetPinValue>:


void MGPIO_voidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	460b      	mov	r3, r1
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	4613      	mov	r3, r2
 80002e4:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d018      	beq.n	800031e <MGPIO_voidSetPinValue+0x4a>
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d02a      	beq.n	8000346 <MGPIO_voidSetPinValue+0x72>
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d000      	beq.n	80002f6 <MGPIO_voidSetPinValue+0x22>
				{
					GPIOC->BSRR = (1 << Copy_u8Pin);
				}
				break;

			default : 		break;
 80002f4:	e040      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				if (Copy_u8Value == GPIO_LOW)
 80002f6:	797b      	ldrb	r3, [r7, #5]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d106      	bne.n	800030a <MGPIO_voidSetPinValue+0x36>
					GPIOA->BRR = (1 << Copy_u8Pin);
 80002fc:	4a21      	ldr	r2, [pc, #132]	; (8000384 <MGPIO_voidSetPinValue+0xb0>)
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	6153      	str	r3, [r2, #20]
				break;
 8000308:	e031      	b.n	800036e <MGPIO_voidSetPinValue+0x9a>
				else if (Copy_u8Value == GPIO_HIGH)
 800030a:	797b      	ldrb	r3, [r7, #5]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d12e      	bne.n	800036e <MGPIO_voidSetPinValue+0x9a>
					GPIOA->BSRR = (1 << Copy_u8Pin);
 8000310:	4a1c      	ldr	r2, [pc, #112]	; (8000384 <MGPIO_voidSetPinValue+0xb0>)
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2101      	movs	r1, #1
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	6113      	str	r3, [r2, #16]
				break;
 800031c:	e027      	b.n	800036e <MGPIO_voidSetPinValue+0x9a>
				if (Copy_u8Value == GPIO_LOW)
 800031e:	797b      	ldrb	r3, [r7, #5]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d106      	bne.n	8000332 <MGPIO_voidSetPinValue+0x5e>
					GPIOB->BRR = (1 << Copy_u8Pin);
 8000324:	4a18      	ldr	r2, [pc, #96]	; (8000388 <MGPIO_voidSetPinValue+0xb4>)
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	2101      	movs	r1, #1
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	6153      	str	r3, [r2, #20]
				break;
 8000330:	e01f      	b.n	8000372 <MGPIO_voidSetPinValue+0x9e>
				else if (Copy_u8Value == GPIO_HIGH)
 8000332:	797b      	ldrb	r3, [r7, #5]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d11c      	bne.n	8000372 <MGPIO_voidSetPinValue+0x9e>
					GPIOB->BSRR = (1 << Copy_u8Pin);
 8000338:	4a13      	ldr	r2, [pc, #76]	; (8000388 <MGPIO_voidSetPinValue+0xb4>)
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	2101      	movs	r1, #1
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	6113      	str	r3, [r2, #16]
				break;
 8000344:	e015      	b.n	8000372 <MGPIO_voidSetPinValue+0x9e>
				if (Copy_u8Value == GPIO_LOW)
 8000346:	797b      	ldrb	r3, [r7, #5]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d106      	bne.n	800035a <MGPIO_voidSetPinValue+0x86>
					GPIOC->BRR = (1 << Copy_u8Pin);
 800034c:	4a0f      	ldr	r2, [pc, #60]	; (800038c <MGPIO_voidSetPinValue+0xb8>)
 800034e:	79bb      	ldrb	r3, [r7, #6]
 8000350:	2101      	movs	r1, #1
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	6153      	str	r3, [r2, #20]
				break;
 8000358:	e00d      	b.n	8000376 <MGPIO_voidSetPinValue+0xa2>
				else if (Copy_u8Value == GPIO_HIGH)
 800035a:	797b      	ldrb	r3, [r7, #5]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d10a      	bne.n	8000376 <MGPIO_voidSetPinValue+0xa2>
					GPIOC->BSRR = (1 << Copy_u8Pin);
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <MGPIO_voidSetPinValue+0xb8>)
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2101      	movs	r1, #1
 8000366:	fa01 f303 	lsl.w	r3, r1, r3
 800036a:	6113      	str	r3, [r2, #16]
				break;
 800036c:	e003      	b.n	8000376 <MGPIO_voidSetPinValue+0xa2>
				break;
 800036e:	bf00      	nop
 8000370:	e002      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				break;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <MGPIO_voidSetPinValue+0xa4>
				break;
 8000376:	bf00      	nop
		}
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40011000 	.word	0x40011000

08000390 <MRCC_voidInitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"


void MRCC_voidInitSysClock(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	/* clear registers */
	RCC_CFGR = 0;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MRCC_voidInitSysClock+0x28>)
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
	RCC_CR = 0;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MRCC_voidInitSysClock+0x2c>)
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]

	#if		RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
		RCC_CR = 0X00010000;								/* Enable HSE with no bypass */
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MRCC_voidInitSysClock+0x2c>)
 80003a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003a6:	601a      	str	r2, [r3, #0]
		RCC_CFGR = 0X00000001;								/* Select system clock switch */
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <MRCC_voidInitSysClock+0x28>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	601a      	str	r2, [r3, #0]
			#error("you entered non valid value")
		#endif
	#else
		#error("you entered non valid clock type")
	#endif
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40021004 	.word	0x40021004
 80003bc:	40021000 	.word	0x40021000

080003c0 <MRCC_voidEnableClock>:


void MRCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	460a      	mov	r2, r1
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	4613      	mov	r3, r2
 80003ce:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	2b1f      	cmp	r3, #31
 80003d4:	d825      	bhi.n	8000422 <MRCC_voidEnableClock+0x62>
	{
		switch (Copy_u8BusId)
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b01      	cmp	r3, #1
 80003da:	d00e      	beq.n	80003fa <MRCC_voidEnableClock+0x3a>
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d016      	beq.n	800040e <MRCC_voidEnableClock+0x4e>
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d000      	beq.n	80003e6 <MRCC_voidEnableClock+0x26>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
				break;
				
			default        : 
				/* Return error */ 
				break;
 80003e4:	e01d      	b.n	8000422 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_AHBENR,Copy_u8PerId);
 80003e6:	4911      	ldr	r1, [pc, #68]	; (800042c <MRCC_voidEnableClock+0x6c>)
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <MRCC_voidEnableClock+0x6c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	79ba      	ldrb	r2, [r7, #6]
 80003ee:	2001      	movs	r0, #1
 80003f0:	fa00 f202 	lsl.w	r2, r0, r2
 80003f4:	4313      	orrs	r3, r2
 80003f6:	600b      	str	r3, [r1, #0]
				break;
 80003f8:	e013      	b.n	8000422 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB1ENR,Copy_u8PerId);
 80003fa:	490d      	ldr	r1, [pc, #52]	; (8000430 <MRCC_voidEnableClock+0x70>)
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MRCC_voidEnableClock+0x70>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	2001      	movs	r0, #1
 8000404:	fa00 f202 	lsl.w	r2, r0, r2
 8000408:	4313      	orrs	r3, r2
 800040a:	600b      	str	r3, [r1, #0]
				break;
 800040c:	e009      	b.n	8000422 <MRCC_voidEnableClock+0x62>
				SET_BIT(RCC_APB2ENR,Copy_u8PerId);
 800040e:	4909      	ldr	r1, [pc, #36]	; (8000434 <MRCC_voidEnableClock+0x74>)
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MRCC_voidEnableClock+0x74>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	79ba      	ldrb	r2, [r7, #6]
 8000416:	2001      	movs	r0, #1
 8000418:	fa00 f202 	lsl.w	r2, r0, r2
 800041c:	4313      	orrs	r3, r2
 800041e:	600b      	str	r3, [r1, #0]
				break;
 8000420:	bf00      	nop
	
	else
	{
		/* Return error */
	}
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021014 	.word	0x40021014
 8000430:	4002101c 	.word	0x4002101c
 8000434:	40021018 	.word	0x40021018

08000438 <SEVSEG_voidInit>:
#include "SEVSEG_config.h"



void SEVSEG_voidInit(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinDirection(SEVSEG1_PINA , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800043c:	2201      	movs	r2, #1
 800043e:	2100      	movs	r1, #0
 8000440:	2000      	movs	r0, #0
 8000442:	f7ff fe85 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PINB , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000446:	2201      	movs	r2, #1
 8000448:	2101      	movs	r1, #1
 800044a:	2000      	movs	r0, #0
 800044c:	f7ff fe80 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PINC , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000450:	2201      	movs	r2, #1
 8000452:	2102      	movs	r1, #2
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff fe7b 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PIND , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800045a:	2201      	movs	r2, #1
 800045c:	2103      	movs	r1, #3
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff fe76 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PINE , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000464:	2201      	movs	r2, #1
 8000466:	2104      	movs	r1, #4
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff fe71 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PINF , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800046e:	2201      	movs	r2, #1
 8000470:	2105      	movs	r1, #5
 8000472:	2000      	movs	r0, #0
 8000474:	f7ff fe6c 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG1_PING , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000478:	2201      	movs	r2, #1
 800047a:	2106      	movs	r1, #6
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe67 	bl	8000150 <MGPIO_voidSetPinDirection>

	MGPIO_voidSetPinDirection(SEVSEG2_PINA , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000482:	2201      	movs	r2, #1
 8000484:	2100      	movs	r1, #0
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff fe62 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PINB , GPIO_OUTPUT_SPEED_10MHZ_PP);
 800048c:	2201      	movs	r2, #1
 800048e:	2101      	movs	r1, #1
 8000490:	2001      	movs	r0, #1
 8000492:	f7ff fe5d 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PINC , GPIO_OUTPUT_SPEED_10MHZ_PP);
 8000496:	2201      	movs	r2, #1
 8000498:	2105      	movs	r1, #5
 800049a:	2001      	movs	r0, #1
 800049c:	f7ff fe58 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PIND , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2106      	movs	r1, #6
 80004a4:	2001      	movs	r0, #1
 80004a6:	f7ff fe53 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PINE , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2107      	movs	r1, #7
 80004ae:	2001      	movs	r0, #1
 80004b0:	f7ff fe4e 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PINF , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2108      	movs	r1, #8
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff fe49 	bl	8000150 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(SEVSEG2_PING , GPIO_OUTPUT_SPEED_10MHZ_PP);
 80004be:	2201      	movs	r2, #1
 80004c0:	2109      	movs	r1, #9
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff fe44 	bl	8000150 <MGPIO_voidSetPinDirection>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <SEVSEG1_voidDisplay>:



void SEVSEG1_voidDisplay(u8 Copy_u8Num)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Bit[7] = {0} ;
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	f8c3 2003 	str.w	r2, [r3, #3]
	u8 Local_u8Index = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	73fb      	strb	r3, [r7, #15]
	switch (SEVSEG_TYPE)
	{
		case COMMON_CATHODE_SEVSEG :
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	e013      	b.n	8000514 <SEVSEG1_voidDisplay+0x48>
			{
				Local_u8Bit[Local_u8Index] = GET_BIT(array_val[Copy_u8Num] , Local_u8Index);
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	79fa      	ldrb	r2, [r7, #7]
 80004f0:	4921      	ldr	r1, [pc, #132]	; (8000578 <SEVSEG1_voidDisplay+0xac>)
 80004f2:	5c8a      	ldrb	r2, [r1, r2]
 80004f4:	4611      	mov	r1, r2
 80004f6:	7bfa      	ldrb	r2, [r7, #15]
 80004f8:	fa41 f202 	asr.w	r2, r1, r2
 80004fc:	b2d2      	uxtb	r2, r2
 80004fe:	f002 0201 	and.w	r2, r2, #1
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	f107 0110 	add.w	r1, r7, #16
 8000508:	440b      	add	r3, r1
 800050a:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	3301      	adds	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b06      	cmp	r3, #6
 8000518:	d9e8      	bls.n	80004ec <SEVSEG1_voidDisplay+0x20>
			}
			
			MGPIO_voidSetPinValue(SEVSEG1_PINA , Local_u8Bit[0]) ;
 800051a:	7a3b      	ldrb	r3, [r7, #8]
 800051c:	461a      	mov	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff fed7 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PINB , Local_u8Bit[1]) ;
 8000526:	7a7b      	ldrb	r3, [r7, #9]
 8000528:	461a      	mov	r2, r3
 800052a:	2101      	movs	r1, #1
 800052c:	2000      	movs	r0, #0
 800052e:	f7ff fed1 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PINC , Local_u8Bit[2]) ;
 8000532:	7abb      	ldrb	r3, [r7, #10]
 8000534:	461a      	mov	r2, r3
 8000536:	2102      	movs	r1, #2
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff fecb 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PIND , Local_u8Bit[3]) ;
 800053e:	7afb      	ldrb	r3, [r7, #11]
 8000540:	461a      	mov	r2, r3
 8000542:	2103      	movs	r1, #3
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff fec5 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PINE , Local_u8Bit[4]) ;
 800054a:	7b3b      	ldrb	r3, [r7, #12]
 800054c:	461a      	mov	r2, r3
 800054e:	2104      	movs	r1, #4
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff febf 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PINF , Local_u8Bit[5]) ;
 8000556:	7b7b      	ldrb	r3, [r7, #13]
 8000558:	461a      	mov	r2, r3
 800055a:	2105      	movs	r1, #5
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff feb9 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG1_PING , Local_u8Bit[6]) ;
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	461a      	mov	r2, r3
 8000566:	2106      	movs	r1, #6
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff feb3 	bl	80002d4 <MGPIO_voidSetPinValue>
			break;
 800056e:	bf00      	nop
			MGPIO_voidSetPinValue(SEVSEG1_PING , Local_u8Bit[6]) ;
			break;
		
		default : 			break;
	}
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000000 	.word	0x20000000

0800057c <SEVSEG2_voidDisplay>:




void SEVSEG2_voidDisplay(u8 Copy_u8Num)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Bit[7] = {0} ;
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	f8c3 2003 	str.w	r2, [r3, #3]
	u8 Local_u8Index = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]
	switch (SEVSEG_TYPE)
	{
		case COMMON_CATHODE_SEVSEG :
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 8000596:	2300      	movs	r3, #0
 8000598:	73fb      	strb	r3, [r7, #15]
 800059a:	e013      	b.n	80005c4 <SEVSEG2_voidDisplay+0x48>
			{
				Local_u8Bit[Local_u8Index] = GET_BIT(array_val[Copy_u8Num] , Local_u8Index);
 800059c:	7bfb      	ldrb	r3, [r7, #15]
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	4921      	ldr	r1, [pc, #132]	; (8000628 <SEVSEG2_voidDisplay+0xac>)
 80005a2:	5c8a      	ldrb	r2, [r1, r2]
 80005a4:	4611      	mov	r1, r2
 80005a6:	7bfa      	ldrb	r2, [r7, #15]
 80005a8:	fa41 f202 	asr.w	r2, r1, r2
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	f002 0201 	and.w	r2, r2, #1
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	f107 0110 	add.w	r1, r7, #16
 80005b8:	440b      	add	r3, r1
 80005ba:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (Local_u8Index=0 ; Local_u8Index<7 ; Local_u8Index++)
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	3301      	adds	r3, #1
 80005c2:	73fb      	strb	r3, [r7, #15]
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	2b06      	cmp	r3, #6
 80005c8:	d9e8      	bls.n	800059c <SEVSEG2_voidDisplay+0x20>
			}

			MGPIO_voidSetPinValue(SEVSEG2_PINA , Local_u8Bit[0]) ;
 80005ca:	7a3b      	ldrb	r3, [r7, #8]
 80005cc:	461a      	mov	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	2001      	movs	r0, #1
 80005d2:	f7ff fe7f 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PINB , Local_u8Bit[1]) ;
 80005d6:	7a7b      	ldrb	r3, [r7, #9]
 80005d8:	461a      	mov	r2, r3
 80005da:	2101      	movs	r1, #1
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fe79 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PINC , Local_u8Bit[2]) ;
 80005e2:	7abb      	ldrb	r3, [r7, #10]
 80005e4:	461a      	mov	r2, r3
 80005e6:	2105      	movs	r1, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff fe73 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PIND , Local_u8Bit[3]) ;
 80005ee:	7afb      	ldrb	r3, [r7, #11]
 80005f0:	461a      	mov	r2, r3
 80005f2:	2106      	movs	r1, #6
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff fe6d 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PINE , Local_u8Bit[4]) ;
 80005fa:	7b3b      	ldrb	r3, [r7, #12]
 80005fc:	461a      	mov	r2, r3
 80005fe:	2107      	movs	r1, #7
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff fe67 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PINF , Local_u8Bit[5]) ;
 8000606:	7b7b      	ldrb	r3, [r7, #13]
 8000608:	461a      	mov	r2, r3
 800060a:	2108      	movs	r1, #8
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff fe61 	bl	80002d4 <MGPIO_voidSetPinValue>
			MGPIO_voidSetPinValue(SEVSEG2_PING , Local_u8Bit[6]) ;
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	461a      	mov	r2, r3
 8000616:	2109      	movs	r1, #9
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff fe5b 	bl	80002d4 <MGPIO_voidSetPinValue>
			break;
 800061e:	bf00      	nop
			MGPIO_voidSetPinValue(SEVSEG2_PING , Local_u8Bit[6]) ;
			break;

		default : 			break;
	}
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000000 	.word	0x20000000

0800062c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8000634:	f001 fc8c 	bl	8001f50 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f002 fd6b 	bl	8003114 <malloc>
 800063e:	4603      	mov	r3, r0
 8000640:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000642:	f001 fc93 	bl	8001f6c <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8000646:	68fb      	ldr	r3, [r7, #12]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    if( pv )
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800065e:	f001 fc77 	bl	8001f50 <vTaskSuspendAll>
        {
            free( pv );
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f002 fd5e 	bl	8003124 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8000668:	f001 fc80 	bl	8001f6c <xTaskResumeAll>
    }
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f103 0208 	add.w	r2, r3, #8
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f103 0208 	add.w	r2, r3, #8
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f103 0208 	add.w	r2, r3, #8
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80006ca:	b480      	push	{r7}
 80006cc:	b085      	sub	sp, #20
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000726:	d103      	bne.n	8000730 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	e00c      	b.n	800074a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3308      	adds	r3, #8
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e002      	b.n	800073e <vListInsert+0x2e>
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	429a      	cmp	r2, r3
 8000748:	d9f6      	bls.n	8000738 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6892      	ldr	r2, [r2, #8]
 8000796:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	6852      	ldr	r2, [r2, #4]
 80007a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d103      	bne.n	80007b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
	...

080007d4 <main>:
void system_init(void);



int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
	system_init();
 80007da:	f000 f857 	bl	800088c <system_init>



	/* create semaphores */
	SevSeg_1 = xSemaphoreCreateMutex();
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 fc0f 	bl	8001002 <xQueueCreateMutex>
 80007e4:	4602      	mov	r2, r0
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <main+0x80>)
 80007e8:	601a      	str	r2, [r3, #0]
	SevSeg_2 = xSemaphoreCreateMutex();
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 fc09 	bl	8001002 <xQueueCreateMutex>
 80007f0:	4602      	mov	r2, r0
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <main+0x84>)
 80007f4:	601a      	str	r2, [r3, #0]
	/* create tasks */

	BaseType_t task1_ret , task2_ret , task3_ret , task4_ret;

	task1_ret = xTaskCreate(task1,"task1",configMINIMAL_STACK_SIZE,NULL,TASK1_PRIORITY,&task1_handle);
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <main+0x88>)
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	2304      	movs	r3, #4
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	2246      	movs	r2, #70	; 0x46
 8000802:	4917      	ldr	r1, [pc, #92]	; (8000860 <main+0x8c>)
 8000804:	4817      	ldr	r0, [pc, #92]	; (8000864 <main+0x90>)
 8000806:	f001 f9e7 	bl	8001bd8 <xTaskCreate>
 800080a:	60f8      	str	r0, [r7, #12]
	task2_ret = xTaskCreate(task2,"task2",configMINIMAL_STACK_SIZE,NULL,TASK2_PRIORITY,&task2_handle);
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <main+0x94>)
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	2304      	movs	r3, #4
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	2246      	movs	r2, #70	; 0x46
 8000818:	4914      	ldr	r1, [pc, #80]	; (800086c <main+0x98>)
 800081a:	4815      	ldr	r0, [pc, #84]	; (8000870 <main+0x9c>)
 800081c:	f001 f9dc 	bl	8001bd8 <xTaskCreate>
 8000820:	60b8      	str	r0, [r7, #8]
	task3_ret = xTaskCreate(task3,"task3",configMINIMAL_STACK_SIZE,NULL,TASK3_PRIORITY,&task3_handle);
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <main+0xa0>)
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	2304      	movs	r3, #4
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2300      	movs	r3, #0
 800082c:	2246      	movs	r2, #70	; 0x46
 800082e:	4912      	ldr	r1, [pc, #72]	; (8000878 <main+0xa4>)
 8000830:	4812      	ldr	r0, [pc, #72]	; (800087c <main+0xa8>)
 8000832:	f001 f9d1 	bl	8001bd8 <xTaskCreate>
 8000836:	6078      	str	r0, [r7, #4]
	task4_ret = xTaskCreate(task4,"task4",configMINIMAL_STACK_SIZE,NULL,TASK4_PRIORITY,&task4_handle);
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <main+0xac>)
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	2304      	movs	r3, #4
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2300      	movs	r3, #0
 8000842:	2246      	movs	r2, #70	; 0x46
 8000844:	490f      	ldr	r1, [pc, #60]	; (8000884 <main+0xb0>)
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <main+0xb4>)
 8000848:	f001 f9c6 	bl	8001bd8 <xTaskCreate>
 800084c:	6038      	str	r0, [r7, #0]
	if(task4_ret == pdTRUE)
	{
		/* task4 created successfully */
	}

	vTaskStartScheduler();
 800084e:	f001 fb2f 	bl	8001eb0 <vTaskStartScheduler>

	for( ;; );
 8000852:	e7fe      	b.n	8000852 <main+0x7e>
 8000854:	200000a4 	.word	0x200000a4
 8000858:	200000a8 	.word	0x200000a8
 800085c:	20000094 	.word	0x20000094
 8000860:	08003308 	.word	0x08003308
 8000864:	080008ad 	.word	0x080008ad
 8000868:	20000098 	.word	0x20000098
 800086c:	08003310 	.word	0x08003310
 8000870:	08000929 	.word	0x08000929
 8000874:	2000009c 	.word	0x2000009c
 8000878:	08003318 	.word	0x08003318
 800087c:	08000975 	.word	0x08000975
 8000880:	200000a0 	.word	0x200000a0
 8000884:	08003320 	.word	0x08003320
 8000888:	080009f1 	.word	0x080009f1

0800088c <system_init>:
}



void system_init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	/* Enable external crystal clock 8 mHZ */
	MRCC_voidInitSysClock();
 8000890:	f7ff fd7e 	bl	8000390 <MRCC_voidInitSysClock>
	/* Enable portA clock */
	MRCC_voidEnableClock(RCC_APB2 , IOPAEN);
 8000894:	2102      	movs	r1, #2
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff fd92 	bl	80003c0 <MRCC_voidEnableClock>
	/* Enable portB clock */
	MRCC_voidEnableClock(RCC_APB2 , IOPBEN);
 800089c:	2103      	movs	r1, #3
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff fd8e 	bl	80003c0 <MRCC_voidEnableClock>
	/* initialize 7-segment */
	SEVSEG_voidInit();
 80008a4:	f7ff fdc8 	bl	8000438 <SEVSEG_voidInit>
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <task1>:



void task1(void *pvParameter)
{
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	char num = 1 ;
 80008b4:	2301      	movs	r3, #1
 80008b6:	73fb      	strb	r3, [r7, #15]
	BaseType_t ret = pdFALSE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		ret = xSemaphoreTake(SevSeg_1,portMAX_DELAY);
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <task1+0x74>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fe31 	bl	800152c <xQueueSemaphoreTake>
 80008ca:	60b8      	str	r0, [r7, #8]

		if(ret == pdTRUE)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d121      	bne.n	8000916 <task1+0x6a>
		{
			SEVSEG1_voidDisplay(num);
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fdf9 	bl	80004cc <SEVSEG1_voidDisplay>

			/* software delay */
			for(u64 i=0 ; i< 350000 ; i++);
 80008da:	f04f 0300 	mov.w	r3, #0
 80008de:	f04f 0400 	mov.w	r4, #0
 80008e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80008e6:	e006      	b.n	80008f6 <task1+0x4a>
 80008e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008ec:	3301      	adds	r3, #1
 80008ee:	f144 0400 	adc.w	r4, r4, #0
 80008f2:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80008f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008fa:	490a      	ldr	r1, [pc, #40]	; (8000924 <task1+0x78>)
 80008fc:	f04f 0200 	mov.w	r2, #0
 8000900:	42a2      	cmp	r2, r4
 8000902:	bf08      	it	eq
 8000904:	4299      	cmpeq	r1, r3
 8000906:	d2ef      	bcs.n	80008e8 <task1+0x3c>

			xSemaphoreGive(SevSeg_1);
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <task1+0x74>)
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	f000 fb8f 	bl	8001034 <xQueueGenericSend>

		}

		vTaskDelay(500);
 8000916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091a:	f001 fa95 	bl	8001e48 <vTaskDelay>
		ret = xSemaphoreTake(SevSeg_1,portMAX_DELAY);
 800091e:	e7cd      	b.n	80008bc <task1+0x10>
 8000920:	200000a4 	.word	0x200000a4
 8000924:	0005572f 	.word	0x0005572f

08000928 <task2>:
}



void task2(void *pvParameter)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	char num = 2 ;
 8000930:	2302      	movs	r3, #2
 8000932:	73fb      	strb	r3, [r7, #15]
	BaseType_t ret = pdFALSE;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		ret = xSemaphoreTake(SevSeg_1,portMAX_DELAY);
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <task2+0x48>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fdf3 	bl	800152c <xQueueSemaphoreTake>
 8000946:	60b8      	str	r0, [r7, #8]

		if(ret == pdTRUE)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d10a      	bne.n	8000964 <task2+0x3c>
		{
			SEVSEG1_voidDisplay(num);
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fdbb 	bl	80004cc <SEVSEG1_voidDisplay>

			/* software delay */
			//for(u64 i=0 ; i< 350000 ; i++);

			xSemaphoreGive(SevSeg_1);
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <task2+0x48>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	f000 fb68 	bl	8001034 <xQueueGenericSend>

		}

		vTaskDelay(500);
 8000964:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000968:	f001 fa6e 	bl	8001e48 <vTaskDelay>
		ret = xSemaphoreTake(SevSeg_1,portMAX_DELAY);
 800096c:	e7e4      	b.n	8000938 <task2+0x10>
 800096e:	bf00      	nop
 8000970:	200000a4 	.word	0x200000a4

08000974 <task3>:
}



void task3(void *pvParameter)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b087      	sub	sp, #28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	char num = 3 ;
 800097c:	2303      	movs	r3, #3
 800097e:	73fb      	strb	r3, [r7, #15]
	BaseType_t ret = pdFALSE;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		ret = xSemaphoreTake(SevSeg_2,portMAX_DELAY);
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <task3+0x74>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fdcd 	bl	800152c <xQueueSemaphoreTake>
 8000992:	60b8      	str	r0, [r7, #8]

		if(ret == pdTRUE)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d121      	bne.n	80009de <task3+0x6a>
		{
			SEVSEG2_voidDisplay(num);
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fded 	bl	800057c <SEVSEG2_voidDisplay>

			/* software delay */
			for(u64 i=0 ; i< 350000 ; i++);
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	f04f 0400 	mov.w	r4, #0
 80009aa:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80009ae:	e006      	b.n	80009be <task3+0x4a>
 80009b0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80009b4:	3301      	adds	r3, #1
 80009b6:	f144 0400 	adc.w	r4, r4, #0
 80009ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80009be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80009c2:	490a      	ldr	r1, [pc, #40]	; (80009ec <task3+0x78>)
 80009c4:	f04f 0200 	mov.w	r2, #0
 80009c8:	42a2      	cmp	r2, r4
 80009ca:	bf08      	it	eq
 80009cc:	4299      	cmpeq	r1, r3
 80009ce:	d2ef      	bcs.n	80009b0 <task3+0x3c>

			xSemaphoreGive(SevSeg_2);
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <task3+0x74>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	2300      	movs	r3, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	f000 fb2b 	bl	8001034 <xQueueGenericSend>

		}

		vTaskDelay(500);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f001 fa31 	bl	8001e48 <vTaskDelay>
		ret = xSemaphoreTake(SevSeg_2,portMAX_DELAY);
 80009e6:	e7cd      	b.n	8000984 <task3+0x10>
 80009e8:	200000a8 	.word	0x200000a8
 80009ec:	0005572f 	.word	0x0005572f

080009f0 <task4>:
}



void task4(void *pvParameter)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	char num = 4 ;
 80009f8:	2304      	movs	r3, #4
 80009fa:	73fb      	strb	r3, [r7, #15]
	BaseType_t ret = pdFALSE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		ret = xSemaphoreTake(SevSeg_2,portMAX_DELAY);
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <task4+0x48>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fd8f 	bl	800152c <xQueueSemaphoreTake>
 8000a0e:	60b8      	str	r0, [r7, #8]

		if(ret == pdTRUE)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10a      	bne.n	8000a2c <task4+0x3c>
		{
			SEVSEG2_voidDisplay(num);
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fdaf 	bl	800057c <SEVSEG2_voidDisplay>

			/* software delay */
			//for(u64 i=0 ; i< 350000 ; i++);

			xSemaphoreGive(SevSeg_2);
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <task4+0x48>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	2300      	movs	r3, #0
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	f000 fb04 	bl	8001034 <xQueueGenericSend>

		}

		vTaskDelay(500);
 8000a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a30:	f001 fa0a 	bl	8001e48 <vTaskDelay>
		ret = xSemaphoreTake(SevSeg_2,portMAX_DELAY);
 8000a34:	e7e4      	b.n	8000a00 <task4+0x10>
 8000a36:	bf00      	nop
 8000a38:	200000a8 	.word	0x200000a8

08000a3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3b04      	subs	r3, #4
 8000a5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f023 0201 	bic.w	r2, r3, #1
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3b04      	subs	r3, #4
 8000a6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000a6c:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <pxPortInitialiseStack+0x54>)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3b14      	subs	r3, #20
 8000a76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3b20      	subs	r3, #32
 8000a82:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000a84:	68fb      	ldr	r3, [r7, #12]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	08000a95 	.word	0x08000a95

08000a94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <prvTaskExitError+0x4c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa6:	d009      	beq.n	8000abc <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aac:	f383 8811 	msr	BASEPRI, r3
 8000ab0:	f3bf 8f6f 	isb	sy
 8000ab4:	f3bf 8f4f 	dsb	sy
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	e7fe      	b.n	8000aba <prvTaskExitError+0x26>
 8000abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac0:	f383 8811 	msr	BASEPRI, r3
 8000ac4:	f3bf 8f6f 	isb	sy
 8000ac8:	f3bf 8f4f 	dsb	sy
 8000acc:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000ace:	bf00      	nop
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0fc      	beq.n	8000ad0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	2000000c 	.word	0x2000000c
	...

08000af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <pxCurrentTCBConst2>)
 8000af2:	6819      	ldr	r1, [r3, #0]
 8000af4:	6808      	ldr	r0, [r1, #0]
 8000af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000afa:	f380 8809 	msr	PSP, r0
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	f04f 0000 	mov.w	r0, #0
 8000b06:	f380 8811 	msr	BASEPRI, r0
 8000b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000b0e:	4770      	bx	lr

08000b10 <pxCurrentTCBConst2>:
 8000b10:	200000b4 	.word	0x200000b4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop

08000b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <prvPortStartFirstTask+0x1c>)
 8000b1a:	6800      	ldr	r0, [r0, #0]
 8000b1c:	6800      	ldr	r0, [r0, #0]
 8000b1e:	f380 8808 	msr	MSP, r0
 8000b22:	b662      	cpsie	i
 8000b24:	b661      	cpsie	f
 8000b26:	f3bf 8f4f 	dsb	sy
 8000b2a:	f3bf 8f6f 	isb	sy
 8000b2e:	df00      	svc	0
 8000b30:	bf00      	nop
 8000b32:	0000      	.short	0x0000
 8000b34:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop

08000b3c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <xPortStartScheduler+0xcc>)
 8000b44:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	22ff      	movs	r2, #255	; 0xff
 8000b52:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <xPortStartScheduler+0xd0>)
 8000b68:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <xPortStartScheduler+0xd4>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000b70:	e009      	b.n	8000b86 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <xPortStartScheduler+0xd4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <xPortStartScheduler+0xd4>)
 8000b7a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000b86:	78fb      	ldrb	r3, [r7, #3]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8e:	2b80      	cmp	r3, #128	; 0x80
 8000b90:	d0ef      	beq.n	8000b72 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <xPortStartScheduler+0xd4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d009      	beq.n	8000bb2 <xPortStartScheduler+0x76>
 8000b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	e7fe      	b.n	8000bb0 <xPortStartScheduler+0x74>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <xPortStartScheduler+0xd4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <xPortStartScheduler+0xd4>)
 8000bba:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <xPortStartScheduler+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <xPortStartScheduler+0xd4>)
 8000bc6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000bd0:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <xPortStartScheduler+0xd8>)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <xPortStartScheduler+0xd8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bda:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <xPortStartScheduler+0xd8>)
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <xPortStartScheduler+0xd8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000be6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000be8:	f000 f8b6 	bl	8000d58 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <xPortStartScheduler+0xdc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000bf2:	f7ff ff91 	bl	8000b18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000bf6:	f001 fb1b 	bl	8002230 <vTaskSwitchContext>
    prvTaskExitError();
 8000bfa:	f7ff ff4b 	bl	8000a94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	e000e400 	.word	0xe000e400
 8000c0c:	200000ac 	.word	0x200000ac
 8000c10:	200000b0 	.word	0x200000b0
 8000c14:	e000ed20 	.word	0xe000ed20
 8000c18:	2000000c 	.word	0x2000000c

08000c1c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c26:	f383 8811 	msr	BASEPRI, r3
 8000c2a:	f3bf 8f6f 	isb	sy
 8000c2e:	f3bf 8f4f 	dsb	sy
 8000c32:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <vPortEnterCritical+0x54>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <vPortEnterCritical+0x54>)
 8000c3c:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <vPortEnterCritical+0x54>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d10e      	bne.n	8000c64 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <vPortEnterCritical+0x58>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d009      	beq.n	8000c64 <vPortEnterCritical+0x48>
 8000c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c54:	f383 8811 	msr	BASEPRI, r3
 8000c58:	f3bf 8f6f 	isb	sy
 8000c5c:	f3bf 8f4f 	dsb	sy
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	e7fe      	b.n	8000c62 <vPortEnterCritical+0x46>
    }
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	2000000c 	.word	0x2000000c
 8000c74:	e000ed04 	.word	0xe000ed04

08000c78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <vPortExitCritical+0x48>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d109      	bne.n	8000c9a <vPortExitCritical+0x22>
 8000c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8a:	f383 8811 	msr	BASEPRI, r3
 8000c8e:	f3bf 8f6f 	isb	sy
 8000c92:	f3bf 8f4f 	dsb	sy
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	e7fe      	b.n	8000c98 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <vPortExitCritical+0x48>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <vPortExitCritical+0x48>)
 8000ca2:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <vPortExitCritical+0x48>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d104      	bne.n	8000cb6 <vPortExitCritical+0x3e>
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	2000000c 	.word	0x2000000c
	...

08000cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000cd0:	f3ef 8009 	mrs	r0, PSP
 8000cd4:	f3bf 8f6f 	isb	sy
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <pxCurrentTCBConst>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ce0:	6010      	str	r0, [r2, #0]
 8000ce2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000ce6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000cea:	f380 8811 	msr	BASEPRI, r0
 8000cee:	f001 fa9f 	bl	8002230 <vTaskSwitchContext>
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	f380 8811 	msr	BASEPRI, r0
 8000cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000cfe:	6819      	ldr	r1, [r3, #0]
 8000d00:	6808      	ldr	r0, [r1, #0]
 8000d02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d06:	f380 8809 	msr	PSP, r0
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	4770      	bx	lr

08000d10 <pxCurrentTCBConst>:
 8000d10:	200000b4 	.word	0x200000b4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop

08000d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
        __asm volatile
 8000d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d22:	f383 8811 	msr	BASEPRI, r3
 8000d26:	f3bf 8f6f 	isb	sy
 8000d2a:	f3bf 8f4f 	dsb	sy
 8000d2e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000d30:	f001 f9c6 	bl	80020c0 <xTaskIncrementTick>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SysTick_Handler+0x3c>)
 8000d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000ed04 	.word	0xe000ed04

08000d58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <vPortSetupTimerInterrupt+0x28>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <vPortSetupTimerInterrupt+0x2c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <vPortSetupTimerInterrupt+0x30>)
 8000d6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d6e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <vPortSetupTimerInterrupt+0x28>)
 8000d72:	2207      	movs	r2, #7
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010
 8000d84:	e000e018 	.word	0xe000e018
 8000d88:	e000e014 	.word	0xe000e014

08000d8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000d92:	f3ef 8305 	mrs	r3, IPSR
 8000d96:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b0f      	cmp	r3, #15
 8000d9c:	d913      	bls.n	8000dc6 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <vPortValidateInterruptPriority+0x68>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <vPortValidateInterruptPriority+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	7afa      	ldrb	r2, [r7, #11]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d209      	bcs.n	8000dc6 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	e7fe      	b.n	8000dc4 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <vPortValidateInterruptPriority+0x70>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <vPortValidateInterruptPriority+0x74>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d909      	bls.n	8000dea <vPortValidateInterruptPriority+0x5e>
 8000dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dda:	f383 8811 	msr	BASEPRI, r3
 8000dde:	f3bf 8f6f 	isb	sy
 8000de2:	f3bf 8f4f 	dsb	sy
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	e7fe      	b.n	8000de8 <vPortValidateInterruptPriority+0x5c>
    }
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	e000e3f0 	.word	0xe000e3f0
 8000df8:	200000ac 	.word	0x200000ac
 8000dfc:	e000ed0c 	.word	0xe000ed0c
 8000e00:	200000b0 	.word	0x200000b0

08000e04 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d109      	bne.n	8000e2c <xQueueGenericReset+0x28>
 8000e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e1c:	f383 8811 	msr	BASEPRI, r3
 8000e20:	f3bf 8f6f 	isb	sy
 8000e24:	f3bf 8f4f 	dsb	sy
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	e7fe      	b.n	8000e2a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8000e2c:	f7ff fef6 	bl	8000c1c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e38:	68f9      	ldr	r1, [r7, #12]
 8000e3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	441a      	add	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	68f9      	ldr	r1, [r7, #12]
 8000e60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e62:	fb01 f303 	mul.w	r3, r1, r3
 8000e66:	441a      	add	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	22ff      	movs	r2, #255	; 0xff
 8000e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	22ff      	movs	r2, #255	; 0xff
 8000e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d114      	bne.n	8000eac <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d01a      	beq.n	8000ec0 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3310      	adds	r3, #16
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fa76 	bl	8002380 <xTaskRemoveFromEventList>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d012      	beq.n	8000ec0 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <xQueueGenericReset+0xcc>)
 8000e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	f3bf 8f4f 	dsb	sy
 8000ea6:	f3bf 8f6f 	isb	sy
 8000eaa:	e009      	b.n	8000ec0 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3310      	adds	r3, #16
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fbdf 	bl	8000674 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3324      	adds	r3, #36	; 0x24
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fbda 	bl	8000674 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000ec0:	f7ff feda 	bl	8000c78 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000ec4:	2301      	movs	r3, #1
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000ed04 	.word	0xe000ed04

08000ed4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d109      	bne.n	8000efc <xQueueGenericCreate+0x28>
 8000ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eec:	f383 8811 	msr	BASEPRI, r3
 8000ef0:	f3bf 8f6f 	isb	sy
 8000ef4:	f3bf 8f4f 	dsb	sy
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	e7fe      	b.n	8000efa <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	fb02 f303 	mul.w	r3, r2, r3
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <xQueueGenericCreate+0x46>
 8000f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d101      	bne.n	8000f1e <xQueueGenericCreate+0x4a>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <xQueueGenericCreate+0x4c>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d109      	bne.n	8000f38 <xQueueGenericCreate+0x64>
 8000f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e7fe      	b.n	8000f36 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d809      	bhi.n	8000f58 <xQueueGenericCreate+0x84>
 8000f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f48:	f383 8811 	msr	BASEPRI, r3
 8000f4c:	f3bf 8f6f 	isb	sy
 8000f50:	f3bf 8f4f 	dsb	sy
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	e7fe      	b.n	8000f56 <xQueueGenericCreate+0x82>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	3348      	adds	r3, #72	; 0x48
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fb65 	bl	800062c <pvPortMalloc>
 8000f62:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00d      	beq.n	8000f86 <xQueueGenericCreate+0xb2>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3348      	adds	r3, #72	; 0x48
 8000f72:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f805 	bl	8000f90 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000f86:	6a3b      	ldr	r3, [r7, #32]
    }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d103      	bne.n	8000fac <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e002      	b.n	8000fb2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	69b8      	ldr	r0, [r7, #24]
 8000fc2:	f7ff ff1f 	bl	8000e04 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00e      	beq.n	8000ffa <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f81d 	bl	8001034 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800100c:	2301      	movs	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	461a      	mov	r2, r3
 8001018:	6939      	ldr	r1, [r7, #16]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff5a 	bl	8000ed4 <xQueueGenericCreate>
 8001020:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff ffd3 	bl	8000fce <prvInitialiseMutex>

        return xNewQueue;
 8001028:	68fb      	ldr	r3, [r7, #12]
    }
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <xQueueGenericSend+0x30>
 8001050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
 8001062:	e7fe      	b.n	8001062 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d103      	bne.n	8001072 <xQueueGenericSend+0x3e>
 800106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <xQueueGenericSend+0x42>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <xQueueGenericSend+0x44>
 8001076:	2300      	movs	r3, #0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d109      	bne.n	8001090 <xQueueGenericSend+0x5c>
 800107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	e7fe      	b.n	800108e <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d103      	bne.n	800109e <xQueueGenericSend+0x6a>
 8001096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <xQueueGenericSend+0x6e>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <xQueueGenericSend+0x70>
 80010a2:	2300      	movs	r3, #0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d109      	bne.n	80010bc <xQueueGenericSend+0x88>
 80010a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ac:	f383 8811 	msr	BASEPRI, r3
 80010b0:	f3bf 8f6f 	isb	sy
 80010b4:	f3bf 8f4f 	dsb	sy
 80010b8:	623b      	str	r3, [r7, #32]
 80010ba:	e7fe      	b.n	80010ba <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010bc:	f001 faf6 	bl	80026ac <xTaskGetSchedulerState>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <xQueueGenericSend+0x98>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <xQueueGenericSend+0x9c>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <xQueueGenericSend+0x9e>
 80010d0:	2300      	movs	r3, #0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <xQueueGenericSend+0xb6>
 80010d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010da:	f383 8811 	msr	BASEPRI, r3
 80010de:	f3bf 8f6f 	isb	sy
 80010e2:	f3bf 8f4f 	dsb	sy
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	e7fe      	b.n	80010e8 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80010ea:	f7ff fd97 	bl	8000c1c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80010ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d302      	bcc.n	8001100 <xQueueGenericSend+0xcc>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d129      	bne.n	8001154 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001106:	f000 fb30 	bl	800176a <prvCopyDataToQueue>
 800110a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2b00      	cmp	r3, #0
 8001112:	d010      	beq.n	8001136 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001116:	3324      	adds	r3, #36	; 0x24
 8001118:	4618      	mov	r0, r3
 800111a:	f001 f931 	bl	8002380 <xTaskRemoveFromEventList>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <xQueueGenericSend+0x1f0>)
 8001126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	f3bf 8f4f 	dsb	sy
 8001130:	f3bf 8f6f 	isb	sy
 8001134:	e00a      	b.n	800114c <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	2b00      	cmp	r3, #0
 800113a:	d007      	beq.n	800114c <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800113c:	4b39      	ldr	r3, [pc, #228]	; (8001224 <xQueueGenericSend+0x1f0>)
 800113e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	f3bf 8f4f 	dsb	sy
 8001148:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800114c:	f7ff fd94 	bl	8000c78 <vPortExitCritical>
                return pdPASS;
 8001150:	2301      	movs	r3, #1
 8001152:	e063      	b.n	800121c <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800115a:	f7ff fd8d 	bl	8000c78 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800115e:	2300      	movs	r3, #0
 8001160:	e05c      	b.n	800121c <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001164:	2b00      	cmp	r3, #0
 8001166:	d106      	bne.n	8001176 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f001 f969 	bl	8002444 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001172:	2301      	movs	r3, #1
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001176:	f7ff fd7f 	bl	8000c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800117a:	f000 fee9 	bl	8001f50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800117e:	f7ff fd4d 	bl	8000c1c <vPortEnterCritical>
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001188:	b25b      	sxtb	r3, r3
 800118a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118e:	d103      	bne.n	8001198 <xQueueGenericSend+0x164>
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d103      	bne.n	80011ae <xQueueGenericSend+0x17a>
 80011a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011ae:	f7ff fd63 	bl	8000c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011b2:	1d3a      	adds	r2, r7, #4
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 f958 	bl	8002470 <xTaskCheckForTimeOut>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d124      	bne.n	8001210 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80011c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c8:	f000 fbc7 	bl	800195a <prvIsQueueFull>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d018      	beq.n	8001204 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80011d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d4:	3310      	adds	r3, #16
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f882 	bl	80022e4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80011e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011e2:	f000 fb52 	bl	800188a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80011e6:	f000 fec1 	bl	8001f6c <xTaskResumeAll>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f47f af7c 	bne.w	80010ea <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <xQueueGenericSend+0x1f0>)
 80011f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	f3bf 8f6f 	isb	sy
 8001202:	e772      	b.n	80010ea <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001206:	f000 fb40 	bl	800188a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800120a:	f000 feaf 	bl	8001f6c <xTaskResumeAll>
 800120e:	e76c      	b.n	80010ea <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001212:	f000 fb3a 	bl	800188a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001216:	f000 fea9 	bl	8001f6c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800121a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800121c:	4618      	mov	r0, r3
 800121e:	3738      	adds	r7, #56	; 0x38
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	e000ed04 	.word	0xe000ed04

08001228 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800123a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <xQueueGenericSendFromISR+0x2c>
 8001240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001244:	f383 8811 	msr	BASEPRI, r3
 8001248:	f3bf 8f6f 	isb	sy
 800124c:	f3bf 8f4f 	dsb	sy
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
 8001252:	e7fe      	b.n	8001252 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <xQueueGenericSendFromISR+0x3a>
 800125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <xQueueGenericSendFromISR+0x3e>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <xQueueGenericSendFromISR+0x40>
 8001266:	2300      	movs	r3, #0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d109      	bne.n	8001280 <xQueueGenericSendFromISR+0x58>
 800126c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001270:	f383 8811 	msr	BASEPRI, r3
 8001274:	f3bf 8f6f 	isb	sy
 8001278:	f3bf 8f4f 	dsb	sy
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
 800127e:	e7fe      	b.n	800127e <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d103      	bne.n	800128e <xQueueGenericSendFromISR+0x66>
 8001286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <xQueueGenericSendFromISR+0x6a>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <xQueueGenericSendFromISR+0x6c>
 8001292:	2300      	movs	r3, #0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <xQueueGenericSendFromISR+0x84>
 8001298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800129c:	f383 8811 	msr	BASEPRI, r3
 80012a0:	f3bf 8f6f 	isb	sy
 80012a4:	f3bf 8f4f 	dsb	sy
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	e7fe      	b.n	80012aa <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012ac:	f7ff fd6e 	bl	8000d8c <vPortValidateInterruptPriority>
        __asm volatile
 80012b0:	f3ef 8211 	mrs	r2, BASEPRI
 80012b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
 80012c4:	61fa      	str	r2, [r7, #28]
 80012c6:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80012c8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d302      	bcc.n	80012de <xQueueGenericSendFromISR+0xb6>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d13d      	bne.n	800135a <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80012de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012f4:	f000 fa39 	bl	800176a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80012f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d112      	bne.n	8001328 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	2b00      	cmp	r3, #0
 8001308:	d024      	beq.n	8001354 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130c:	3324      	adds	r3, #36	; 0x24
 800130e:	4618      	mov	r0, r3
 8001310:	f001 f836 	bl	8002380 <xTaskRemoveFromEventList>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01c      	beq.n	8001354 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d019      	beq.n	8001354 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e015      	b.n	8001354 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001328:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800132c:	2b7f      	cmp	r3, #127	; 0x7f
 800132e:	d109      	bne.n	8001344 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8001330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001334:	f383 8811 	msr	BASEPRI, r3
 8001338:	f3bf 8f6f 	isb	sy
 800133c:	f3bf 8f4f 	dsb	sy
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e7fe      	b.n	8001342 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001344:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001348:	3301      	adds	r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b25a      	sxtb	r2, r3
 800134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001354:	2301      	movs	r3, #1
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001358:	e001      	b.n	800135e <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800135a:	2300      	movs	r3, #0
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800136a:	4618      	mov	r0, r3
 800136c:	3740      	adds	r7, #64	; 0x40
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <xQueueReceive+0x2e>
        __asm volatile
 800138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001392:	f383 8811 	msr	BASEPRI, r3
 8001396:	f3bf 8f6f 	isb	sy
 800139a:	f3bf 8f4f 	dsb	sy
 800139e:	623b      	str	r3, [r7, #32]
 80013a0:	e7fe      	b.n	80013a0 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d103      	bne.n	80013b0 <xQueueReceive+0x3c>
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <xQueueReceive+0x40>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <xQueueReceive+0x42>
 80013b4:	2300      	movs	r3, #0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <xQueueReceive+0x5a>
 80013ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013be:	f383 8811 	msr	BASEPRI, r3
 80013c2:	f3bf 8f6f 	isb	sy
 80013c6:	f3bf 8f4f 	dsb	sy
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e7fe      	b.n	80013cc <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80013ce:	f001 f96d 	bl	80026ac <xTaskGetSchedulerState>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <xQueueReceive+0x6a>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <xQueueReceive+0x6e>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <xQueueReceive+0x70>
 80013e2:	2300      	movs	r3, #0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <xQueueReceive+0x88>
 80013e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	e7fe      	b.n	80013fa <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80013fc:	f7ff fc0e 	bl	8000c1c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001404:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01f      	beq.n	800144c <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001410:	f000 fa15 	bl	800183e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00f      	beq.n	8001444 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	3310      	adds	r3, #16
 8001428:	4618      	mov	r0, r3
 800142a:	f000 ffa9 	bl	8002380 <xTaskRemoveFromEventList>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001434:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <xQueueReceive+0x1b4>)
 8001436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	f3bf 8f4f 	dsb	sy
 8001440:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001444:	f7ff fc18 	bl	8000c78 <vPortExitCritical>
                return pdPASS;
 8001448:	2301      	movs	r3, #1
 800144a:	e069      	b.n	8001520 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001452:	f7ff fc11 	bl	8000c78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001456:	2300      	movs	r3, #0
 8001458:	e062      	b.n	8001520 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d106      	bne.n	800146e <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4618      	mov	r0, r3
 8001466:	f000 ffed 	bl	8002444 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800146a:	2301      	movs	r3, #1
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800146e:	f7ff fc03 	bl	8000c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001472:	f000 fd6d 	bl	8001f50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001476:	f7ff fbd1 	bl	8000c1c <vPortEnterCritical>
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001480:	b25b      	sxtb	r3, r3
 8001482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001486:	d103      	bne.n	8001490 <xQueueReceive+0x11c>
 8001488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001496:	b25b      	sxtb	r3, r3
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d103      	bne.n	80014a6 <xQueueReceive+0x132>
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014a6:	f7ff fbe7 	bl	8000c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80014aa:	1d3a      	adds	r2, r7, #4
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 ffdc 	bl	8002470 <xTaskCheckForTimeOut>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d123      	bne.n	8001506 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80014be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014c0:	f000 fa35 	bl	800192e <prvIsQueueEmpty>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d017      	beq.n	80014fa <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	3324      	adds	r3, #36	; 0x24
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 ff06 	bl	80022e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80014d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014da:	f000 f9d6 	bl	800188a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80014de:	f000 fd45 	bl	8001f6c <xTaskResumeAll>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d189      	bne.n	80013fc <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <xQueueReceive+0x1b4>)
 80014ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f3bf 8f4f 	dsb	sy
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	e780      	b.n	80013fc <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80014fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014fc:	f000 f9c5 	bl	800188a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001500:	f000 fd34 	bl	8001f6c <xTaskResumeAll>
 8001504:	e77a      	b.n	80013fc <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001508:	f000 f9bf 	bl	800188a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800150c:	f000 fd2e 	bl	8001f6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001512:	f000 fa0c 	bl	800192e <prvIsQueueEmpty>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	f43f af6f 	beq.w	80013fc <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800151e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001520:	4618      	mov	r0, r3
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	e000ed04 	.word	0xe000ed04

0800152c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001536:	2300      	movs	r3, #0
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <xQueueSemaphoreTake+0x30>
 8001548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154c:	f383 8811 	msr	BASEPRI, r3
 8001550:	f3bf 8f6f 	isb	sy
 8001554:	f3bf 8f4f 	dsb	sy
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	e7fe      	b.n	800155a <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <xQueueSemaphoreTake+0x4c>
 8001564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001568:	f383 8811 	msr	BASEPRI, r3
 800156c:	f3bf 8f6f 	isb	sy
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e7fe      	b.n	8001576 <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001578:	f001 f898 	bl	80026ac <xTaskGetSchedulerState>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <xQueueSemaphoreTake+0x5c>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <xQueueSemaphoreTake+0x60>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <xQueueSemaphoreTake+0x62>
 800158c:	2300      	movs	r3, #0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <xQueueSemaphoreTake+0x7a>
 8001592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001596:	f383 8811 	msr	BASEPRI, r3
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	f3bf 8f4f 	dsb	sy
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	e7fe      	b.n	80015a4 <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015a6:	f7ff fb39 	bl	8000c1c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d024      	beq.n	8001600 <xQueueSemaphoreTake+0xd4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80015b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b8:	1e5a      	subs	r2, r3, #1
 80015ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015bc:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d104      	bne.n	80015d0 <xQueueSemaphoreTake+0xa4>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80015c6:	f001 fa09 	bl	80029dc <pvTaskIncrementMutexHeldCount>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00f      	beq.n	80015f8 <xQueueSemaphoreTake+0xcc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	3310      	adds	r3, #16
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fecf 	bl	8002380 <xTaskRemoveFromEventList>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <xQueueSemaphoreTake+0xcc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80015e8:	4b53      	ldr	r3, [pc, #332]	; (8001738 <xQueueSemaphoreTake+0x20c>)
 80015ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	f3bf 8f4f 	dsb	sy
 80015f4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80015f8:	f7ff fb3e 	bl	8000c78 <vPortExitCritical>
                return pdPASS;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e096      	b.n	800172e <xQueueSemaphoreTake+0x202>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d110      	bne.n	8001628 <xQueueSemaphoreTake+0xfc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8001606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <xQueueSemaphoreTake+0xf4>
 800160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001610:	f383 8811 	msr	BASEPRI, r3
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e7fe      	b.n	800161e <xQueueSemaphoreTake+0xf2>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001620:	f7ff fb2a 	bl	8000c78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001624:	2300      	movs	r3, #0
 8001626:	e082      	b.n	800172e <xQueueSemaphoreTake+0x202>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <xQueueSemaphoreTake+0x110>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4618      	mov	r0, r3
 8001634:	f000 ff06 	bl	8002444 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001638:	2301      	movs	r3, #1
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800163c:	f7ff fb1c 	bl	8000c78 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001640:	f000 fc86 	bl	8001f50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001644:	f7ff faea 	bl	8000c1c <vPortEnterCritical>
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800164e:	b25b      	sxtb	r3, r3
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d103      	bne.n	800165e <xQueueSemaphoreTake+0x132>
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001664:	b25b      	sxtb	r3, r3
 8001666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166a:	d103      	bne.n	8001674 <xQueueSemaphoreTake+0x148>
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001674:	f7ff fb00 	bl	8000c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001678:	463a      	mov	r2, r7
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fef5 	bl	8002470 <xTaskCheckForTimeOut>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d132      	bne.n	80016f2 <xQueueSemaphoreTake+0x1c6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800168c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800168e:	f000 f94e 	bl	800192e <prvIsQueueEmpty>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d026      	beq.n	80016e6 <xQueueSemaphoreTake+0x1ba>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <xQueueSemaphoreTake+0x188>
                        {
                            taskENTER_CRITICAL();
 80016a0:	f7ff fabc 	bl	8000c1c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 f81d 	bl	80026e8 <xTaskPriorityInherit>
 80016ae:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80016b0:	f7ff fae2 	bl	8000c78 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	3324      	adds	r3, #36	; 0x24
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fe11 	bl	80022e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80016c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016c4:	f000 f8e1 	bl	800188a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80016c8:	f000 fc50 	bl	8001f6c <xTaskResumeAll>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f af69 	bne.w	80015a6 <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <xQueueSemaphoreTake+0x20c>)
 80016d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	f3bf 8f4f 	dsb	sy
 80016e0:	f3bf 8f6f 	isb	sy
 80016e4:	e75f      	b.n	80015a6 <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80016e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016e8:	f000 f8cf 	bl	800188a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80016ec:	f000 fc3e 	bl	8001f6c <xTaskResumeAll>
 80016f0:	e759      	b.n	80015a6 <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80016f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016f4:	f000 f8c9 	bl	800188a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80016f8:	f000 fc38 	bl	8001f6c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016fe:	f000 f916 	bl	800192e <prvIsQueueEmpty>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	f43f af4e 	beq.w	80015a6 <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00d      	beq.n	800172c <xQueueSemaphoreTake+0x200>
                        {
                            taskENTER_CRITICAL();
 8001710:	f7ff fa84 	bl	8000c1c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001716:	f000 f811 	bl	800173c <prvGetDisinheritPriorityAfterTimeout>
 800171a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001722:	4618      	mov	r0, r3
 8001724:	f001 f8ce 	bl	80028c4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8001728:	f7ff faa6 	bl	8000c78 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800172c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800172e:	4618      	mov	r0, r3
 8001730:	3738      	adds	r7, #56	; 0x38
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000ed04 	.word	0xe000ed04

0800173c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f1c3 030a 	rsb	r3, r3, #10
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e001      	b.n	800175e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800175e:	68fb      	ldr	r3, [r7, #12]
    }
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10d      	bne.n	80017a4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d14d      	bne.n	800182c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4618      	mov	r0, r3
 8001796:	f001 f81d 	bl	80027d4 <xTaskPriorityDisinherit>
 800179a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	e043      	b.n	800182c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d119      	bne.n	80017de <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6858      	ldr	r0, [r3, #4]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	461a      	mov	r2, r3
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	f001 fcbd 	bl	8003134 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	441a      	add	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d32b      	bcc.n	800182c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	e026      	b.n	800182c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	68d8      	ldr	r0, [r3, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	461a      	mov	r2, r3
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	f001 fca3 	bl	8003134 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	425b      	negs	r3, r3
 80017f8:	441a      	add	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d207      	bcs.n	800181a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	425b      	negs	r3, r3
 8001814:	441a      	add	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d105      	bne.n	800182c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	3b01      	subs	r3, #1
 800182a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001834:	697b      	ldr	r3, [r7, #20]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2b00      	cmp	r3, #0
 800184e:	d018      	beq.n	8001882 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	441a      	add	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	429a      	cmp	r2, r3
 8001868:	d303      	bcc.n	8001872 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68d9      	ldr	r1, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	461a      	mov	r2, r3
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	f001 fc59 	bl	8003134 <memcpy>
    }
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001892:	f7ff f9c3 	bl	8000c1c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800189c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800189e:	e011      	b.n	80018c4 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3324      	adds	r3, #36	; 0x24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 fd67 	bl	8002380 <xTaskRemoveFromEventList>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80018b8:	f000 fe3e 	bl	8002538 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	3b01      	subs	r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	dce9      	bgt.n	80018a0 <prvUnlockQueue+0x16>
 80018cc:	e000      	b.n	80018d0 <prvUnlockQueue+0x46>
                        break;
 80018ce:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80018d8:	f7ff f9ce 	bl	8000c78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80018dc:	f7ff f99e 	bl	8000c1c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018e6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018e8:	e011      	b.n	800190e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d012      	beq.n	8001918 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3310      	adds	r3, #16
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fd42 	bl	8002380 <xTaskRemoveFromEventList>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001902:	f000 fe19 	bl	8002538 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001906:	7bbb      	ldrb	r3, [r7, #14]
 8001908:	3b01      	subs	r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800190e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001912:	2b00      	cmp	r3, #0
 8001914:	dce9      	bgt.n	80018ea <prvUnlockQueue+0x60>
 8001916:	e000      	b.n	800191a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001918:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	22ff      	movs	r2, #255	; 0xff
 800191e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001922:	f7ff f9a9 	bl	8000c78 <vPortExitCritical>
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001936:	f7ff f971 	bl	8000c1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001942:	2301      	movs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e001      	b.n	800194c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800194c:	f7ff f994 	bl	8000c78 <vPortExitCritical>

    return xReturn;
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001962:	f7ff f95b 	bl	8000c1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	429a      	cmp	r2, r3
 8001970:	d102      	bne.n	8001978 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001972:	2301      	movs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e001      	b.n	800197c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800197c:	f7ff f97c 	bl	8000c78 <vPortExitCritical>

    return xReturn;
 8001980:	68fb      	ldr	r3, [r7, #12]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800199a:	f7ff f93f 	bl	8000c1c <vPortEnterCritical>
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019aa:	d103      	bne.n	80019b4 <vQueueWaitForMessageRestricted+0x2a>
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d103      	bne.n	80019ca <vQueueWaitForMessageRestricted+0x40>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019ca:	f7ff f955 	bl	8000c78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3324      	adds	r3, #36	; 0x24
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68b9      	ldr	r1, [r7, #8]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 fca4 	bl	800232c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80019e4:	6978      	ldr	r0, [r7, #20]
 80019e6:	f7ff ff50 	bl	800188a <prvUnlockQueue>
    }
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019fa:	e003      	b.n	8001a04 <LoopCopyDataInit>

080019fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80019fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a02:	3104      	adds	r1, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a04:	480b      	ldr	r0, [pc, #44]	; (8001a34 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001a08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a0c:	d3f6      	bcc.n	80019fc <CopyDataInit>
	ldr	r2, =_sbss
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001a10:	e002      	b.n	8001a18 <LoopFillZerobss>

08001a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a14:	f842 3b04 	str.w	r3, [r2], #4

08001a18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001a1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a1c:	d3f9      	bcc.n	8001a12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1e:	f000 f821 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a22:	f001 fb53 	bl	80030cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a26:	f7fe fed5 	bl	80007d4 <main>
	bx	lr
 8001a2a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a2c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001a30:	08003340 	.word	0x08003340
	ldr	r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a38:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001a3c:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001a40:	20000268 	.word	0x20000268

08001a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_2_IRQHandler>

08001a46 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <BusFault_Handler+0x4>

08001a52 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <UsageFault_Handler+0x4>

08001a58 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <SystemInit+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <SystemInit+0x5c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001a74:	4912      	ldr	r1, [pc, #72]	; (8001ac0 <SystemInit+0x5c>)
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <SystemInit+0x5c>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <SystemInit+0x60>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <SystemInit+0x5c>)
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <SystemInit+0x5c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <SystemInit+0x5c>)
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <SystemInit+0x5c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001a9c:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <SystemInit+0x5c>)
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <SystemInit+0x5c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001aa6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SystemInit+0x5c>)
 8001aaa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001aae:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001ab0:	f000 f80c 	bl	8001acc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SystemInit+0x64>)
 8001ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aba:	609a      	str	r2, [r3, #8]
#endif 
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	f8ff0000 	.word	0xf8ff0000
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001ad0:	f000 f802 	bl	8001ad8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001ae6:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001ae8:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001af2:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d103      	bne.n	8001b10 <SetSysClockTo72+0x38>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b0e:	d1f0      	bne.n	8001af2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	e001      	b.n	8001b26 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d14b      	bne.n	8001bc4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001b2c:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <SetSysClockTo72+0xfc>)
 8001b2e:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <SetSysClockTo72+0xfc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f043 0310 	orr.w	r3, r3, #16
 8001b36:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <SetSysClockTo72+0xfc>)
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <SetSysClockTo72+0xfc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001b44:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <SetSysClockTo72+0xfc>)
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <SetSysClockTo72+0xfc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001b6c:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001b76:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001b78:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001b82:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001b90:	bf00      	nop
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f9      	beq.n	8001b92 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 0303 	bic.w	r3, r3, #3
 8001ba8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001bb6:	bf00      	nop
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SetSysClockTo72+0xf8>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d1f9      	bne.n	8001bb8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fd1d 	bl	800062c <pvPortMalloc>
 8001bf2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00e      	beq.n	8001c18 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001bfa:	2050      	movs	r0, #80	; 0x50
 8001bfc:	f7fe fd16 	bl	800062c <pvPortMalloc>
 8001c00:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0e:	e005      	b.n	8001c1c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001c10:	6978      	ldr	r0, [r7, #20]
 8001c12:	f7fe fd1d 	bl	8000650 <vPortFree>
 8001c16:	e001      	b.n	8001c1c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d013      	beq.n	8001c4a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	2300      	movs	r3, #0
 8001c26:	9303      	str	r3, [sp, #12]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f80e 	bl	8001c5a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001c3e:	69f8      	ldr	r0, [r7, #28]
 8001c40:	f000 f898 	bl	8001d74 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001c44:	2301      	movs	r3, #1
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e002      	b.n	8001c50 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001c50:	69bb      	ldr	r3, [r7, #24]
    }
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b088      	sub	sp, #32
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c72:	3b01      	subs	r3, #1
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f023 0307 	bic.w	r3, r3, #7
 8001c80:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <prvInitialiseNewTask+0x46>
 8001c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c90:	f383 8811 	msr	BASEPRI, r3
 8001c94:	f3bf 8f6f 	isb	sy
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e7fe      	b.n	8001c9e <prvInitialiseNewTask+0x44>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01f      	beq.n	8001ce6 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e012      	b.n	8001cd2 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	7819      	ldrb	r1, [r3, #0]
 8001cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	4413      	add	r3, r2
 8001cba:	3334      	adds	r3, #52	; 0x34
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b09      	cmp	r3, #9
 8001cd6:	d9e9      	bls.n	8001cac <prvInitialiseNewTask+0x52>
 8001cd8:	e000      	b.n	8001cdc <prvInitialiseNewTask+0x82>
            {
                break;
 8001cda:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001ce4:	e003      	b.n	8001cee <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d901      	bls.n	8001cf8 <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001cf4:	2309      	movs	r3, #9
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
            pxNewTCB->uxMutexesHeld = 0;
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fccf 	bl	80006b2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d16:	3318      	adds	r3, #24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fcca 	bl	80006b2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d22:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d26:	f1c3 020a 	rsb	r2, r3, #10
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	3348      	adds	r3, #72	; 0x48
 8001d38:	2204      	movs	r2, #4
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fa04 	bl	800314a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	334c      	adds	r3, #76	; 0x4c
 8001d46:	2201      	movs	r2, #1
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 f9fd 	bl	800314a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	69b8      	ldr	r0, [r7, #24]
 8001d56:	f7fe fe71 	bl	8000a3c <pxPortInitialiseStack>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <prvInitialiseNewTask+0x112>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d6a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001d7c:	f7fe ff4e 	bl	8000c1c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <prvAddNewTaskToReadyList+0xb8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <prvAddNewTaskToReadyList+0xb8>)
 8001d88:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <prvAddNewTaskToReadyList+0xbc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001d92:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <prvAddNewTaskToReadyList+0xbc>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <prvAddNewTaskToReadyList+0xb8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d110      	bne.n	8001dc2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001da0:	f000 fbee 	bl	8002580 <prvInitialiseTaskLists>
 8001da4:	e00d      	b.n	8001dc2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <prvAddNewTaskToReadyList+0xc0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <prvAddNewTaskToReadyList+0xbc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d802      	bhi.n	8001dc2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <prvAddNewTaskToReadyList+0xbc>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <prvAddNewTaskToReadyList+0xc4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <prvAddNewTaskToReadyList+0xc4>)
 8001dca:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <prvAddNewTaskToReadyList+0xc8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <prvAddNewTaskToReadyList+0xc8>)
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <prvAddNewTaskToReadyList+0xcc>)
 8001dec:	441a      	add	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3304      	adds	r3, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4610      	mov	r0, r2
 8001df6:	f7fe fc68 	bl	80006ca <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001dfa:	f7fe ff3d 	bl	8000c78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <prvAddNewTaskToReadyList+0xc0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00e      	beq.n	8001e24 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <prvAddNewTaskToReadyList+0xbc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d207      	bcs.n	8001e24 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <prvAddNewTaskToReadyList+0xd0>)
 8001e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f3bf 8f4f 	dsb	sy
 8001e20:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200001f0 	.word	0x200001f0
 8001e30:	200000b4 	.word	0x200000b4
 8001e34:	200001fc 	.word	0x200001fc
 8001e38:	2000020c 	.word	0x2000020c
 8001e3c:	200001f8 	.word	0x200001f8
 8001e40:	200000b8 	.word	0x200000b8
 8001e44:	e000ed04 	.word	0xe000ed04

08001e48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <vTaskDelay+0x60>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <vTaskDelay+0x2e>
 8001e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	e7fe      	b.n	8001e74 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8001e76:	f000 f86b 	bl	8001f50 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fdc1 	bl	8002a04 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001e82:	f000 f873 	bl	8001f6c <xTaskResumeAll>
 8001e86:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <vTaskDelay+0x64>)
 8001e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000218 	.word	0x20000218
 8001eac:	e000ed04 	.word	0xe000ed04

08001eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <vTaskStartScheduler+0x84>)
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2246      	movs	r2, #70	; 0x46
 8001ec2:	491d      	ldr	r1, [pc, #116]	; (8001f38 <vTaskStartScheduler+0x88>)
 8001ec4:	481d      	ldr	r0, [pc, #116]	; (8001f3c <vTaskStartScheduler+0x8c>)
 8001ec6:	f7ff fe87 	bl	8001bd8 <xTaskCreate>
 8001eca:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001ed2:	f000 fdfd 	bl	8002ad0 <xTimerCreateTimerTask>
 8001ed6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d115      	bne.n	8001f0a <vTaskStartScheduler+0x5a>
 8001ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	f3bf 8f4f 	dsb	sy
 8001eee:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <vTaskStartScheduler+0x90>)
 8001ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <vTaskStartScheduler+0x94>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <vTaskStartScheduler+0x98>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001f04:	f7fe fe1a 	bl	8000b3c <xPortStartScheduler>
 8001f08:	e00d      	b.n	8001f26 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d109      	bne.n	8001f26 <vTaskStartScheduler+0x76>
 8001f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f16:	f383 8811 	msr	BASEPRI, r3
 8001f1a:	f3bf 8f6f 	isb	sy
 8001f1e:	f3bf 8f4f 	dsb	sy
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	e7fe      	b.n	8001f24 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <vTaskStartScheduler+0x9c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000214 	.word	0x20000214
 8001f38:	08003328 	.word	0x08003328
 8001f3c:	08002551 	.word	0x08002551
 8001f40:	20000210 	.word	0x20000210
 8001f44:	200001fc 	.word	0x200001fc
 8001f48:	200001f4 	.word	0x200001f4
 8001f4c:	20000010 	.word	0x20000010

08001f50 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <vTaskSuspendAll+0x18>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <vTaskSuspendAll+0x18>)
 8001f5c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000218 	.word	0x20000218

08001f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <xTaskResumeAll+0x114>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <xTaskResumeAll+0x2a>
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	e7fe      	b.n	8001f94 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001f96:	f7fe fe41 	bl	8000c1c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <xTaskResumeAll+0x114>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	4a37      	ldr	r2, [pc, #220]	; (8002080 <xTaskResumeAll+0x114>)
 8001fa2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <xTaskResumeAll+0x114>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d161      	bne.n	8002070 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001fac:	4b35      	ldr	r3, [pc, #212]	; (8002084 <xTaskResumeAll+0x118>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05d      	beq.n	8002070 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fb4:	e02e      	b.n	8002014 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fb6:	4b34      	ldr	r3, [pc, #208]	; (8002088 <xTaskResumeAll+0x11c>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3318      	adds	r3, #24
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fbdc 	bl	8000780 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fbd7 	bl	8000780 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	4b2c      	ldr	r3, [pc, #176]	; (800208c <xTaskResumeAll+0x120>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	4a2a      	ldr	r2, [pc, #168]	; (800208c <xTaskResumeAll+0x120>)
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <xTaskResumeAll+0x124>)
 8001ff2:	441a      	add	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f7fe fb65 	bl	80006ca <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <xTaskResumeAll+0x128>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	429a      	cmp	r2, r3
 800200c:	d302      	bcc.n	8002014 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 800200e:	4b22      	ldr	r3, [pc, #136]	; (8002098 <xTaskResumeAll+0x12c>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <xTaskResumeAll+0x11c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1cc      	bne.n	8001fb6 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002022:	f000 fb29 	bl	8002678 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <xTaskResumeAll+0x130>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d010      	beq.n	8002054 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002032:	f000 f845 	bl	80020c0 <xTaskIncrementTick>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 800203c:	4b16      	ldr	r3, [pc, #88]	; (8002098 <xTaskResumeAll+0x12c>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3b01      	subs	r3, #1
 8002046:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f1      	bne.n	8002032 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <xTaskResumeAll+0x130>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <xTaskResumeAll+0x12c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800205c:	2301      	movs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <xTaskResumeAll+0x134>)
 8002062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002070:	f7fe fe02 	bl	8000c78 <vPortExitCritical>

    return xAlreadyYielded;
 8002074:	68bb      	ldr	r3, [r7, #8]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000218 	.word	0x20000218
 8002084:	200001f0 	.word	0x200001f0
 8002088:	200001b0 	.word	0x200001b0
 800208c:	200001f8 	.word	0x200001f8
 8002090:	200000b8 	.word	0x200000b8
 8002094:	200000b4 	.word	0x200000b4
 8002098:	20000204 	.word	0x20000204
 800209c:	20000200 	.word	0x20000200
 80020a0:	e000ed04 	.word	0xe000ed04

080020a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <xTaskGetTickCount+0x18>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80020b0:	687b      	ldr	r3, [r7, #4]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	200001f4 	.word	0x200001f4

080020c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ca:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <xTaskIncrementTick+0x144>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 808d 	bne.w	80021ee <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020d4:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <xTaskIncrementTick+0x148>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80020dc:	4a4a      	ldr	r2, [pc, #296]	; (8002208 <xTaskIncrementTick+0x148>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d11f      	bne.n	8002128 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80020e8:	4b48      	ldr	r3, [pc, #288]	; (800220c <xTaskIncrementTick+0x14c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <xTaskIncrementTick+0x46>
 80020f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f6:	f383 8811 	msr	BASEPRI, r3
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	e7fe      	b.n	8002104 <xTaskIncrementTick+0x44>
 8002106:	4b41      	ldr	r3, [pc, #260]	; (800220c <xTaskIncrementTick+0x14c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b40      	ldr	r3, [pc, #256]	; (8002210 <xTaskIncrementTick+0x150>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a3e      	ldr	r2, [pc, #248]	; (800220c <xTaskIncrementTick+0x14c>)
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4a3e      	ldr	r2, [pc, #248]	; (8002210 <xTaskIncrementTick+0x150>)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <xTaskIncrementTick+0x154>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a3c      	ldr	r2, [pc, #240]	; (8002214 <xTaskIncrementTick+0x154>)
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	f000 faa8 	bl	8002678 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <xTaskIncrementTick+0x158>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d348      	bcc.n	80021c4 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002132:	4b36      	ldr	r3, [pc, #216]	; (800220c <xTaskIncrementTick+0x14c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <xTaskIncrementTick+0x158>)
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	601a      	str	r2, [r3, #0]
                    break;
 8002144:	e03e      	b.n	80021c4 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002146:	4b31      	ldr	r3, [pc, #196]	; (800220c <xTaskIncrementTick+0x14c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d203      	bcs.n	8002166 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800215e:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <xTaskIncrementTick+0x158>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002164:	e02e      	b.n	80021c4 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	3304      	adds	r3, #4
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fb08 	bl	8000780 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3318      	adds	r3, #24
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe faff 	bl	8000780 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	2201      	movs	r2, #1
 8002188:	409a      	lsls	r2, r3
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <xTaskIncrementTick+0x15c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	4a22      	ldr	r2, [pc, #136]	; (800221c <xTaskIncrementTick+0x15c>)
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <xTaskIncrementTick+0x160>)
 80021a2:	441a      	add	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7fe fa8d 	bl	80006ca <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <xTaskIncrementTick+0x164>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d3b9      	bcc.n	8002132 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80021be:	2301      	movs	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021c2:	e7b6      	b.n	8002132 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <xTaskIncrementTick+0x164>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ca:	4915      	ldr	r1, [pc, #84]	; (8002220 <xTaskIncrementTick+0x160>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d901      	bls.n	80021e0 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 80021dc:	2301      	movs	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <xTaskIncrementTick+0x168>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e004      	b.n	80021f8 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <xTaskIncrementTick+0x16c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <xTaskIncrementTick+0x16c>)
 80021f6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80021f8:	697b      	ldr	r3, [r7, #20]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000218 	.word	0x20000218
 8002208:	200001f4 	.word	0x200001f4
 800220c:	200001a8 	.word	0x200001a8
 8002210:	200001ac 	.word	0x200001ac
 8002214:	20000208 	.word	0x20000208
 8002218:	20000210 	.word	0x20000210
 800221c:	200001f8 	.word	0x200001f8
 8002220:	200000b8 	.word	0x200000b8
 8002224:	200000b4 	.word	0x200000b4
 8002228:	20000204 	.word	0x20000204
 800222c:	20000200 	.word	0x20000200

08002230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <vTaskSwitchContext+0xa0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800223e:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <vTaskSwitchContext+0xa4>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002244:	e03e      	b.n	80022c4 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <vTaskSwitchContext+0xa4>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <vTaskSwitchContext+0xa8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	f1c3 031f 	rsb	r3, r3, #31
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	491e      	ldr	r1, [pc, #120]	; (80022dc <vTaskSwitchContext+0xac>)
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <vTaskSwitchContext+0x5a>
        __asm volatile
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	e7fe      	b.n	8002288 <vTaskSwitchContext+0x58>
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <vTaskSwitchContext+0xac>)
 8002296:	4413      	add	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	3308      	adds	r3, #8
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d104      	bne.n	80022ba <vTaskSwitchContext+0x8a>
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <vTaskSwitchContext+0xb0>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000218 	.word	0x20000218
 80022d4:	20000204 	.word	0x20000204
 80022d8:	200001f8 	.word	0x200001f8
 80022dc:	200000b8 	.word	0x200000b8
 80022e0:	200000b4 	.word	0x200000b4

080022e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <vTaskPlaceOnEventList+0x24>
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e7fe      	b.n	8002306 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <vTaskPlaceOnEventList+0x44>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3318      	adds	r3, #24
 800230e:	4619      	mov	r1, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fe f9fd 	bl	8000710 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002316:	2101      	movs	r1, #1
 8002318:	6838      	ldr	r0, [r7, #0]
 800231a:	f000 fb73 	bl	8002a04 <prvAddCurrentTaskToDelayedList>
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200000b4 	.word	0x200000b4

0800232c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <vTaskPlaceOnEventListRestricted+0x26>
 800233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e7fe      	b.n	8002350 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <vTaskPlaceOnEventListRestricted+0x50>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3318      	adds	r3, #24
 8002358:	4619      	mov	r1, r3
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7fe f9b5 	bl	80006ca <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	68b8      	ldr	r0, [r7, #8]
 8002370:	f000 fb48 	bl	8002a04 <prvAddCurrentTaskToDelayedList>
    }
 8002374:	bf00      	nop
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200000b4 	.word	0x200000b4

08002380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <xTaskRemoveFromEventList+0x2a>
 8002396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239a:	f383 8811 	msr	BASEPRI, r3
 800239e:	f3bf 8f6f 	isb	sy
 80023a2:	f3bf 8f4f 	dsb	sy
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e7fe      	b.n	80023a8 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	3318      	adds	r3, #24
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f9e6 	bl	8000780 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <xTaskRemoveFromEventList+0xac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d11c      	bne.n	80023f6 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	3304      	adds	r3, #4
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f9dd 	bl	8000780 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	2201      	movs	r2, #1
 80023cc:	409a      	lsls	r2, r3
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <xTaskRemoveFromEventList+0xb0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	4a16      	ldr	r2, [pc, #88]	; (8002430 <xTaskRemoveFromEventList+0xb0>)
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <xTaskRemoveFromEventList+0xb4>)
 80023e6:	441a      	add	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	3304      	adds	r3, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f7fe f96b 	bl	80006ca <vListInsertEnd>
 80023f4:	e005      	b.n	8002402 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3318      	adds	r3, #24
 80023fa:	4619      	mov	r1, r3
 80023fc:	480e      	ldr	r0, [pc, #56]	; (8002438 <xTaskRemoveFromEventList+0xb8>)
 80023fe:	f7fe f964 	bl	80006ca <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <xTaskRemoveFromEventList+0xbc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	429a      	cmp	r2, r3
 800240e:	d905      	bls.n	800241c <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002410:	2301      	movs	r3, #1
 8002412:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <xTaskRemoveFromEventList+0xc0>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e001      	b.n	8002420 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002420:	697b      	ldr	r3, [r7, #20]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000218 	.word	0x20000218
 8002430:	200001f8 	.word	0x200001f8
 8002434:	200000b8 	.word	0x200000b8
 8002438:	200001b0 	.word	0x200001b0
 800243c:	200000b4 	.word	0x200000b4
 8002440:	20000204 	.word	0x20000204

08002444 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <vTaskInternalSetTimeOutState+0x24>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <vTaskInternalSetTimeOutState+0x28>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	605a      	str	r2, [r3, #4]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000208 	.word	0x20000208
 800246c:	200001f4 	.word	0x200001f4

08002470 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <xTaskCheckForTimeOut+0x24>
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	e7fe      	b.n	8002492 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <xTaskCheckForTimeOut+0x3e>
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e7fe      	b.n	80024ac <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80024ae:	f7fe fbb5 	bl	8000c1c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <xTaskCheckForTimeOut+0xc0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d102      	bne.n	80024d2 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	e026      	b.n	8002520 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <xTaskCheckForTimeOut+0xc4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d00a      	beq.n	80024f4 <xTaskCheckForTimeOut+0x84>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d805      	bhi.n	80024f4 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80024e8:	2301      	movs	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e015      	b.n	8002520 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d90b      	bls.n	8002516 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	1ad2      	subs	r2, r2, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff9a 	bl	8002444 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	e004      	b.n	8002520 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800251c:	2301      	movs	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002520:	f7fe fbaa 	bl	8000c78 <vPortExitCritical>

    return xReturn;
 8002524:	69fb      	ldr	r3, [r7, #28]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200001f4 	.word	0x200001f4
 8002534:	20000208 	.word	0x20000208

08002538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <vTaskMissedYield+0x14>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000204 	.word	0x20000204

08002550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002558:	f000 f852 	bl	8002600 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <prvIdleTask+0x28>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d9f9      	bls.n	8002558 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <prvIdleTask+0x2c>)
 8002566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002574:	e7f0      	b.n	8002558 <prvIdleTask+0x8>
 8002576:	bf00      	nop
 8002578:	200000b8 	.word	0x200000b8
 800257c:	e000ed04 	.word	0xe000ed04

08002580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	e00c      	b.n	80025a6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <prvInitialiseTaskLists+0x60>)
 8002598:	4413      	add	r3, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe f86a 	bl	8000674 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3301      	adds	r3, #1
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b09      	cmp	r3, #9
 80025aa:	d9ef      	bls.n	800258c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80025ac:	480d      	ldr	r0, [pc, #52]	; (80025e4 <prvInitialiseTaskLists+0x64>)
 80025ae:	f7fe f861 	bl	8000674 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80025b2:	480d      	ldr	r0, [pc, #52]	; (80025e8 <prvInitialiseTaskLists+0x68>)
 80025b4:	f7fe f85e 	bl	8000674 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <prvInitialiseTaskLists+0x6c>)
 80025ba:	f7fe f85b 	bl	8000674 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80025be:	480c      	ldr	r0, [pc, #48]	; (80025f0 <prvInitialiseTaskLists+0x70>)
 80025c0:	f7fe f858 	bl	8000674 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <prvInitialiseTaskLists+0x74>)
 80025c6:	f7fe f855 	bl	8000674 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <prvInitialiseTaskLists+0x78>)
 80025cc:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <prvInitialiseTaskLists+0x64>)
 80025ce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <prvInitialiseTaskLists+0x7c>)
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <prvInitialiseTaskLists+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200000b8 	.word	0x200000b8
 80025e4:	20000180 	.word	0x20000180
 80025e8:	20000194 	.word	0x20000194
 80025ec:	200001b0 	.word	0x200001b0
 80025f0:	200001c4 	.word	0x200001c4
 80025f4:	200001dc 	.word	0x200001dc
 80025f8:	200001a8 	.word	0x200001a8
 80025fc:	200001ac 	.word	0x200001ac

08002600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002606:	e019      	b.n	800263c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002608:	f7fe fb08 	bl	8000c1c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <prvCheckTasksWaitingTermination+0x4c>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe f8b1 	bl	8000780 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <prvCheckTasksWaitingTermination+0x50>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3b01      	subs	r3, #1
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <prvCheckTasksWaitingTermination+0x50>)
 8002626:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <prvCheckTasksWaitingTermination+0x54>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <prvCheckTasksWaitingTermination+0x54>)
 8002630:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002632:	f7fe fb21 	bl	8000c78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f80e 	bl	8002658 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <prvCheckTasksWaitingTermination+0x54>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e1      	bne.n	8002608 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	200001c4 	.word	0x200001c4
 8002650:	200001f0 	.word	0x200001f0
 8002654:	200001d8 	.word	0x200001d8

08002658 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd fff3 	bl	8000650 <vPortFree>
                vPortFree( pxTCB );
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fd fff0 	bl	8000650 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <prvResetNextTaskUnblockTime+0x2c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <prvResetNextTaskUnblockTime+0x30>)
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800268e:	e005      	b.n	800269c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <prvResetNextTaskUnblockTime+0x2c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <prvResetNextTaskUnblockTime+0x30>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	200001a8 	.word	0x200001a8
 80026a8:	20000210 	.word	0x20000210

080026ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <xTaskGetSchedulerState+0x34>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d102      	bne.n	80026c0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80026ba:	2301      	movs	r3, #1
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	e008      	b.n	80026d2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026c0:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <xTaskGetSchedulerState+0x38>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80026c8:	2302      	movs	r3, #2
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	e001      	b.n	80026d2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80026d2:	687b      	ldr	r3, [r7, #4]
    }
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200001fc 	.word	0x200001fc
 80026e4:	20000218 	.word	0x20000218

080026e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d05e      	beq.n	80027bc <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <xTaskPriorityInherit+0xe0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	429a      	cmp	r2, r3
 800270a:	d24e      	bcs.n	80027aa <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db06      	blt.n	8002722 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <xTaskPriorityInherit+0xe0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	f1c3 020a 	rsb	r2, r3, #10
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6959      	ldr	r1, [r3, #20]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4a26      	ldr	r2, [pc, #152]	; (80027cc <xTaskPriorityInherit+0xe4>)
 8002734:	4413      	add	r3, r2
 8002736:	4299      	cmp	r1, r3
 8002738:	d12f      	bne.n	800279a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3304      	adds	r3, #4
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe f81e 	bl	8000780 <uxListRemove>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43da      	mvns	r2, r3
 8002756:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <xTaskPriorityInherit+0xe8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4013      	ands	r3, r2
 800275c:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <xTaskPriorityInherit+0xe8>)
 800275e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <xTaskPriorityInherit+0xe0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	2201      	movs	r2, #1
 8002770:	409a      	lsls	r2, r3
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <xTaskPriorityInherit+0xe8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <xTaskPriorityInherit+0xe8>)
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4a10      	ldr	r2, [pc, #64]	; (80027cc <xTaskPriorityInherit+0xe4>)
 800278a:	441a      	add	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3304      	adds	r3, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7fd ff99 	bl	80006ca <vListInsertEnd>
 8002798:	e004      	b.n	80027a4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <xTaskPriorityInherit+0xe0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e008      	b.n	80027bc <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <xTaskPriorityInherit+0xe0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d201      	bcs.n	80027bc <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80027bc:	68fb      	ldr	r3, [r7, #12]
    }
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200000b4 	.word	0x200000b4
 80027cc:	200000b8 	.word	0x200000b8
 80027d0:	200001f8 	.word	0x200001f8

080027d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d061      	beq.n	80028ae <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80027ea:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <xTaskPriorityDisinherit+0xe4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d009      	beq.n	8002808 <xTaskPriorityDisinherit+0x34>
 80027f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f8:	f383 8811 	msr	BASEPRI, r3
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e7fe      	b.n	8002806 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <xTaskPriorityDisinherit+0x50>
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	e7fe      	b.n	8002822 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	429a      	cmp	r2, r3
 8002838:	d039      	beq.n	80028ae <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	2b00      	cmp	r3, #0
 8002840:	d135      	bne.n	80028ae <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	3304      	adds	r3, #4
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd ff9a 	bl	8000780 <uxListRemove>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	2201      	movs	r2, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43da      	mvns	r2, r3
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <xTaskPriorityDisinherit+0xe8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4013      	ands	r3, r2
 8002864:	4a15      	ldr	r2, [pc, #84]	; (80028bc <xTaskPriorityDisinherit+0xe8>)
 8002866:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	f1c3 020a 	rsb	r2, r3, #10
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	2201      	movs	r2, #1
 8002882:	409a      	lsls	r2, r3
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <xTaskPriorityDisinherit+0xe8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <xTaskPriorityDisinherit+0xe8>)
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <xTaskPriorityDisinherit+0xec>)
 800289c:	441a      	add	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	3304      	adds	r3, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f7fd ff10 	bl	80006ca <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80028ae:	697b      	ldr	r3, [r7, #20]
    }
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	200000b4 	.word	0x200000b4
 80028bc:	200001f8 	.word	0x200001f8
 80028c0:	200000b8 	.word	0x200000b8

080028c4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d075      	beq.n	80029c8 <vTaskPriorityDisinheritAfterTimeout+0x104>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e7fe      	b.n	80028f6 <vTaskPriorityDisinheritAfterTimeout+0x32>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d202      	bcs.n	8002908 <vTaskPriorityDisinheritAfterTimeout+0x44>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e002      	b.n	800290e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	429a      	cmp	r2, r3
 8002916:	d057      	beq.n	80029c8 <vTaskPriorityDisinheritAfterTimeout+0x104>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	429a      	cmp	r2, r3
 8002920:	d152      	bne.n	80029c8 <vTaskPriorityDisinheritAfterTimeout+0x104>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	429a      	cmp	r2, r3
 800292a:	d109      	bne.n	8002940 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	e7fe      	b.n	800293e <vTaskPriorityDisinheritAfterTimeout+0x7a>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db04      	blt.n	800295e <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 020a 	rsb	r2, r3, #10
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6959      	ldr	r1, [r3, #20]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800296e:	4413      	add	r3, r2
 8002970:	4299      	cmp	r1, r3
 8002972:	d129      	bne.n	80029c8 <vTaskPriorityDisinheritAfterTimeout+0x104>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	3304      	adds	r3, #4
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd ff01 	bl	8000780 <uxListRemove>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <vTaskPriorityDisinheritAfterTimeout+0xd6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	2201      	movs	r2, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4013      	ands	r3, r2
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002998:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4a06      	ldr	r2, [pc, #24]	; (80029d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80029ba:	441a      	add	r2, r3
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	3304      	adds	r3, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f7fd fe81 	bl	80006ca <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80029c8:	bf00      	nop
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200000b4 	.word	0x200000b4
 80029d4:	200000b8 	.word	0x200000b8
 80029d8:	200001f8 	.word	0x200001f8

080029dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d004      	beq.n	80029f2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ee:	3201      	adds	r2, #1
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 80029f2:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <pvTaskIncrementMutexHeldCount+0x24>)
 80029f4:	681b      	ldr	r3, [r3, #0]
    }
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	200000b4 	.word	0x200000b4

08002a04 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002a0e:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd feb0 	bl	8000780 <uxListRemove>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d10a      	bne.n	8002a5c <prvAddCurrentTaskToDelayedList+0x58>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3304      	adds	r3, #4
 8002a52:	4619      	mov	r1, r3
 8002a54:	481a      	ldr	r0, [pc, #104]	; (8002ac0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a56:	f7fd fe38 	bl	80006ca <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002a5a:	e026      	b.n	8002aaa <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d209      	bcs.n	8002a88 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7fd fe45 	bl	8000710 <vListInsert>
}
 8002a86:	e010      	b.n	8002aaa <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3304      	adds	r3, #4
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f7fd fe3b 	bl	8000710 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d202      	bcs.n	8002aaa <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002aa4:	4a09      	ldr	r2, [pc, #36]	; (8002acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6013      	str	r3, [r2, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200001f4 	.word	0x200001f4
 8002ab8:	200000b4 	.word	0x200000b4
 8002abc:	200001f8 	.word	0x200001f8
 8002ac0:	200001dc 	.word	0x200001dc
 8002ac4:	200001ac 	.word	0x200001ac
 8002ac8:	200001a8 	.word	0x200001a8
 8002acc:	20000210 	.word	0x20000210

08002ad0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002ada:	f000 facd 	bl	8003078 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <xTimerCreateTimerTask+0x50>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <xTimerCreateTimerTask+0x54>)
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2303      	movs	r3, #3
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2300      	movs	r3, #0
 8002af0:	2246      	movs	r2, #70	; 0x46
 8002af2:	490d      	ldr	r1, [pc, #52]	; (8002b28 <xTimerCreateTimerTask+0x58>)
 8002af4:	480d      	ldr	r0, [pc, #52]	; (8002b2c <xTimerCreateTimerTask+0x5c>)
 8002af6:	f7ff f86f 	bl	8001bd8 <xTaskCreate>
 8002afa:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <xTimerCreateTimerTask+0x46>
 8002b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	e7fe      	b.n	8002b14 <xTimerCreateTimerTask+0x44>
        return xReturn;
 8002b16:	687b      	ldr	r3, [r7, #4]
    }
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000024c 	.word	0x2000024c
 8002b24:	20000250 	.word	0x20000250
 8002b28:	08003330 	.word	0x08003330
 8002b2c:	08002c61 	.word	0x08002c61

08002b30 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <xTimerGenericCommand+0x2c>
 8002b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	e7fe      	b.n	8002b5a <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <xTimerGenericCommand+0x94>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02a      	beq.n	8002bba <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	dc18      	bgt.n	8002ba8 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002b76:	f7ff fd99 	bl	80026ac <xTaskGetSchedulerState>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d109      	bne.n	8002b94 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <xTimerGenericCommand+0x94>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	f107 0114 	add.w	r1, r7, #20
 8002b88:	2300      	movs	r3, #0
 8002b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8c:	f7fe fa52 	bl	8001034 <xQueueGenericSend>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24
 8002b92:	e012      	b.n	8002bba <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <xTimerGenericCommand+0x94>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f107 0114 	add.w	r1, r7, #20
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f7fe fa48 	bl	8001034 <xQueueGenericSend>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24
 8002ba6:	e008      	b.n	8002bba <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <xTimerGenericCommand+0x94>)
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	f107 0114 	add.w	r1, r7, #20
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	f7fe fb38 	bl	8001228 <xQueueGenericSendFromISR>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	2000024c 	.word	0x2000024c

08002bc8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bd2:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <prvProcessExpiredTimer+0x94>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3304      	adds	r3, #4
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fdcd 	bl	8000780 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d021      	beq.n	8002c38 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	18d1      	adds	r1, r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	6978      	ldr	r0, [r7, #20]
 8002c02:	f000 f8cf 	bl	8002da4 <prvInsertTimerInActiveList>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01e      	beq.n	8002c4a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2300      	movs	r3, #0
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	2100      	movs	r1, #0
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f7ff ff8a 	bl	8002b30 <xTimerGenericCommand>
 8002c1c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d112      	bne.n	8002c4a <prvProcessExpiredTimer+0x82>
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e7fe      	b.n	8002c36 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	4798      	blx	r3
    }
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000244 	.word	0x20000244

08002c60 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c68:	f107 0308 	add.w	r3, r7, #8
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f857 	bl	8002d20 <prvGetNextExpireTime>
 8002c72:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4619      	mov	r1, r3
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f803 	bl	8002c84 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002c7e:	f000 f8d3 	bl	8002e28 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c82:	e7f1      	b.n	8002c68 <prvTimerTask+0x8>

08002c84 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002c8e:	f7ff f95f 	bl	8001f50 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c92:	f107 0308 	add.w	r3, r7, #8
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f864 	bl	8002d64 <prvSampleTimeNow>
 8002c9c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d130      	bne.n	8002d06 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <prvProcessTimerOrBlockTask+0x3c>
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d806      	bhi.n	8002cc0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002cb2:	f7ff f95b 	bl	8001f6c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002cb6:	68f9      	ldr	r1, [r7, #12]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff85 	bl	8002bc8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002cbe:	e024      	b.n	8002d0a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <prvProcessTimerOrBlockTask+0x90>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <prvProcessTimerOrBlockTask+0x50>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <prvProcessTimerOrBlockTask+0x52>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <prvProcessTimerOrBlockTask+0x94>)
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7fe fe50 	bl	800198a <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002cea:	f7ff f93f 	bl	8001f6c <xTaskResumeAll>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <prvProcessTimerOrBlockTask+0x98>)
 8002cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	f3bf 8f6f 	isb	sy
    }
 8002d04:	e001      	b.n	8002d0a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002d06:	f7ff f931 	bl	8001f6c <xTaskResumeAll>
    }
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000248 	.word	0x20000248
 8002d18:	2000024c 	.word	0x2000024c
 8002d1c:	e000ed04 	.word	0xe000ed04

08002d20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <prvGetNextExpireTime+0x40>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <prvGetNextExpireTime+0x16>
 8002d32:	2201      	movs	r2, #1
 8002d34:	e000      	b.n	8002d38 <prvGetNextExpireTime+0x18>
 8002d36:	2200      	movs	r2, #0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <prvGetNextExpireTime+0x40>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e001      	b.n	8002d54 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002d54:	68fb      	ldr	r3, [r7, #12]
    }
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	20000244 	.word	0x20000244

08002d64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002d6c:	f7ff f99a 	bl	80020a4 <xTaskGetTickCount>
 8002d70:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <prvSampleTimeNow+0x3c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d205      	bcs.n	8002d88 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002d7c:	f000 f918 	bl	8002fb0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e002      	b.n	8002d8e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <prvSampleTimeNow+0x3c>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002d94:	68fb      	ldr	r3, [r7, #12]
    }
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000254 	.word	0x20000254

08002da4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d812      	bhi.n	8002df0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	1ad2      	subs	r2, r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d302      	bcc.n	8002dde <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e01b      	b.n	8002e16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <prvInsertTimerInActiveList+0x7c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f7fd fc91 	bl	8000710 <vListInsert>
 8002dee:	e012      	b.n	8002e16 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d206      	bcs.n	8002e06 <prvInsertTimerInActiveList+0x62>
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d302      	bcc.n	8002e06 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e007      	b.n	8002e16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <prvInsertTimerInActiveList+0x80>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f7fd fc7d 	bl	8000710 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002e16:	697b      	ldr	r3, [r7, #20]
    }
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000248 	.word	0x20000248
 8002e24:	20000244 	.word	0x20000244

08002e28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e2e:	e0ac      	b.n	8002f8a <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f2c0 80a9 	blt.w	8002f8a <prvProcessReceivedCommands+0x162>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	3304      	adds	r3, #4
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fc99 	bl	8000780 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff87 	bl	8002d64 <prvSampleTimeNow>
 8002e56:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	f200 8094 	bhi.w	8002f88 <prvProcessReceivedCommands+0x160>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <prvProcessReceivedCommands+0x40>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e91 	.word	0x08002e91
 8002e6c:	08002e91 	.word	0x08002e91
 8002e70:	08002e91 	.word	0x08002e91
 8002e74:	08002f03 	.word	0x08002f03
 8002e78:	08002f17 	.word	0x08002f17
 8002e7c:	08002f5f 	.word	0x08002f5f
 8002e80:	08002e91 	.word	0x08002e91
 8002e84:	08002e91 	.word	0x08002e91
 8002e88:	08002f03 	.word	0x08002f03
 8002e8c:	08002f17 	.word	0x08002f17
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	18d1      	adds	r1, r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a3a      	ldr	r2, [r7, #32]
 8002eae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eb0:	f7ff ff78 	bl	8002da4 <prvInsertTimerInActiveList>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d067      	beq.n	8002f8a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05c      	beq.n	8002f8a <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	441a      	add	r2, r3
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2300      	movs	r3, #0
 8002ede:	2100      	movs	r1, #0
 8002ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ee2:	f7ff fe25 	bl	8002b30 <xTimerGenericCommand>
 8002ee6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d14d      	bne.n	8002f8a <prvProcessReceivedCommands+0x162>
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e7fe      	b.n	8002f00 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8002f14:	e039      	b.n	8002f8a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <prvProcessReceivedCommands+0x122>
 8002f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e7fe      	b.n	8002f48 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	18d1      	adds	r1, r2, r3
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f58:	f7ff ff24 	bl	8002da4 <prvInsertTimerInActiveList>
                        break;
 8002f5c:	e015      	b.n	8002f8a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8002f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f6e:	f7fd fb6f 	bl	8000650 <vPortFree>
 8002f72:	e00a      	b.n	8002f8a <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002f86:	e000      	b.n	8002f8a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002f88:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <prvProcessReceivedCommands+0x184>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f107 0108 	add.w	r1, r7, #8
 8002f92:	2200      	movs	r2, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f9ed 	bl	8001374 <xQueueReceive>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f af47 	bne.w	8002e30 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002fa2:	bf00      	nop
 8002fa4:	3728      	adds	r7, #40	; 0x28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2000024c 	.word	0x2000024c

08002fb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002fb6:	e047      	b.n	8003048 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <prvSwitchTimerLists+0xc0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <prvSwitchTimerLists+0xc0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fbd5 	bl	8000780 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	6938      	ldr	r0, [r7, #16]
 8002fdc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d02d      	beq.n	8003048 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d90e      	bls.n	800301c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <prvSwitchTimerLists+0xc0>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	3304      	adds	r3, #4
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f7fd fb7b 	bl	8000710 <vListInsert>
 800301a:	e015      	b.n	8003048 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	2100      	movs	r1, #0
 8003026:	6938      	ldr	r0, [r7, #16]
 8003028:	f7ff fd82 	bl	8002b30 <xTimerGenericCommand>
 800302c:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <prvSwitchTimerLists+0x98>
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	e7fe      	b.n	8003046 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <prvSwitchTimerLists+0xc0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1b2      	bne.n	8002fb8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <prvSwitchTimerLists+0xc0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <prvSwitchTimerLists+0xc4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <prvSwitchTimerLists+0xc0>)
 800305e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <prvSwitchTimerLists+0xc4>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
    }
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000244 	.word	0x20000244
 8003074:	20000248 	.word	0x20000248

08003078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800307c:	f7fd fdce 	bl	8000c1c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <prvCheckForValidListAndQueue+0x40>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d113      	bne.n	80030b0 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8003088:	480c      	ldr	r0, [pc, #48]	; (80030bc <prvCheckForValidListAndQueue+0x44>)
 800308a:	f7fd faf3 	bl	8000674 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800308e:	480c      	ldr	r0, [pc, #48]	; (80030c0 <prvCheckForValidListAndQueue+0x48>)
 8003090:	f7fd faf0 	bl	8000674 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <prvCheckForValidListAndQueue+0x4c>)
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <prvCheckForValidListAndQueue+0x44>)
 8003098:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <prvCheckForValidListAndQueue+0x50>)
 800309c:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <prvCheckForValidListAndQueue+0x48>)
 800309e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80030a0:	2200      	movs	r2, #0
 80030a2:	210c      	movs	r1, #12
 80030a4:	2005      	movs	r0, #5
 80030a6:	f7fd ff15 	bl	8000ed4 <xQueueGenericCreate>
 80030aa:	4602      	mov	r2, r0
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <prvCheckForValidListAndQueue+0x40>)
 80030ae:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030b0:	f7fd fde2 	bl	8000c78 <vPortExitCritical>
    }
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	2000024c 	.word	0x2000024c
 80030bc:	2000021c 	.word	0x2000021c
 80030c0:	20000230 	.word	0x20000230
 80030c4:	20000244 	.word	0x20000244
 80030c8:	20000248 	.word	0x20000248

080030cc <__libc_init_array>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	2500      	movs	r5, #0
 80030d0:	4e0c      	ldr	r6, [pc, #48]	; (8003104 <__libc_init_array+0x38>)
 80030d2:	4c0d      	ldr	r4, [pc, #52]	; (8003108 <__libc_init_array+0x3c>)
 80030d4:	1ba4      	subs	r4, r4, r6
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	42a5      	cmp	r5, r4
 80030da:	d109      	bne.n	80030f0 <__libc_init_array+0x24>
 80030dc:	f000 f908 	bl	80032f0 <_init>
 80030e0:	2500      	movs	r5, #0
 80030e2:	4e0a      	ldr	r6, [pc, #40]	; (800310c <__libc_init_array+0x40>)
 80030e4:	4c0a      	ldr	r4, [pc, #40]	; (8003110 <__libc_init_array+0x44>)
 80030e6:	1ba4      	subs	r4, r4, r6
 80030e8:	10a4      	asrs	r4, r4, #2
 80030ea:	42a5      	cmp	r5, r4
 80030ec:	d105      	bne.n	80030fa <__libc_init_array+0x2e>
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f4:	4798      	blx	r3
 80030f6:	3501      	adds	r5, #1
 80030f8:	e7ee      	b.n	80030d8 <__libc_init_array+0xc>
 80030fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030fe:	4798      	blx	r3
 8003100:	3501      	adds	r5, #1
 8003102:	e7f2      	b.n	80030ea <__libc_init_array+0x1e>
 8003104:	08003338 	.word	0x08003338
 8003108:	08003338 	.word	0x08003338
 800310c:	08003338 	.word	0x08003338
 8003110:	0800333c 	.word	0x0800333c

08003114 <malloc>:
 8003114:	4b02      	ldr	r3, [pc, #8]	; (8003120 <malloc+0xc>)
 8003116:	4601      	mov	r1, r0
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	f000 b86b 	b.w	80031f4 <_malloc_r>
 800311e:	bf00      	nop
 8003120:	20000014 	.word	0x20000014

08003124 <free>:
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <free+0xc>)
 8003126:	4601      	mov	r1, r0
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f000 b817 	b.w	800315c <_free_r>
 800312e:	bf00      	nop
 8003130:	20000014 	.word	0x20000014

08003134 <memcpy>:
 8003134:	b510      	push	{r4, lr}
 8003136:	1e43      	subs	r3, r0, #1
 8003138:	440a      	add	r2, r1
 800313a:	4291      	cmp	r1, r2
 800313c:	d100      	bne.n	8003140 <memcpy+0xc>
 800313e:	bd10      	pop	{r4, pc}
 8003140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003148:	e7f7      	b.n	800313a <memcpy+0x6>

0800314a <memset>:
 800314a:	4603      	mov	r3, r0
 800314c:	4402      	add	r2, r0
 800314e:	4293      	cmp	r3, r2
 8003150:	d100      	bne.n	8003154 <memset+0xa>
 8003152:	4770      	bx	lr
 8003154:	f803 1b01 	strb.w	r1, [r3], #1
 8003158:	e7f9      	b.n	800314e <memset+0x4>
	...

0800315c <_free_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4605      	mov	r5, r0
 8003160:	2900      	cmp	r1, #0
 8003162:	d043      	beq.n	80031ec <_free_r+0x90>
 8003164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003168:	1f0c      	subs	r4, r1, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	bfb8      	it	lt
 800316e:	18e4      	addlt	r4, r4, r3
 8003170:	f000 f8ae 	bl	80032d0 <__malloc_lock>
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <_free_r+0x94>)
 8003176:	6813      	ldr	r3, [r2, #0]
 8003178:	4610      	mov	r0, r2
 800317a:	b933      	cbnz	r3, 800318a <_free_r+0x2e>
 800317c:	6063      	str	r3, [r4, #4]
 800317e:	6014      	str	r4, [r2, #0]
 8003180:	4628      	mov	r0, r5
 8003182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003186:	f000 b8a4 	b.w	80032d2 <__malloc_unlock>
 800318a:	42a3      	cmp	r3, r4
 800318c:	d90b      	bls.n	80031a6 <_free_r+0x4a>
 800318e:	6821      	ldr	r1, [r4, #0]
 8003190:	1862      	adds	r2, r4, r1
 8003192:	4293      	cmp	r3, r2
 8003194:	bf01      	itttt	eq
 8003196:	681a      	ldreq	r2, [r3, #0]
 8003198:	685b      	ldreq	r3, [r3, #4]
 800319a:	1852      	addeq	r2, r2, r1
 800319c:	6022      	streq	r2, [r4, #0]
 800319e:	6063      	str	r3, [r4, #4]
 80031a0:	6004      	str	r4, [r0, #0]
 80031a2:	e7ed      	b.n	8003180 <_free_r+0x24>
 80031a4:	4613      	mov	r3, r2
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	b10a      	cbz	r2, 80031ae <_free_r+0x52>
 80031aa:	42a2      	cmp	r2, r4
 80031ac:	d9fa      	bls.n	80031a4 <_free_r+0x48>
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	1858      	adds	r0, r3, r1
 80031b2:	42a0      	cmp	r0, r4
 80031b4:	d10b      	bne.n	80031ce <_free_r+0x72>
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	4401      	add	r1, r0
 80031ba:	1858      	adds	r0, r3, r1
 80031bc:	4282      	cmp	r2, r0
 80031be:	6019      	str	r1, [r3, #0]
 80031c0:	d1de      	bne.n	8003180 <_free_r+0x24>
 80031c2:	6810      	ldr	r0, [r2, #0]
 80031c4:	6852      	ldr	r2, [r2, #4]
 80031c6:	4401      	add	r1, r0
 80031c8:	6019      	str	r1, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	e7d8      	b.n	8003180 <_free_r+0x24>
 80031ce:	d902      	bls.n	80031d6 <_free_r+0x7a>
 80031d0:	230c      	movs	r3, #12
 80031d2:	602b      	str	r3, [r5, #0]
 80031d4:	e7d4      	b.n	8003180 <_free_r+0x24>
 80031d6:	6820      	ldr	r0, [r4, #0]
 80031d8:	1821      	adds	r1, r4, r0
 80031da:	428a      	cmp	r2, r1
 80031dc:	bf01      	itttt	eq
 80031de:	6811      	ldreq	r1, [r2, #0]
 80031e0:	6852      	ldreq	r2, [r2, #4]
 80031e2:	1809      	addeq	r1, r1, r0
 80031e4:	6021      	streq	r1, [r4, #0]
 80031e6:	6062      	str	r2, [r4, #4]
 80031e8:	605c      	str	r4, [r3, #4]
 80031ea:	e7c9      	b.n	8003180 <_free_r+0x24>
 80031ec:	bd38      	pop	{r3, r4, r5, pc}
 80031ee:	bf00      	nop
 80031f0:	20000258 	.word	0x20000258

080031f4 <_malloc_r>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	1ccd      	adds	r5, r1, #3
 80031f8:	f025 0503 	bic.w	r5, r5, #3
 80031fc:	3508      	adds	r5, #8
 80031fe:	2d0c      	cmp	r5, #12
 8003200:	bf38      	it	cc
 8003202:	250c      	movcc	r5, #12
 8003204:	2d00      	cmp	r5, #0
 8003206:	4606      	mov	r6, r0
 8003208:	db01      	blt.n	800320e <_malloc_r+0x1a>
 800320a:	42a9      	cmp	r1, r5
 800320c:	d903      	bls.n	8003216 <_malloc_r+0x22>
 800320e:	230c      	movs	r3, #12
 8003210:	6033      	str	r3, [r6, #0]
 8003212:	2000      	movs	r0, #0
 8003214:	bd70      	pop	{r4, r5, r6, pc}
 8003216:	f000 f85b 	bl	80032d0 <__malloc_lock>
 800321a:	4a23      	ldr	r2, [pc, #140]	; (80032a8 <_malloc_r+0xb4>)
 800321c:	6814      	ldr	r4, [r2, #0]
 800321e:	4621      	mov	r1, r4
 8003220:	b991      	cbnz	r1, 8003248 <_malloc_r+0x54>
 8003222:	4c22      	ldr	r4, [pc, #136]	; (80032ac <_malloc_r+0xb8>)
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	b91b      	cbnz	r3, 8003230 <_malloc_r+0x3c>
 8003228:	4630      	mov	r0, r6
 800322a:	f000 f841 	bl	80032b0 <_sbrk_r>
 800322e:	6020      	str	r0, [r4, #0]
 8003230:	4629      	mov	r1, r5
 8003232:	4630      	mov	r0, r6
 8003234:	f000 f83c 	bl	80032b0 <_sbrk_r>
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d126      	bne.n	800328a <_malloc_r+0x96>
 800323c:	230c      	movs	r3, #12
 800323e:	4630      	mov	r0, r6
 8003240:	6033      	str	r3, [r6, #0]
 8003242:	f000 f846 	bl	80032d2 <__malloc_unlock>
 8003246:	e7e4      	b.n	8003212 <_malloc_r+0x1e>
 8003248:	680b      	ldr	r3, [r1, #0]
 800324a:	1b5b      	subs	r3, r3, r5
 800324c:	d41a      	bmi.n	8003284 <_malloc_r+0x90>
 800324e:	2b0b      	cmp	r3, #11
 8003250:	d90f      	bls.n	8003272 <_malloc_r+0x7e>
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	18cc      	adds	r4, r1, r3
 8003256:	50cd      	str	r5, [r1, r3]
 8003258:	4630      	mov	r0, r6
 800325a:	f000 f83a 	bl	80032d2 <__malloc_unlock>
 800325e:	f104 000b 	add.w	r0, r4, #11
 8003262:	1d23      	adds	r3, r4, #4
 8003264:	f020 0007 	bic.w	r0, r0, #7
 8003268:	1ac3      	subs	r3, r0, r3
 800326a:	d01b      	beq.n	80032a4 <_malloc_r+0xb0>
 800326c:	425a      	negs	r2, r3
 800326e:	50e2      	str	r2, [r4, r3]
 8003270:	bd70      	pop	{r4, r5, r6, pc}
 8003272:	428c      	cmp	r4, r1
 8003274:	bf0b      	itete	eq
 8003276:	6863      	ldreq	r3, [r4, #4]
 8003278:	684b      	ldrne	r3, [r1, #4]
 800327a:	6013      	streq	r3, [r2, #0]
 800327c:	6063      	strne	r3, [r4, #4]
 800327e:	bf18      	it	ne
 8003280:	460c      	movne	r4, r1
 8003282:	e7e9      	b.n	8003258 <_malloc_r+0x64>
 8003284:	460c      	mov	r4, r1
 8003286:	6849      	ldr	r1, [r1, #4]
 8003288:	e7ca      	b.n	8003220 <_malloc_r+0x2c>
 800328a:	1cc4      	adds	r4, r0, #3
 800328c:	f024 0403 	bic.w	r4, r4, #3
 8003290:	42a0      	cmp	r0, r4
 8003292:	d005      	beq.n	80032a0 <_malloc_r+0xac>
 8003294:	1a21      	subs	r1, r4, r0
 8003296:	4630      	mov	r0, r6
 8003298:	f000 f80a 	bl	80032b0 <_sbrk_r>
 800329c:	3001      	adds	r0, #1
 800329e:	d0cd      	beq.n	800323c <_malloc_r+0x48>
 80032a0:	6025      	str	r5, [r4, #0]
 80032a2:	e7d9      	b.n	8003258 <_malloc_r+0x64>
 80032a4:	bd70      	pop	{r4, r5, r6, pc}
 80032a6:	bf00      	nop
 80032a8:	20000258 	.word	0x20000258
 80032ac:	2000025c 	.word	0x2000025c

080032b0 <_sbrk_r>:
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	2300      	movs	r3, #0
 80032b4:	4c05      	ldr	r4, [pc, #20]	; (80032cc <_sbrk_r+0x1c>)
 80032b6:	4605      	mov	r5, r0
 80032b8:	4608      	mov	r0, r1
 80032ba:	6023      	str	r3, [r4, #0]
 80032bc:	f000 f80a 	bl	80032d4 <_sbrk>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	d102      	bne.n	80032ca <_sbrk_r+0x1a>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	b103      	cbz	r3, 80032ca <_sbrk_r+0x1a>
 80032c8:	602b      	str	r3, [r5, #0]
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	20000264 	.word	0x20000264

080032d0 <__malloc_lock>:
 80032d0:	4770      	bx	lr

080032d2 <__malloc_unlock>:
 80032d2:	4770      	bx	lr

080032d4 <_sbrk>:
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <_sbrk+0x14>)
 80032d6:	4602      	mov	r2, r0
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	b909      	cbnz	r1, 80032e0 <_sbrk+0xc>
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <_sbrk+0x18>)
 80032de:	6019      	str	r1, [r3, #0]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	4402      	add	r2, r0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	4770      	bx	lr
 80032e8:	20000260 	.word	0x20000260
 80032ec:	20000268 	.word	0x20000268

080032f0 <_init>:
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	bf00      	nop
 80032f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f6:	bc08      	pop	{r3}
 80032f8:	469e      	mov	lr, r3
 80032fa:	4770      	bx	lr

080032fc <_fini>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	bf00      	nop
 8003300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003302:	bc08      	pop	{r3}
 8003304:	469e      	mov	lr, r3
 8003306:	4770      	bx	lr
